#!/bin/bash

# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication Flow
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡∏Ç‡∏≠‡∏á Smart AI Hub

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Base URL ‡∏Ç‡∏≠‡∏á Auth Service
BASE_URL="http://localhost:3001"
API_BASE="$BASE_URL/api/auth"

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

print_step() {
    echo -e "\n${YELLOW}üîÑ $1${NC}"
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
USER_EMAIL="testuser$(date +%s)@example.com"
USER_PASSWORD="TestPassword123!"
ACCESS_TOKEN=""
REFRESH_TOKEN=""

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Auth Service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
check_service() {
    print_step "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auth Service..."
    
    response=$(curl -s "$BASE_URL/health")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "running" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q "running"; then
        print_success "Auth Service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
        echo "Response: $response"
        return 0
    else
        print_error "Auth Service ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ"
        print_info "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Auth Service ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà $BASE_URL"
        echo "Response: $response"
        exit 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Register ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
register_user() {
    print_step "1. Register ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"
    
    response=$(curl -s -X POST "$API_BASE/register" \
        -H "Content-Type: application/json" \
        -d "{
            \"email\": \"$USER_EMAIL\",
            \"password\": \"$USER_PASSWORD\"
        }")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "success":true ‡∏´‡∏£‡∏∑‡∏≠ "Registration successful" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q '"success":true\|"Registration successful"'; then
        print_success "Register ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        echo "Response: $response"
        
        # ‡∏î‡∏∂‡∏á tokens ‡∏à‡∏≤‡∏Å response ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ node
        ACCESS_TOKEN=$(echo "$response" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).data.token || JSON.parse(require('fs').readFileSync(0, 'utf8')).data.accessToken)")
        REFRESH_TOKEN=$(echo "$response" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).data.refreshToken)")
        
        print_info "Email: $USER_EMAIL"
        return 0
    else
        print_error "Register ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        echo "Response: $response"
        return 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login
login_user() {
    print_step "2. Login ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö tokens"
    
    response=$(curl -s -X POST "$API_BASE/login" \
        -H "Content-Type: application/json" \
        -d "{
            \"email\": \"$USER_EMAIL\",
            \"password\": \"$USER_PASSWORD\"
        }")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "success":true ‡∏´‡∏£‡∏∑‡∏≠ "Login successful" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q '"success":true\|"Login successful"'; then
        print_success "Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        echo "Response: $response"
        
        # ‡∏î‡∏∂‡∏á tokens ‡∏à‡∏≤‡∏Å response ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ node
        ACCESS_TOKEN=$(echo "$response" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).data.accessToken)")
        REFRESH_TOKEN=$(echo "$response" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).data.refreshToken)")
        
        print_info "Access Token: ${ACCESS_TOKEN:0:20}..."
        print_info "Refresh Token: ${REFRESH_TOKEN:0:20}..."
        return 0
    else
        print_error "Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        echo "Response: $response"
        return 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint
call_protected_endpoint() {
    print_step "3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏î‡πâ‡∏ß‡∏¢ Access Token"
    
    response=$(curl -s -X GET "$API_BASE/me" \
        -H "Authorization: Bearer $ACCESS_TOKEN")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "success":true ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q '"success":true'; then
        print_success "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        echo "Response: $response"
        return 0
    else
        print_error "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        echo "Response: $response"
        return 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Refresh Access Token
refresh_access_token() {
    print_step "4. Refresh Access Token"
    
    response=$(curl -s -X POST "$API_BASE/refresh" \
        -H "Content-Type: application/json" \
        -d "{
            \"refreshToken\": \"$REFRESH_TOKEN\"
        }")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "success":true ‡∏´‡∏£‡∏∑‡∏≠ "Token refreshed successfully" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q '"success":true\|"Token refreshed successfully"'; then
        print_success "Refresh Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        echo "Response: $response"
        
        # ‡∏î‡∏∂‡∏á tokens ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å response ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ node
        ACCESS_TOKEN=$(echo "$response" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).data.accessToken)")
        REFRESH_TOKEN=$(echo "$response" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).data.refreshToken)")
        
        print_info "New Access Token: ${ACCESS_TOKEN:0:20}..."
        print_info "New Refresh Token: ${REFRESH_TOKEN:0:20}..."
        return 0
    else
        print_error "Refresh Token ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        echo "Response: $response"
        return 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logout
logout_user() {
    print_step "5. Logout"
    
    response=$(curl -s -X POST "$API_BASE/logout" \
        -H "Authorization: Bearer $ACCESS_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{
            \"refreshToken\": \"$REFRESH_TOKEN\"
        }")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "success":true ‡∏´‡∏£‡∏∑‡∏≠ "Logged out successfully" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q '"success":true\|"Logged out successfully"'; then
        print_success "Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        echo "Response: $response"
        return 0
    else
        print_error "Logout ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        echo "Response: $response"
        return 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏´‡∏•‡∏±‡∏á Logout
call_protected_after_logout() {
    print_step "6. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏´‡∏•‡∏±‡∏á Logout (‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)"
    
    response=$(curl -s -X GET "$API_BASE/me" \
        -H "Authorization: Bearer $ACCESS_TOKEN")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "success":false ‡∏´‡∏£‡∏∑‡∏≠ "Unauthorized" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if echo "$response" | grep -q '"success":false\|"Unauthorized"\|"invalid token"\|"revoked"'; then
        print_success "Protected Endpoint ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á"
        echo "Response: $response"
        return 0
    else
        print_error "Protected Endpoint ‡πÑ‡∏°‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á"
        echo "Response: $response"
        return 1
    fi
}

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
echo "========================================"
echo "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication Flow"
echo "========================================"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ curl ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if ! command -v curl &> /dev/null; then
    print_error "curl ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ"
    exit 1
fi

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ node ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parsing JSON)
if ! command -v node &> /dev/null; then
    print_error "node ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ"
    exit 1
fi

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
check_service || exit 1
register_user || exit 1
login_user || exit 1
call_protected_endpoint || exit 1
refresh_access_token || exit 1
logout_user || exit 1
call_protected_after_logout || exit 1

echo -e "\n${GREEN}========================================"
echo "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication Flow ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
echo "========================================${NC}"