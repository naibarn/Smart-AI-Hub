const http = require('http');
const https = require('https');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á HTTP request
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const protocol = options.url.startsWith('https') ? https : http;
    const url = new URL(options.url);

    const requestOptions = {
      hostname: url.hostname,
      port: url.port || (options.url.startsWith('https') ? 443 : 80),
      path: url.pathname + url.search,
      method: options.method || 'GET',
      headers: options.headers || {},
    };

    const req = protocol.request(requestOptions, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          body: body,
        });
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(data);
    }
    req.end();
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function printSuccess(message) {
  console.log(`\x1b[32m‚úÖ ${message}\x1b[0m`);
}

function printError(message) {
  console.log(`\x1b[31m‚ùå ${message}\x1b[0m`);
}

function printInfo(message) {
  console.log(`\x1b[33m‚ÑπÔ∏è  ${message}\x1b[0m`);
}

function printStep(message) {
  console.log(`\n\x1b[33müîÑ ${message}\x1b[0m`);
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const USER_EMAIL = `testuser${Date.now()}@example.com`;
const USER_PASSWORD = 'TestPassword123!';
let ACCESS_TOKEN = '';
let REFRESH_TOKEN = '';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function testAuthFlow() {
  console.log('========================================');
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication Flow');
  console.log('========================================');

  const BASE_URL = 'http://localhost:3001';
  const API_BASE = `${BASE_URL}/api/auth`;

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auth Service
    printStep('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auth Service...');
    const healthResponse = await makeRequest({ url: `${BASE_URL}/health` });

    if (healthResponse.statusCode === 200) {
      const healthData = JSON.parse(healthResponse.body);
      printSuccess('Auth Service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
      console.log(`Response: ${healthResponse.body}`);
    } else {
      printError(`Auth Service ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ (HTTP Code: ${healthResponse.statusCode})`);
      printInfo(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Auth Service ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${BASE_URL}`);
      return;
    }

    // 2. Register ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    printStep('1. Register ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà');
    const registerData = JSON.stringify({
      email: USER_EMAIL,
      password: USER_PASSWORD,
    });

    const registerResponse = await makeRequest(
      {
        url: `${API_BASE}/register`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(registerData),
        },
      },
      registerData
    );

    if (registerResponse.statusCode === 201) {
      const registerResult = JSON.parse(registerResponse.body);
      printSuccess('Register ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log(`Response: ${registerResponse.body}`);
      printInfo(`Email: ${USER_EMAIL}`);

      // ‡πÄ‡∏Å‡πá‡∏ö tokens ‡∏à‡∏≤‡∏Å response
      ACCESS_TOKEN = registerResult.data.token || registerResult.data.accessToken;
      REFRESH_TOKEN = registerResult.data.refreshToken;
    } else {
      printError(`Register ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP Code: ${registerResponse.statusCode})`);
      console.log(`Response: ${registerResponse.body}`);
      return;
    }

    // 3. Login
    printStep('2. Login ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö tokens');
    const loginData = JSON.stringify({
      email: USER_EMAIL,
      password: USER_PASSWORD,
    });

    const loginResponse = await makeRequest(
      {
        url: `${API_BASE}/login`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(loginData),
        },
      },
      loginData
    );

    if (loginResponse.statusCode === 200) {
      const loginResult = JSON.parse(loginResponse.body);
      printSuccess('Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log(`Response: ${loginResponse.body}`);

      // ‡πÄ‡∏Å‡πá‡∏ö tokens ‡∏à‡∏≤‡∏Å response
      ACCESS_TOKEN = loginResult.data.accessToken;
      REFRESH_TOKEN = loginResult.data.refreshToken;

      printInfo(`Access Token: ${ACCESS_TOKEN.substring(0, 20)}...`);
      printInfo(`Refresh Token: ${REFRESH_TOKEN.substring(0, 20)}...`);
    } else {
      printError(`Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP Code: ${loginResponse.statusCode})`);
      console.log(`Response: ${loginResponse.body}`);
      return;
    }

    // 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint
    printStep('3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏î‡πâ‡∏ß‡∏¢ Access Token');
    const meResponse = await makeRequest({
      url: `${API_BASE}/me`,
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
      },
    });

    if (meResponse.statusCode === 200) {
      printSuccess('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log(`Response: ${meResponse.body}`);
    } else {
      printError(`‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP Code: ${meResponse.statusCode})`);
      console.log(`Response: ${meResponse.body}`);
      return;
    }

    // 5. Refresh Access Token
    printStep('4. Refresh Access Token');
    const refreshData = JSON.stringify({
      refreshToken: REFRESH_TOKEN,
    });

    const refreshResponse = await makeRequest(
      {
        url: `${API_BASE}/refresh`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(refreshData),
        },
      },
      refreshData
    );

    if (refreshResponse.statusCode === 200) {
      const refreshResult = JSON.parse(refreshResponse.body);
      printSuccess('Refresh Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log(`Response: ${refreshResponse.body}`);

      // ‡πÄ‡∏Å‡πá‡∏ö tokens ‡πÉ‡∏´‡∏°‡πà
      ACCESS_TOKEN = refreshResult.data.accessToken;
      REFRESH_TOKEN = refreshResult.data.refreshToken;

      printInfo(`New Access Token: ${ACCESS_TOKEN.substring(0, 20)}...`);
      printInfo(`New Refresh Token: ${REFRESH_TOKEN.substring(0, 20)}...`);
    } else {
      printError(`Refresh Token ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP Code: ${refreshResponse.statusCode})`);
      console.log(`Response: ${refreshResponse.body}`);
      return;
    }

    // 6. Logout
    printStep('5. Logout');
    const logoutData = JSON.stringify({
      refreshToken: REFRESH_TOKEN,
    });

    const logoutResponse = await makeRequest(
      {
        url: `${API_BASE}/logout`,
        method: 'POST',
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(logoutData),
        },
      },
      logoutData
    );

    if (logoutResponse.statusCode === 200) {
      printSuccess('Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log(`Response: ${logoutResponse.body}`);
    } else {
      printError(`Logout ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP Code: ${logoutResponse.statusCode})`);
      console.log(`Response: ${logoutResponse.body}`);
      return;
    }

    // 7. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏´‡∏•‡∏±‡∏á Logout
    printStep('6. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Protected Endpoint ‡∏´‡∏•‡∏±‡∏á Logout (‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)');
    const meAfterLogoutResponse = await makeRequest({
      url: `${API_BASE}/me`,
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
      },
    });

    if (meAfterLogoutResponse.statusCode === 401) {
      printSuccess('Protected Endpoint ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á');
      console.log(`Response: ${meAfterLogoutResponse.body}`);
    } else {
      printError(
        `Protected Endpoint ‡πÑ‡∏°‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á (HTTP Code: ${meAfterLogoutResponse.statusCode})`
      );
      console.log(`Response: ${meAfterLogoutResponse.body}`);
      return;
    }

    console.log('\n========================================');
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication Flow ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    console.log('========================================');
  } catch (error) {
    printError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
testAuthFlow();
