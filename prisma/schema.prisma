generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @unique @db.VarChar(50)
  description String?
  isSystem    Boolean          @default(false) @map("is_system")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at")
  userRoles   UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  grantedAt    DateTime   @default(now()) @map("granted_at")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String                @unique @db.VarChar(255)
  passwordHash            String?               @map("password_hash") @db.VarChar(255)
  googleId                String?               @unique @map("google_id") @db.VarChar(255)
  verified                Boolean               @default(false)
  tier                    UserTier              @default(general)
  parentAgencyId          String?               @map("parent_agency_id") @db.Uuid
  parentOrganizationId    String?               @map("parent_organization_id") @db.Uuid
  inviteCode              String?               @unique @map("invite_code") @db.VarChar(12)
  invitedBy               String?               @map("invited_by") @db.Uuid
  isBlocked               Boolean               @default(false) @map("is_blocked")
  blockedReason           String?               @map("blocked_reason") @db.Text
  blockedAt               DateTime?             @map("blocked_at")
  blockedBy               String?               @map("blocked_by") @db.Uuid
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @default(now()) @updatedAt @map("updated_at")
  credits                 Int                   @default(0)
  points                  Int                   @default(0)
  creditAccount           CreditAccount?
  pointAccount            PointAccount?
  creditTransactions      CreditTransaction[]
  pointTransactions       PointTransaction[]
  dailyLoginRewards       DailyLoginReward[]
  profile                 UserProfile?
  userRoles               UserRole[]
  promoCodeUsages         PromoCodeUsage[]
  payments                Payment[]
  usageLogs               UsageLog[]
  sentTransfers           Transfer[]            @relation("TransferSender")
  receivedTransfers       Transfer[]            @relation("TransferReceiver")
  referralRewardsGiven    ReferralReward[]      @relation("ReferralRewardGiver")
  referralRewardsReceived ReferralReward[]      @relation("ReferralRewardRecipient")
  agencyReferralConfig    AgencyReferralConfig?
  blockLogs               BlockLog[]
  autoTopupLogs           AutoTopupLog[]

  // Agent Skills & RAG System Relations
  documents          Document[]
  agentUsageLogs     AgentUsageLog[]
  costEstimations    CostEstimation[]
  creditReservations CreditReservation[]
  createdSkills      AgentSkill[]        @relation("CreatedSkills")
  approvedSkills     AgentSkill[]        @relation("ApprovedSkills")
  skillReviews       SkillReview[]
  skillInstallations SkillInstallation[]

  @@index([email])
  @@index([tier])
  @@index([parentAgencyId])
  @@index([parentOrganizationId])
  @@index([inviteCode])
  @@index([invitedBy])
  @@map("users")
}

enum UserTier {
  administrator
  agency
  organization
  admin
  general
}

model UserProfile {
  userId      String   @id @map("user_id") @db.Uuid
  firstName   String?  @map("first_name") @db.VarChar(100)
  lastName    String?  @map("last_name") @db.VarChar(100)
  avatarUrl   String?  @map("avatar_url") @db.VarChar(500)
  preferences Json     @default("{}")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CreditAccount {
  userId    String   @id @map("user_id") @db.Uuid
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_accounts")
}

model CreditTransaction {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String          @map("user_id") @db.Uuid
  type         TransactionType
  amount       Int
  balanceAfter Int             @map("balance_after")
  description  String?
  metadata     Json            @default("{}")
  createdAt    DateTime        @default(now()) @map("created_at")
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model PointAccount {
  userId    String   @id @map("user_id") @db.Uuid
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_accounts")
}

model PointTransaction {
  id           String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String               @map("user_id") @db.Uuid
  type         PointTransactionType
  amount       Int
  balanceAfter Int                  @map("balance_after")
  description  String?
  metadata     Json                 @default("{}")
  createdAt    DateTime             @default(now()) @map("created_at")
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_transactions")
}

enum PointTransactionType {
  purchase
  usage
  exchange_from_credit
  auto_topup_from_credit
  daily_reward
  admin_adjustment
  refund
}

model DailyLoginReward {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  rewardDate DateTime @map("reward_date") @db.Date
  points     Int
  claimedAt  DateTime @default(now()) @map("claimed_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rewardDate])
  @@map("daily_login_rewards")
}

model ExchangeRate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  rate        Float
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("exchange_rates")
}

enum TransactionType {
  purchase
  usage
  refund
  admin_adjustment
  promo
}

model PromoCode {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String           @unique @db.VarChar(50)
  credits   Int
  isActive  Boolean          @default(true) @map("is_active")
  expiresAt DateTime?        @map("expires_at")
  maxUses   Int?             @map("max_uses")
  usedCount Int              @default(0) @map("used_count")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  usages    PromoCodeUsage[]

  @@map("promo_codes")
}

model PromoCodeUsage {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  promoCodeId String    @map("promo_code_id") @db.Uuid
  usedAt      DateTime  @default(now()) @map("used_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)

  @@unique([userId, promoCodeId])
  @@map("promo_code_usages")
}

model UserRole {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  roleId     String   @map("role_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique @db.VarChar(100)
  resource        String           @db.VarChar(50)
  action          String           @db.VarChar(50)
  description     String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Payment {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String   @map("user_id") @db.Uuid
  amount                Int
  credits               Int
  points                Int      @default(0)
  status                String
  stripeSessionId       String   @unique @map("stripe_session_id")
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  metadata              Json?
  createdAt             DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model UsageLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  service   String   @db.VarChar(50)
  model     String?  @db.VarChar(100)
  tokens    Int?
  credits   Int
  points    Int      @default(0)
  currency  String   @default("credits") @db.VarChar(20)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([service, createdAt])
  @@index([model, createdAt])
  @@map("usage_logs")
}

model PerformanceBaseline {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service       String   @db.VarChar(50)
  route         String   @db.VarChar(255)
  method        String   @db.VarChar(10)
  date          DateTime @db.Date
  p50           Float    @map("p50")
  p90           Float    @map("p90")
  p95           Float    @map("p95")
  p99           Float    @map("p99")
  avg           Float    @map("avg")
  count         Int      @map("count")
  slaTier       String   @map("sla_tier") @db.VarChar(20)
  slaThreshold  Int      @map("sla_threshold")
  slaCompliance Float    @map("sla_compliance")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([service, route, method, date], map: "service_route_method_date")
  @@index([service, date])
  @@index([slaTier, date])
  @@index([date])
  @@map("performance_baselines")
}

model Transfer {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId    String           @map("sender_id") @db.Uuid
  receiverId  String           @map("receiver_id") @db.Uuid
  type        TransferType
  currency    TransferCurrency
  amount      Int
  description String?          @db.Text
  metadata    Json             @default("{}")
  status      TransferStatus   @default(completed)
  createdAt   DateTime         @default(now()) @map("created_at")

  sender   User @relation("TransferSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("TransferReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, createdAt])
  @@index([receiverId, createdAt])
  @@map("transfers")
}

enum TransferType {
  manual
  referral_reward
  admin_adjustment
}

enum TransferCurrency {
  points
  credits
}

enum TransferStatus {
  pending
  completed
  failed
  cancelled
}

model ReferralReward {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrerId           String       @map("referrer_id") @db.Uuid
  refereeId            String       @map("referee_id") @db.Uuid
  referrerTier         UserTier     @map("referrer_tier")
  refereeTier          UserTier     @map("referee_tier")
  referrerRewardPoints Int          @map("referrer_reward_points")
  refereeRewardPoints  Int          @map("referee_reward_points")
  agencyBonusPoints    Int?         @map("agency_bonus_points")
  agencyId             String?      @map("agency_id") @db.Uuid
  status               RewardStatus @default(pending)
  processedAt          DateTime?    @map("processed_at")
  createdAt            DateTime     @default(now()) @map("created_at")

  referrer User @relation("ReferralRewardRecipient", fields: [referrerId], references: [id], onDelete: Cascade)
  referee  User @relation("ReferralRewardGiver", fields: [refereeId], references: [id], onDelete: Cascade)

  @@index([referrerId, createdAt])
  @@index([refereeId, createdAt])
  @@index([agencyId, createdAt])
  @@map("referral_rewards")
}

enum RewardStatus {
  pending
  completed
  failed
}

model AgencyReferralConfig {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agencyId                 String   @unique @map("agency_id") @db.Uuid
  organizationRewardPoints Int      @default(5000) @map("organization_reward_points")
  adminRewardPoints        Int      @default(3000) @map("admin_reward_points")
  generalRewardPoints      Int      @default(1000) @map("general_reward_points")
  isActive                 Boolean  @default(true) @map("is_active")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  agency User @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@map("agency_referral_configs")
}

model BlockLog {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  blockedBy String      @map("blocked_by") @db.Uuid
  action    BlockAction
  reason    String?     @db.Text
  metadata  Json        @default("{}")
  createdAt DateTime    @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([blockedBy, createdAt])
  @@map("block_logs")
}

enum BlockAction {
  block
  unblock
}

model AutoTopupLog {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  creditsDeducted Int      @map("credits_deducted")
  pointsAdded     Int      @map("points_added")
  triggerReason   String   @map("trigger_reason") @db.VarChar(50)
  balanceBefore   Json     @default("{}") @map("balance_before")
  balanceAfter    Json     @default("{}") @map("balance_after")
  createdAt       DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("auto_topup_logs")
}

// ==========================================
// Agent Skills & RAG System Models
// Added: 2025-10-18
// Specs: FR-RAG-001, FR-PRICING-001, FR-SKILLS-001
// ==========================================

// RAG System Models
// ------------------------------------------

model Document {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  organizationId     String?   @map("organization_id") @db.Uuid
  agencyId           String?   @map("agency_id") @db.Uuid
  agentId            String?   @map("agent_id") @db.Uuid
  title              String    @db.Text
  filename           String?   @db.VarChar(255)
  fileType           String?   @map("file_type") @db.VarChar(50)
  fileSize           Int?      @map("file_size")
  r2Bucket           String    @map("r2_bucket") @db.VarChar(100)
  r2Key              String    @map("r2_key") @db.Text
  vectorizeIndex     String    @map("vectorize_index") @db.VarChar(100)
  vectorizeNamespace String?   @map("vectorize_namespace") @db.VarChar(100)
  totalChunks        Int       @default(0) @map("total_chunks")
  accessLevel        String    @default("PRIVATE") @map("access_level") @db.VarChar(20)
  sharedWithAgentIds String[]  @map("shared_with_agent_ids")
  allowDownload      Boolean   @default(true) @map("allow_download")
  allowCopy          Boolean   @default(true) @map("allow_copy")
  status             String    @default("pending") @db.VarChar(20)
  errorMessage       String?   @map("error_message") @db.Text
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  processedAt        DateTime? @map("processed_at")

  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks DocumentChunk[]

  @@index([userId])
  @@index([organizationId])
  @@index([agencyId])
  @@index([agentId])
  @@index([accessLevel])
  @@index([status])
  @@map("documents")
}

model DocumentChunk {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId     String   @map("document_id") @db.Uuid
  chunkIndex     Int      @map("chunk_index")
  chunkText      String   @map("chunk_text") @db.Text
  chunkSize      Int?     @map("chunk_size")
  vectorId       String   @map("vector_id") @db.VarChar(255)
  embeddingModel String   @default("bge-base-en-v1.5") @map("embedding_model") @db.VarChar(50)
  pageNumber     Int?     @map("page_number")
  sectionTitle   String?  @map("section_title") @db.VarChar(255)
  createdAt      DateTime @default(now()) @map("created_at")

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@map("document_chunks")
}

model Conversation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  agentId   String?  @map("agent_id") @db.Uuid
  title     String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  messages Message[]

  @@index([userId])
  @@index([agentId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  role           String   @db.VarChar(20) // user, assistant, system
  content        String   @db.Text
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

// Pricing System Models
// ------------------------------------------

model AgentPlatform {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  displayName String   @map("display_name") @db.VarChar(100)
  provider    String   @db.VarChar(50) // openai, anthropic, google, custom
  isActive    Boolean  @default(true) @map("is_active")
  description String?  @db.Text
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  models         AgentModel[]
  skills         AgentSkill[]
  AgentUsageLog  AgentUsageLog[]
  CostEstimation CostEstimation[]

  @@map("agent_platforms")
}

model AgentModel {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platformId   String   @map("platform_id") @db.Uuid
  name         String   @db.VarChar(100)
  displayName  String   @map("display_name") @db.VarChar(150)
  modelType    String   @map("model_type") @db.VarChar(50) // llm, embedding, vision, audio
  isActive     Boolean  @default(true) @map("is_active")
  capabilities Json     @default("{}") // { "rag": true, "tools": true, "vision": true }
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  platform       AgentPlatform    @relation(fields: [platformId], references: [id], onDelete: Cascade)
  pricingRules   PricingRule[]
  usageLogs      AgentUsageLog[]
  CostEstimation CostEstimation[]

  @@unique([platformId, name])
  @@map("agent_models")
}

model PricingRule {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  modelId        String    @map("model_id") @db.Uuid
  componentType  String    @map("component_type") @db.VarChar(50)
  unitType       String    @map("unit_type") @db.VarChar(50)
  costPerUnit    Decimal   @map("cost_per_unit") @db.Decimal(12, 8)
  markupPercent  Decimal   @map("markup_percent") @db.Decimal(5, 2)
  pricePerUnit   Decimal   @map("price_per_unit") @db.Decimal(12, 8)
  creditsPerUnit Decimal   @map("credits_per_unit") @db.Decimal(12, 4)
  minUnits       Int?      @map("min_units")
  tierMultiplier Decimal   @default(1.0) @map("tier_multiplier") @db.Decimal(3, 2)
  isActive       Boolean   @default(true) @map("is_active")
  effectiveFrom  DateTime  @map("effective_from")
  effectiveTo    DateTime? @map("effective_to")
  metadata       Json      @default("{}")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  model AgentModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId, componentType, isActive])
  @@index([effectiveFrom, effectiveTo])
  @@map("pricing_rules")
}

model AgentUsageLog {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String  @map("user_id") @db.Uuid
  agentId      String? @map("agent_id") @db.Uuid
  platformId   String  @map("platform_id") @db.Uuid
  modelId      String  @map("model_id") @db.Uuid
  sessionId    String? @map("session_id") @db.Uuid
  parentCallId String? @map("parent_call_id") @db.Uuid
  callDepth    Int     @default(0) @map("call_depth")

  // Usage metrics
  inputTokens      Int? @map("input_tokens")
  outputTokens     Int? @map("output_tokens")
  totalTokens      Int? @map("total_tokens")
  ragEmbeddings    Int  @default(0) @map("rag_embeddings")
  ragSearches      Int  @default(0) @map("rag_searches")
  toolCalls        Int  @default(0) @map("tool_calls")
  nestedAgentCalls Int  @default(0) @map("nested_agent_calls")

  // Cost breakdown
  llmInputCost    Decimal @default(0) @map("llm_input_cost") @db.Decimal(12, 8)
  llmOutputCost   Decimal @default(0) @map("llm_output_cost") @db.Decimal(12, 8)
  ragCost         Decimal @default(0) @map("rag_cost") @db.Decimal(12, 8)
  toolCallCost    Decimal @default(0) @map("tool_call_cost") @db.Decimal(12, 8)
  nestedAgentCost Decimal @default(0) @map("nested_agent_cost") @db.Decimal(12, 8)
  totalCostUsd    Decimal @map("total_cost_usd") @db.Decimal(12, 8)

  // Credits/Points charged
  creditsCharged Decimal @map("credits_charged") @db.Decimal(12, 4)
  pointsCharged  Decimal @default(0) @map("points_charged") @db.Decimal(12, 4)
  currency       String  @default("credits") @db.VarChar(20)

  // Status
  status       String  @db.VarChar(20)
  errorMessage String? @map("error_message") @db.Text

  // Timestamps
  startedAt   DateTime  @map("started_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Metadata
  metadata Json @default("{}")

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform    AgentPlatform   @relation(fields: [platformId], references: [id])
  model       AgentModel      @relation(fields: [modelId], references: [id])
  parentCall  AgentUsageLog?  @relation("NestedCalls", fields: [parentCallId], references: [id])
  nestedCalls AgentUsageLog[] @relation("NestedCalls")

  @@index([userId, createdAt])
  @@index([sessionId])
  @@index([parentCallId])
  @@index([platformId, modelId, createdAt])
  @@map("agent_usage_logs")
}

model CostEstimation {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String @map("user_id") @db.Uuid
  platformId String @map("platform_id") @db.Uuid
  modelId    String @map("model_id") @db.Uuid

  // Estimated usage
  estimatedInputTokens  Int? @map("estimated_input_tokens")
  estimatedOutputTokens Int? @map("estimated_output_tokens")
  estimatedRagOps       Int  @default(0) @map("estimated_rag_ops")
  estimatedToolCalls    Int  @default(0) @map("estimated_tool_calls")

  // Estimated cost
  estimatedCostUsd Decimal @map("estimated_cost_usd") @db.Decimal(12, 8)
  estimatedCredits Decimal @map("estimated_credits") @db.Decimal(12, 4)

  // User balance check
  userBalance      Decimal @map("user_balance") @db.Decimal(12, 4)
  hasEnoughBalance Boolean @map("has_enough_balance")

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform AgentPlatform @relation(fields: [platformId], references: [id])
  model    AgentModel    @relation(fields: [modelId], references: [id])

  @@index([userId, createdAt])
  @@index([expiresAt])
  @@map("cost_estimations")
}

model CreditReservation {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  amount     Decimal   @db.Decimal(12, 4)
  sessionId  String?   @map("session_id") @db.Uuid
  status     String    @db.VarChar(20) // active, charged, refunded, expired
  chargedAt  DateTime? @map("charged_at")
  refundedAt DateTime? @map("refunded_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime  @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([expiresAt])
  @@map("credit_reservations")
}

// Marketplace Models
// ------------------------------------------

model AgentSkill {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String  @db.VarChar(100)
  slug            String  @unique @db.VarChar(120)
  description     String  @db.Text
  longDescription String? @map("long_description") @db.Text
  creatorId       String  @map("creator_id") @db.Uuid
  categoryId      String  @map("category_id") @db.Uuid
  platformId      String  @map("platform_id") @db.Uuid

  // Visibility
  visibility     String  @db.VarChar(20) // public, organization, private
  organizationId String? @map("organization_id") @db.Uuid

  // Status
  status          String    @db.VarChar(20) // draft, pending, approved, rejected, archived
  approvedBy      String?   @map("approved_by") @db.Uuid
  approvedAt      DateTime? @map("approved_at")
  rejectionReason String?   @map("rejection_reason") @db.Text

  // Metrics
  installCount  Int     @default(0) @map("install_count")
  averageRating Decimal @default(0) @map("average_rating") @db.Decimal(3, 2)
  reviewCount   Int     @default(0) @map("review_count")

  // Media
  iconUrl        String? @map("icon_url") @db.Text
  screenshotUrls Json    @default("[]") @map("screenshot_urls")

  // Metadata
  tags     String[] @db.VarChar(50)
  metadata Json     @default("{}")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  creator  User          @relation("CreatedSkills", fields: [creatorId], references: [id], onDelete: Cascade)
  category SkillCategory @relation(fields: [categoryId], references: [id])
  platform AgentPlatform @relation(fields: [platformId], references: [id])
  approver User?         @relation("ApprovedSkills", fields: [approvedBy], references: [id])

  versions      SkillVersion[]
  reviews       SkillReview[]
  installations SkillInstallation[]

  @@index([creatorId])
  @@index([categoryId])
  @@index([platformId])
  @@index([status, visibility])
  @@index([slug])
  @@map("agent_skills")
}

model SkillVersion {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skillId       String  @map("skill_id") @db.Uuid
  version       String  @db.VarChar(20) // 1.0.0
  changelog     String? @db.Text
  fileUrl       String  @map("file_url") @db.Text
  fileSize      Int     @map("file_size") // bytes
  fileHash      String  @map("file_hash") @db.VarChar(64)
  isLatest      Boolean @default(false) @map("is_latest")
  downloadCount Int     @default(0) @map("download_count")

  createdAt DateTime @default(now()) @map("created_at")

  skill         AgentSkill          @relation(fields: [skillId], references: [id], onDelete: Cascade)
  installations SkillInstallation[]

  @@unique([skillId, version])
  @@index([skillId, isLatest])
  @@map("skill_versions")
}

model SkillCategory {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique @db.VarChar(50)
  slug        String  @unique @db.VarChar(60)
  description String? @db.Text
  iconName    String? @map("icon_name") @db.VarChar(50)
  parentId    String? @map("parent_id") @db.Uuid
  sortOrder   Int     @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  parent   SkillCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children SkillCategory[] @relation("CategoryHierarchy")
  skills   AgentSkill[]

  @@map("skill_categories")
}

model SkillReview {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skillId    String  @map("skill_id") @db.Uuid
  userId     String  @map("user_id") @db.Uuid
  rating     Int     @db.SmallInt // 1-5
  title      String? @db.VarChar(100)
  comment    String? @db.Text
  isVerified Boolean @default(false) @map("is_verified") // verified purchase

  helpfulCount Int @default(0) @map("helpful_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  skill AgentSkill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([skillId, userId])
  @@index([skillId, rating])
  @@map("skill_reviews")
}

model SkillInstallation {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skillId   String @map("skill_id") @db.Uuid
  userId    String @map("user_id") @db.Uuid
  versionId String @map("version_id") @db.Uuid

  installedAt DateTime  @default(now()) @map("installed_at")
  lastUsedAt  DateTime? @map("last_used_at")
  usageCount  Int       @default(0) @map("usage_count")

  skill   AgentSkill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  version SkillVersion @relation(fields: [versionId], references: [id])

  @@unique([skillId, userId])
  @@index([userId])
  @@map("skill_installations")
}
