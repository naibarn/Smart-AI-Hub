{
  "id": "45a7b52e-1d82-43fa-9e41-3555d439af56",
  "timestamp": "2025-10-15T01:51:18.807Z",
  "specifications": [
    {
      "specification": {
        "id": "fr_1",
        "title": "FR-1: Multi-method Authentication",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-1: Multi-method Authentication\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Requirements\r\n- Google OAuth 2.0 integration\r\n- Email/password with BCRYPT (cost factor: 12)\r\n- Email verification (6-digit OTP, 15-min expiry)\r\n- Password reset with secure token\r\n- JWT token-based sessions (access: 15min, refresh: 7 days)\r\n- MFA support (TOTP) - Phase 2\r\n\r\n## Acceptance Criteria\r\n- Registration completion rate > 70%\r\n- Login success rate > 99%\r\n- Email verification within 5 minutes\r\n- Password reset flow < 3 minutes",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.710Z",
          "updatedAt": "2025-10-15T01:51:18.710Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_2",
        "title": "FR-2: Role-Based Access Control (RBAC)",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-2: Role-Based Access Control (RBAC)\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Role Hierarchy\r\n```\r\nSuper Admin > Admin > Manager > User > Guest\r\n```\r\n\r\n## Default Permissions\r\n\r\n| Role        | View Dashboard | Use AI Services | Manage Users | Adjust Credits | System Config |\r\n| ----------- | -------------- | --------------- | ------------ | -------------- | ------------- |\r\n| Super Admin | ✓              | ✓               | ✓            | ✓              | ✓             |\r\n| Admin       | ✓              | ✓               | ✓            | ✓              | -             |\r\n| Manager     | ✓              | ✓               | Team only    | Team only      | -             |\r\n| User        | ✓              | ✓               | -            | -              | -             |\r\n| Guest       | ✓              | Limited         | -            | -              | -             |",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.711Z",
          "updatedAt": "2025-10-15T01:51:18.711Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "fr_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_2 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "fr_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_2 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_3",
        "title": "FR-3: Credit Management System",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-3: Credit Management System\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Features\r\n- Real-time credit balance tracking\r\n- Transaction history (immutable ledger)\r\n- Automated low-balance alerts (< 10 credits)\r\n- Credit expiration (optional, configurable)\r\n- Refund processing (admin only)\r\n\r\n## Credit Deduction Rules\r\n\r\n```yaml\r\nGPT-4: 10 credits per 1000 tokens\r\nGPT-3.5: 1 credit per 1000 tokens\r\nClaude-3: 8 credits per 1000 tokens\r\nImage Generation: 50 credits per image\r\nVideo Generation: 200 credits per minute\r\nSora2 Video Generation: 30 credits per video",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.711Z",
          "updatedAt": "2025-10-15T01:51:18.711Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_4",
        "title": "FR-4: MCP Server Implementation",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-4: MCP Server Implementation\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Supported Providers\r\n- OpenAI (GPT-3.5, GPT-4, GPT-4-turbo)\r\n- Anthropic (Claude-3 Opus, Sonnet, Haiku)\r\n- Google (Gemini Pro) - Phase 2\r\n\r\n## Features\r\n- Unified request/response format\r\n- Automatic retry with exponential backoff (3 retries, 1s → 2s → 4s)\r\n- Request/response logging (retention: 30 days)\r\n- Streaming support for real-time responses\r\n- Context window management",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.711Z",
          "updatedAt": "2025-10-15T01:51:18.711Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_5",
        "title": "FR-5: Usage Analytics",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-5: Usage Analytics\r\n\r\n## Priority\r\nP1 (High)\r\n\r\n## Metrics\r\n- Requests per user/day/month\r\n- Token usage by model\r\n- Average response time\r\n- Error rate by provider\r\n- Cost per request\r\n\r\n## Reporting\r\n- Real-time dashboard\r\n- Daily email summary\r\n- Monthly billing report\r\n- CSV export functionality",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.711Z",
          "updatedAt": "2025-10-15T01:51:18.711Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_5 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_5 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_6",
        "title": "FR-6: API Standards",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-6: API Standards\r\n\r\n## Versioning\r\nURL-based (e.g., `/api/v1/...`)\r\n\r\n## Authentication\r\nBearer token (JWT)\r\n\r\n## Rate Limiting\r\n```\r\nGuest: 10 requests/minute\r\nUser: 60 requests/minute\r\nManager: 120 requests/minute\r\nAdmin: No limit\r\n```\r\n\r\n## Error Response Format\r\n```json\r\n{\r\n  \"error\": {\r\n    \"code\": \"INVALID_CREDENTIALS\",\r\n    \"message\": \"Email or password is incorrect\",\r\n    \"details\": {\r\n      \"field\": \"password\",\r\n      \"attempts_remaining\": 3\r\n    },\r\n    \"timestamp\": \"2025-10-03T10:30:00Z\",\r\n    \"request_id\": \"req_1234567890\"\r\n  }\r\n}\r\n```\r\n\r\n## Success Response Format\r\n```json\r\n{\r\n  \"data\": { ... },\r\n  \"meta\": {\r\n    \"timestamp\": \"2025-10-03T10:30:00Z\",\r\n    \"request_id\": \"req_1234567890\"\r\n  }\r\n}\r\n```\r\n\r\n## Pagination Standard\r\n```json\r\n{\r\n  \"data\": [...],\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"per_page\": 20,\r\n    \"total\": 100,\r\n    \"total_pages\": 5\r\n  }\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.711Z",
          "updatedAt": "2025-10-15T01:51:18.711Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_6 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_6 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_auth_05",
        "title": "FR-AUTH-05: Session-Based Authentication",
        "type": "api_spec",
        "category": "documentation",
        "content": "# FR-AUTH-05: Session-Based Authentication\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nSupport session-based authentication for third-party integrations\r\n\r\n## Requirements\r\n- Generate secure session tokens (format: VERIFIED-{random_string})\r\n- Store sessions in Redis with configurable expiration (default: 7 days)\r\n- Provide API endpoint to verify session tokens\r\n- Return user identity (ID, email, name) for valid sessions\r\n- Support session revocation\r\n- Handle session expiration gracefully\r\n\r\n## Acceptance Criteria\r\n- Session tokens are cryptographically secure\r\n- Session verification responds within 100ms\r\n- Expired sessions return 401 Unauthorized\r\n- Invalid sessions return 404 Not Found",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.721Z",
          "updatedAt": "2025-10-15T01:51:18.721Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_05 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_05 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_auth_06",
        "title": "FR-AUTH-06: OAuth with Verification Codes",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-AUTH-06: OAuth with Verification Codes\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nSupport OAuth flow with verification codes for Custom GPT integration\r\n\r\n## Requirements\r\n- Accept session parameter in OAuth initiation URL\r\n- Generate verification code on successful authentication\r\n- Display verification code on success page\r\n- Map verification code to user session\r\n- Support \"return_to\" parameter for different integration types\r\n- Maintain backward compatibility with traditional OAuth flow\r\n\r\n## Flow\r\n1. Third-party service generates unique session ID\r\n2. User is redirected to /auth/google?session={id}&return_to=chatgpt\r\n3. User authenticates with Google\r\n4. System generates verification code (VERIFIED-{random})\r\n5. Success page displays verification code with copy button\r\n6. User copies code and provides to third-party service\r\n7. Third-party service uses code as session token\r\n\r\n## Acceptance Criteria\r\n- Verification codes are unique and secure\r\n- Success page is user-friendly with Thai language\r\n- Copy button works on all major browsers\r\n- Session mapping is created correctly\r\n- Traditional OAuth flow still works",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.722Z",
          "updatedAt": "2025-10-15T01:51:18.722Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_06 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_06 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_credit_03",
        "title": "FR-CREDIT-03: User-Specific Credit Check API",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-CREDIT-03: User-Specific Credit Check API\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nProvide API for third-party services to check user credit balance\r\n\r\n## Requirements\r\n- Accept user ID via X-User-ID header\r\n- Accept service name and cost in request body\r\n- Return whether user has sufficient credits\r\n- Return current credit balance\r\n- Support different service types and costs\r\n- Respond within 200ms\r\n\r\n## API Specification\r\n```\r\nPOST /api/mcp/v1/credits/check\r\nHeaders: X-User-ID: {user_id}\r\nBody: { service: string, cost: number }\r\nResponse: { sufficient: boolean, balance: number }\r\n```\r\n\r\n## Acceptance Criteria\r\n- Accurately checks user credit balance\r\n- Returns 402 if insufficient credits\r\n- Returns 404 if user not found\r\n- Handles concurrent requests correctly",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.722Z",
          "updatedAt": "2025-10-15T01:51:18.722Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_03 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_03 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_credit_04",
        "title": "FR-CREDIT-04: User-Specific Credit Deduction API",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-CREDIT-04: User-Specific Credit Deduction API\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nProvide API for third-party services to deduct credits from user balance\r\n\r\n## Requirements\r\n- Accept user ID via X-User-ID header\r\n- Accept service name, cost, and metadata in request body\r\n- Atomically deduct credits from user balance\r\n- Create transaction record with metadata\r\n- Return new balance and transaction ID\r\n- Support rollback on failure\r\n\r\n## API Specification\r\n```\r\nPOST /api/mcp/v1/credits/deduct\r\nHeaders: X-User-ID: {user_id}\r\nBody: { service: string, cost: number, metadata: object }\r\nResponse: { status: \"ok\", new_balance: number, transaction_id: string }\r\n```\r\n\r\n## Acceptance Criteria\r\n- Deduction is atomic (no race conditions)\r\n- Transaction record is created\r\n- Returns 402 if insufficient credits\r\n- Supports concurrent deductions safely",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.722Z",
          "updatedAt": "2025-10-15T01:51:18.722Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_04 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_04 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Requirements Specification",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# Requirements Specification\r\n\r\nThis directory contains the requirements specification for the Smart AI Hub project. It includes functional requirements, non-functional requirements, and user stories that define what the system should do and how it should perform.\r\n\r\n## Contents\r\n\r\n### Functional Requirements\r\nThe functional requirements define specific behaviors and functions of the system.\r\n\r\n- [fr_1.md](functional/fr_1.md) - User Registration and Authentication\r\n- [fr_2.md](functional/fr_2.md) - User Profile Management\r\n- [fr_3.md](functional/fr_3.md) - Credit System Management\r\n- [fr_4.md](functional/fr_4.md) - API Integration\r\n- [fr_5.md](functional/fr_5.md) - Usage Tracking\r\n- [fr_6.md](functional/fr_6.md) - Admin Dashboard\r\n- [fr_7.md](functional/fr_7.md) - Notification System\r\n- [fr_auth_05.md](functional/fr_auth_05.md) - Authentication Security Requirements\r\n- [fr_auth_06.md](functional/fr_auth_06.md) - OAuth Integration\r\n- [fr_credit_03.md](functional/fr_credit_03.md) - Credit Purchase System\r\n- [fr_credit_04.md](functional/fr_credit_04.md) - Credit Usage Monitoring\r\n\r\n### Non-Functional Requirements\r\nThe non-functional requirements define system qualities and constraints.\r\n\r\n- [non_functional/](non_functional/) - Performance, Security, and Reliability Requirements\r\n\r\n### User Stories\r\nUser stories describe features from an end-user perspective.\r\n\r\n- [us_1.md](user_stories/us_1.md) - User Registration\r\n- [us_2.md](user_stories/us_2.md) - User Login\r\n- [us_3.md](user_stories/us_3.md) - Profile Management\r\n- [us_4.md](user_stories/us_4.md) - Credit Purchase\r\n- [us_5.md](user_stories/us_5.md) - Credit Usage\r\n- [us_6.md](user_stories/us_6.md) - API Integration\r\n- [us_7.md](user_stories/us_7.md) - Usage Analytics\r\n- [us_8.md](user_stories/us_8.md) - Admin Functions\r\n- [us_9.md](user_stories/us_9.md) - Notification Management\r\n- [us_10.md](user_stories/us_10.md) - Security Settings\r\n- [us_11.md](user_stories/us_11.md) - Account Management",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.722Z",
          "updatedAt": "2025-10-15T01:51:18.722Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "fr_1",
          "description": "README references fr_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_2",
          "description": "README references fr_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_3",
          "description": "README references fr_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_4",
          "description": "README references fr_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_5",
          "description": "README references fr_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_6",
          "description": "README references fr_6",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_05",
          "description": "README references fr_auth_05",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_06",
          "description": "README references fr_auth_06",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_03",
          "description": "README references fr_credit_03",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_04",
          "description": "README references fr_credit_04",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_1",
          "description": "README references fr_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_2",
          "description": "README references fr_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_3",
          "description": "README references fr_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_4",
          "description": "README references fr_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_5",
          "description": "README references fr_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_6",
          "description": "README references fr_6",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_05",
          "description": "README references fr_auth_05",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_06",
          "description": "README references fr_auth_06",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_03",
          "description": "README references fr_credit_03",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_04",
          "description": "README references fr_credit_04",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-1",
        "title": "User Registration with Email",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-1: User Registration with Email\r\n\r\n## User Story\r\nAs a new user\r\nI want to register with my email and password\r\nSo that I can access the platform\r\n\r\n## Acceptance Criteria\r\n- Email validation (RFC 5322)\r\n- Password strength: min 8 chars, 1 uppercase, 1 number\r\n- Email verification within 15 minutes\r\n- Automatic 10 free credits upon verification\r\n- Registration completion time < 2 minutes",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.723Z",
          "updatedAt": "2025-10-15T01:51:18.723Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-1 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-1 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-10",
        "title": "Session-Based Authentication for External Services",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-10: Session-Based Authentication for External Services\r\n\r\n## User Story\r\nAs a third-party AI service provider\r\nI want to integrate with Smart AI Hub authentication\r\nSo that my users can authenticate without managing separate credentials\r\n\r\n## Acceptance Criteria\r\n- Session token generation (VERIFIED-{code} format)\r\n- Session verification API endpoint\r\n- 7-day session expiration\r\n- Redis-based session storage\r\n- Session revocation capability",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.724Z",
          "updatedAt": "2025-10-15T01:51:18.724Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "US-1",
          "description": "US-10 references US-1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-10 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-10 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-11",
        "title": "Credit Management APIs for External Services",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-11: Credit Management APIs for External Services\r\n\r\n## User Story\r\nAs a third-party AI service provider\r\nI want to check and deduct user credits via API\r\nSo that I can charge for service usage through Smart AI Hub\r\n\r\n## Acceptance Criteria\r\n- Credit check API with user ID and service cost\r\n- Credit deduction API with transaction metadata\r\n- Atomic transactions to prevent race conditions\r\n- Insufficient credit handling\r\n- Transaction record creation for audit trail",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.724Z",
          "updatedAt": "2025-10-15T01:51:18.724Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "US-1",
          "description": "US-11 references US-1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-11 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-11 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-2",
        "title": "Google OAuth Registration",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-2: Google OAuth Registration\r\n\r\n## User Story\r\nAs a new user\r\nI want to register using my Google account\r\nSo that I can quickly access without creating password\r\n\r\n## Acceptance Criteria\r\n- OAuth flow completes within 30 seconds\r\n- Profile data auto-populated from Google\r\n- Automatic account creation or linking\r\n- Same free credits as email registration",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.725Z",
          "updatedAt": "2025-10-15T01:51:18.725Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-2 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-2 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-3",
        "title": "Role Assignment",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-3: Role Assignment\r\n\r\n## User Story\r\nAs an admin\r\nI want to assign roles to users\r\nSo that I can control access levels\r\n\r\n## Acceptance Criteria\r\n- Role change takes effect immediately\r\n- Audit log entry created\r\n- User notified via email\r\n- Previous permissions revoked",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.725Z",
          "updatedAt": "2025-10-15T01:51:18.725Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "User story should follow format: \"As a [user], I want to [action], so that [benefit]\"",
            "suggestion": "Consider updating content to match pattern: User story should follow format: \"As a [user], I want to [action], so that [benefit]\""
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 42.70833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 70,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 72.70833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "US-3 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-3 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "US-3 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-3 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-4",
        "title": "View Credit Balance",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-4: View Credit Balance\r\n\r\n## User Story\r\nAs a user\r\nI want to view my current credit balance\r\nSo that I can plan my usage\r\n\r\n## Acceptance Criteria\r\n- Real-time balance display\r\n- Transaction history (last 100)\r\n- Usage forecast based on past 30 days\r\n- Low balance warning when < 10 credits",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.726Z",
          "updatedAt": "2025-10-15T01:51:18.726Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-4 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-4 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-5",
        "title": "Purchase Credits",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-5: Purchase Credits\r\n\r\n## User Story\r\nAs a user\r\nI want to purchase additional credits\r\nSo that I can continue using services\r\n\r\n## Acceptance Criteria\r\n- Secure payment via Stripe\r\n- Credits added within 1 minute of payment\r\n- Email receipt sent\r\n- Transaction recorded in history",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.726Z",
          "updatedAt": "2025-10-15T01:51:18.726Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-5 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-5 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-6",
        "title": "Promotional Code Redemption",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-6: Promotional Code Redemption\r\n\r\n## User Story\r\nAs a user\r\nI want to redeem promotional codes\r\nSo that I can get bonus credits\r\n\r\n## Acceptance Criteria\r\n- Code validation (exists, not expired, not used)\r\n- One-time use per user\r\n- Credits added immediately\r\n- Success notification",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.727Z",
          "updatedAt": "2025-10-15T01:51:18.727Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-6 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-6 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-7",
        "title": "Access GPT via API",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-7: Access GPT via API\r\n\r\n## User Story\r\nAs a developer\r\nI want to call GPT models via API\r\nSo that I can integrate AI into my application\r\n\r\n## Acceptance Criteria\r\n- API key generation\r\n- Multiple models available\r\n- Response time < 2 seconds (excluding model time)\r\n- Credits auto-deducted\r\n- Usage logged",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.727Z",
          "updatedAt": "2025-10-15T01:51:18.727Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-7 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-7 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-8",
        "title": "Monitor Usage",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-8: Monitor Usage\r\n\r\n## User Story\r\nAs a user\r\nI want to see my API usage statistics\r\nSo that I can optimize costs\r\n\r\n## Acceptance Criteria\r\n- Request count by model\r\n- Token usage breakdown\r\n- Cost analysis\r\n- Exportable reports (CSV)",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.728Z",
          "updatedAt": "2025-10-15T01:51:18.728Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-8 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-8 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-9",
        "title": "Sora2 Video Generator Integration",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-9: Sora2 Video Generator Integration\r\n\r\n## User Story\r\nAs a user of Custom GPT\r\nI want to authenticate with Smart AI Hub to use Sora2 Video Generator\r\nSo that I can generate videos using my centralized credit account\r\n\r\n## Acceptance Criteria\r\n- OAuth authentication with Google account\r\n- Verification code generation for session-based access\r\n- Credit balance checking before video generation\r\n- Automatic credit deduction after video generation\r\n- Transaction logging for audit purposes",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.728Z",
          "updatedAt": "2025-10-15T01:51:18.728Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-9 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-9 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "credit_account",
        "title": "credit_account",
        "type": "data_model",
        "category": "documentation",
        "content": "model CreditAccount {\r\n  id        String   @id @default(uuid())\r\n  userId    String   @unique\r\n  balance   Int      @default(0)\r\n  createdAt DateTime @default(now())\r\n  updatedAt DateTime @updatedAt\r\n\r\n  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n  transactions CreditTransaction[]\r\n\r\n  @@index([userId])\r\n  @@map(\"credit_accounts\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.728Z",
          "updatedAt": "2025-10-15T01:51:18.728Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "credit_account references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "credit_account references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "permission",
        "title": "permission",
        "type": "data_model",
        "category": "documentation",
        "content": "model Permission {\r\n  id          String   @id @default(uuid())\r\n  name        String   @unique\r\n  resource    String   // users, credits, services\r\n  action      String   // create, read, update, delete\r\n\r\n  roles       RolePermission[]\r\n\r\n  @@unique([resource, action])\r\n  @@map(\"permissions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.729Z",
          "updatedAt": "2025-10-15T01:51:18.729Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "permission references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "permission references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "promo_code",
        "title": "promo_code",
        "type": "data_model",
        "category": "documentation",
        "content": "model PromoCode {\r\n  id          String   @id @default(uuid())\r\n  code        String   @unique\r\n  credits     Int\r\n  maxUses     Int?\r\n  usedCount   Int      @default(0)\r\n  expiresAt   DateTime?\r\n  active      Boolean  @default(true)\r\n  createdAt   DateTime @default(now())\r\n\r\n  redemptions PromoRedemption[]\r\n\r\n  @@index([code])\r\n  @@map(\"promo_codes\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.729Z",
          "updatedAt": "2025-10-15T01:51:18.729Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "promo_redemption",
        "title": "promo_redemption",
        "type": "data_model",
        "category": "documentation",
        "content": "model PromoRedemption {\r\n  id        String   @id @default(uuid())\r\n  userId    String\r\n  codeId    String\r\n  credits   Int\r\n  redeemedAt DateTime @default(now())\r\n\r\n  code PromoCode @relation(fields: [codeId], references: [id])\r\n\r\n  @@unique([userId, codeId])\r\n  @@index([userId])\r\n  @@map(\"promo_redemptions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.729Z",
          "updatedAt": "2025-10-15T01:51:18.729Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_redemption references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_redemption references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "role_permission",
        "title": "role_permission",
        "type": "data_model",
        "category": "documentation",
        "content": "model RolePermission {\r\n  roleId       String\r\n  permissionId String\r\n\r\n  role       Role @relation(fields: [roleId], references: [id], onDelete: Cascade)\r\n  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)\r\n\r\n  @@id([roleId, permissionId])\r\n  @@map(\"role_permissions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.731Z",
          "updatedAt": "2025-10-15T01:51:18.731Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "role_permission references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "role_permission references permission",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "usage_log",
        "title": "usage_log",
        "type": "data_model",
        "category": "documentation",
        "content": "model UsageLog {\r\n  id         String   @id @default(uuid())\r\n  userId     String\r\n  service    String   // openai, claude\r\n  model      String   // gpt-4, claude-3\r\n  tokens     Int\r\n  credits    Int\r\n  metadata   Json?\r\n  createdAt  DateTime @default(now())\r\n\r\n  user User @relation(fields: [userId], references: [id])\r\n\r\n  @@index([userId, createdAt])\r\n  @@index([service, createdAt])\r\n  @@map(\"usage_logs\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.731Z",
          "updatedAt": "2025-10-15T01:51:18.731Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "usage_log references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "usage_log references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "user",
        "title": "user",
        "type": "data_model",
        "category": "documentation",
        "content": "model User {\r\n  id            String   @id @default(uuid())\r\n  email         String   @unique\r\n  passwordHash  String?\r\n  verified      Boolean  @default(false)\r\n  googleId      String?  @unique\r\n  createdAt     DateTime @default(now())\r\n  updatedAt     DateTime @updatedAt\r\n\r\n  roles         UserRole[]\r\n  creditAccount CreditAccount?\r\n  usageLogs     UsageLog[]\r\n\r\n  @@index([email])\r\n  @@map(\"users\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.731Z",
          "updatedAt": "2025-10-15T01:51:18.731Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "user_role",
        "title": "user_role",
        "type": "data_model",
        "category": "documentation",
        "content": "model UserRole {\r\n  userId    String\r\n  roleId    String\r\n  assignedAt DateTime @default(now())\r\n\r\n  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n  role      Role @relation(fields: [roleId], references: [id], onDelete: Cascade)\r\n\r\n  @@id([userId, roleId])\r\n  @@map(\"user_roles\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.731Z",
          "updatedAt": "2025-10-15T01:51:18.731Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "user_role references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "user_role references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Architecture Specification",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Architecture Specification\r\n\r\nThis directory contains the architecture specification for the Smart AI Hub project. It includes data models, service definitions, API specifications, and architectural diagrams that define how the system is structured and how components interact.\r\n\r\n## Contents\r\n\r\n### Data Models\r\nThe data models define the structure and relationships of data in the system.\r\n\r\n- [user.md](data_models/user.md) - User entity model\r\n- [role.md](data_models/role.md) - Role entity model\r\n- [permission.md](data_models/permission.md) - Permission entity model\r\n- [user_role.md](data_models/user_role.md) - User-Role relationship model\r\n- [role_permission.md](data_models/role_permission.md) - Role-Permission relationship model\r\n- [credit_account.md](data_models/credit_account.md) - Credit Account entity model\r\n- [credit_transaction.md](data_models/credit_transaction.md) - Credit Transaction entity model\r\n- [promo_code.md](data_models/promo_code.md) - Promo Code entity model\r\n- [promo_redemption.md](data_models/promo_redemption.md) - Promo Redemption entity model\r\n- [usage_log.md](data_models/usage_log.md) - Usage Log entity model\r\n\r\n### Services\r\nThe services define the microservice architecture of the system.\r\n\r\n- [api_gateway.md](services/api_gateway.md) - API Gateway service specification\r\n- [auth_service.md](services/auth_service.md) - Authentication service specification\r\n- [core_service.md](services/core_service.md) - Core service specification\r\n- [mcp_server.md](services/mcp_server.md) - MCP Server service specification\r\n\r\n### API Definitions\r\nThe API definitions specify the endpoints and contracts for system APIs.\r\n\r\n- [api_definitions/](api_definitions/) - API endpoint specifications and contracts\r\n\r\n### C4 Model\r\nThe C4 model provides a visual representation of the software architecture.\r\n\r\n- [c4_model/](c4_model/) - Context, Container, Component, and Code diagrams",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.731Z",
          "updatedAt": "2025-10-15T01:51:18.731Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "README references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "README references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "README references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "README references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "README references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "README references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "README references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "README references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "README references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "README references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "README references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "README references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "README references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "README references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "README references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "README references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "README references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "README references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "README references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "README references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "README references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "README references user_role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "api_gateway",
        "title": "API Gateway Service",
        "type": "service_spec",
        "category": "documentation",
        "content": "# API Gateway Service\r\n\r\n## Overview\r\n\r\nThe API Gateway serves as the central entry point for all API requests to the Smart AI Hub platform. It handles request routing, authentication verification, rate limiting, and other cross-cutting concerns.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3000\r\n- **Language**: TypeScript 5.x\r\n\r\n## Components\r\n\r\n- **Express.js HTTP Server**: Core web server handling incoming requests\r\n- **http-proxy-middleware**: Service routing and proxying to backend services\r\n- **Rate Limiter**: Redis-backed rate limiting implementation\r\n- **JWT Validation Middleware**: Authentication token verification\r\n- **CORS Handler**: Cross-origin resource sharing management\r\n- **Request Logger**: Winston-based request/response logging\r\n- **Health Check Endpoint**: Service health monitoring\r\n\r\n## Responsibilities\r\n\r\n1. **Request Routing**: Direct incoming requests to appropriate backend services\r\n2. **Authentication Verification**: Validate JWT tokens on protected routes\r\n3. **Rate Limiting**: Enforce request rate limits based on user roles\r\n4. **CORS Handling**: Manage cross-origin requests\r\n5. **Request/Response Logging**: Log all API requests for monitoring and debugging\r\n6. **Load Balancing**: Distribute load across service instances\r\n7. **Health Checks**: Monitor service health and availability\r\n\r\n## Routing Rules\r\n\r\n```\r\n/api/auth/*     → auth-service:3001\r\n/api/users/*    → core-service:3002\r\n/api/credits/*  → core-service:3002\r\n/api/mcp/*      → mcp-server:3003\r\n/api/ws/*       → mcp-server:3003 (WebSocket upgrade)\r\n```\r\n\r\n## Rate Limiting Configuration\r\n\r\nThe API Gateway implements role-based rate limiting:\r\n\r\n```typescript\r\nconst rateLimiter = rateLimit({\r\n  store: new RedisStore({\r\n    client: redisClient,\r\n    prefix: 'rl:',\r\n  }),\r\n  windowMs: 60 * 1000, // 1 minute\r\n  max: async (req) => {\r\n    const user = req.user;\r\n    if (!user) return 10; // Guest\r\n\r\n    switch (user.role) {\r\n      case 'admin':\r\n        return Number.POSITIVE_INFINITY;\r\n      case 'manager':\r\n        return 120;\r\n      case 'user':\r\n        return 60;\r\n      default:\r\n        return 10;\r\n    }\r\n  },\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n  message: {\r\n    code: 'RATE_LIMIT_EXCEEDED',\r\n    message: 'Too many requests, please try again later',\r\n  },\r\n});\r\n```\r\n\r\n## Proxy Configuration\r\n\r\n```typescript\r\nconst proxyConfig = {\r\n  '/api/auth': {\r\n    target: 'http://auth-service:3001',\r\n    changeOrigin: true,\r\n    pathRewrite: { '^/api/auth': '' },\r\n  },\r\n  '/api/users': {\r\n    target: 'http://core-service:3002',\r\n    changeOrigin: true,\r\n  },\r\n  '/api/mcp': {\r\n    target: 'http://mcp-server:3003',\r\n    changeOrigin: true,\r\n    ws: true, // WebSocket support\r\n  },\r\n};\r\n```\r\n\r\n## Security Features\r\n\r\n- JWT token validation for all protected routes\r\n- Token blacklist checking via Redis\r\n- Request size limits\r\n- IP-based blocking for abusive clients\r\n- Security headers implementation\r\n\r\n## Monitoring\r\n\r\n- Request/response logging with unique request IDs\r\n- Performance metrics collection\r\n- Error tracking and reporting\r\n- Health check endpoints for monitoring systems",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.731Z",
          "updatedAt": "2025-10-15T01:51:18.731Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "api_gateway references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "api_gateway references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "auth_service",
        "title": "Authentication Service",
        "type": "service_spec",
        "category": "documentation",
        "content": "# Authentication Service\r\n\r\n## Overview\r\n\r\nThe Authentication Service handles all user authentication, authorization, and identity management functions for the Smart AI Hub platform. It supports traditional email/password authentication as well as OAuth integration with external providers.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3001\r\n- **Language**: TypeScript 5.x\r\n- **Authentication**: Passport.js + JWT\r\n- **Database**: PostgreSQL 15+\r\n- **Cache**: Redis 7+\r\n\r\n## Responsibilities\r\n\r\n1. **User Registration & Login**: Handle new user registration and authentication\r\n2. **JWT Token Management**: Generate and validate access and refresh tokens\r\n3. **OAuth 2.0 Integration**: Support for Google and Sora2 OAuth providers\r\n4. **Password Security**: Secure password hashing with bcrypt\r\n5. **Email Verification**: Verify user email addresses\r\n6. **Password Reset**: Secure password recovery functionality\r\n7. **Session Management**: Track and invalidate user sessions\r\n\r\n## Database Tables\r\n\r\n### Users Table\r\n```sql\r\nusers (id, email, password_hash, verified, google_id, created_at, updated_at)\r\n```\r\n\r\n### Refresh Tokens Table\r\n```sql\r\nrefresh_tokens (token, user_id, expires_at)\r\n```\r\n\r\n### Verification Tokens Table\r\n```sql\r\nverification_tokens (token, user_id, type, expires_at)\r\n```\r\n\r\n## External Dependencies\r\n\r\n- **PostgreSQL**: Store user data and authentication records\r\n- **Redis**: Token blacklist, rate limiting, and session storage\r\n- **SendGrid**: Email service for verification and password reset\r\n- **Google OAuth 2.0**: Third-party authentication provider\r\n- **Sora2 Video API**: OAuth integration for video generation services\r\n\r\n## API Endpoints\r\n\r\n```\r\nPOST /register          // User registration\r\nPOST /login             // User login\r\nPOST /logout            // User logout (blacklist token)\r\nPOST /refresh           // Refresh access token\r\nPOST /verify-email      // Email verification\r\nPOST /forgot-password   // Request password reset\r\nPOST /reset-password    // Reset password\r\nGET /me                 // Current user info\r\nGET /oauth/google       // Google OAuth initiate\r\nGET /oauth/google/callback // Google OAuth callback\r\nGET /oauth/sora2        // Sora2 OAuth initiate\r\nGET /oauth/sora2/callback // Sora2 OAuth callback\r\nPOST /oauth/session/verify // Verify session code\r\nPOST /oauth/session/confirm // Confirm session with parameters\r\n```\r\n\r\n## JWT Configuration\r\n\r\n```typescript\r\nconst jwtConfig = {\r\n  accessToken: {\r\n    secret: process.env.JWT_SECRET,\r\n    expiresIn: '15m',\r\n    algorithm: 'HS256',\r\n  },\r\n  refreshToken: {\r\n    secret: process.env.JWT_REFRESH_SECRET,\r\n    expiresIn: '7d',\r\n    algorithm: 'HS256',\r\n  },\r\n};\r\n\r\n// Token Payload Structure\r\ninterface JWTPayload {\r\n  sub: string; // User ID\r\n  email: string;\r\n  role: string;\r\n  iat: number; // Issued at\r\n  exp: number; // Expiration\r\n  jti: string; // JWT ID (for revocation)\r\n}\r\n```\r\n\r\n## Password Policy\r\n\r\n- Minimum 8 characters\r\n- At least 1 uppercase letter\r\n- At least 1 number\r\n- At least 1 special character\r\n- Bcrypt cost factor: 12\r\n\r\n## OAuth Integration\r\n\r\n### Google OAuth Flow\r\n1. User initiates OAuth via `/oauth/google`\r\n2. Redirect to Google's authorization page\r\n3. Google redirects to callback with authorization code\r\n4. Exchange code for access token and user profile\r\n5. Create or update user account\r\n6. Generate JWT tokens for the user\r\n\r\n### Sora2 OAuth Flow\r\n1. User initiates OAuth via `/oauth/sora2`\r\n2. Create session with verification code\r\n3. Send verification code via email\r\n4. User verifies code via `/oauth/session/verify`\r\n5. Complete OAuth flow with `/oauth/session/confirm`\r\n6. Generate JWT tokens for the user\r\n\r\n## Security Features\r\n\r\n- Password hashing with bcrypt (cost factor: 12)\r\n- JWT token blacklisting for logout\r\n- Rate limiting on authentication endpoints\r\n- Email verification for new accounts\r\n- Secure password reset with time-limited tokens\r\n- CSRF protection\r\n- Session management with Redis\r\n\r\n## Token Management\r\n\r\n- Access tokens: 15-minute expiration\r\n- Refresh tokens: 7-day expiration\r\n- Token blacklist for revoked tokens\r\n- Automatic token refresh mechanism\r\n- Secure token storage recommendations\r\n\r\n## Email Services\r\n\r\n- Welcome emails for new registrations\r\n- Email verification notifications\r\n- Password reset emails\r\n- OAuth verification codes\r\n- Security alerts for suspicious activities",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.732Z",
          "updatedAt": "2025-10-15T01:51:18.732Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "auth_service references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "auth_service references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "core_service",
        "title": "Core Service",
        "type": "service_spec",
        "category": "documentation",
        "content": "# Core Service\r\n\r\n## Overview\r\n\r\nThe Core Service handles the primary business logic of the Smart AI Hub platform, including user management, role-based access control, credit accounting, and usage analytics. It serves as the central hub for managing platform resources and user interactions.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3002\r\n- **Language**: TypeScript 5.x\r\n- **Database**: PostgreSQL 15+ with Prisma ORM\r\n- **Cache**: Redis 7+\r\n\r\n## Responsibilities\r\n\r\n1. **User Management**: CRUD operations for user accounts\r\n2. **Role & Permission Management**: RBAC implementation\r\n3. **Credit Account Management**: Track and manage user credits\r\n4. **Transaction Processing**: Handle credit transactions\r\n5. **Usage Analytics**: Track and analyze service usage\r\n6. **Promotional Code System**: Manage promo codes and redemptions\r\n7. **Sora2 Video Generator Integration**: Session-based authentication for video generation\r\n\r\n## Database Tables\r\n\r\n### Roles and Permissions\r\n```sql\r\nroles, permissions, user_roles, role_permissions\r\n```\r\n\r\n### Credit Management\r\n```sql\r\ncredit_accounts, credit_transactions\r\n```\r\n\r\n### Promotional System\r\n```sql\r\npromo_codes, promo_redemptions\r\n```\r\n\r\n### Usage Tracking\r\n```sql\r\nusage_logs\r\n```\r\n\r\n## Business Logic\r\n\r\n### Credit Deduction with Atomic Transactions\r\nThe service ensures atomic credit deduction operations:\r\n\r\n```typescript\r\nasync function deductCredits(\r\n  userId: string,\r\n  amount: number,\r\n  reason: string,\r\n  metadata?: any\r\n): Promise<void> {\r\n  await prisma.$transaction(async (tx) => {\r\n    // 1. Lock the credit account\r\n    const account = await tx.creditAccount.findUnique({\r\n      where: { userId },\r\n      select: { id: true, balance: true },\r\n    });\r\n\r\n    if (!account) {\r\n      throw new AppError('ACCOUNT_NOT_FOUND', 'Credit account not found');\r\n    }\r\n\r\n    if (account.balance < amount) {\r\n      throw new AppError('INSUFFICIENT_CREDITS', 'Not enough credits');\r\n    }\r\n\r\n    // 2. Update balance\r\n    await tx.creditAccount.update({\r\n      where: { id: account.id },\r\n      data: { balance: { decrement: amount } },\r\n    });\r\n\r\n    // 3. Create transaction record\r\n    await tx.creditTransaction.create({\r\n      data: {\r\n        accountId: account.id,\r\n        amount: -amount,\r\n        type: 'debit',\r\n        reason,\r\n        metadata,\r\n      },\r\n    });\r\n  });\r\n}\r\n```\r\n\r\n### Usage Calculation & Billing\r\n- Track token usage for each LLM provider\r\n- Calculate credit costs based on usage\r\n- Generate billing reports\r\n- Handle usage limits and quotas\r\n\r\n### Role Hierarchy Enforcement\r\n- Implement role-based access control\r\n- Enforce role hierarchy (admin > manager > user > guest)\r\n- Cache permissions for performance\r\n- Support dynamic permission assignments\r\n\r\n## Credit Management APIs\r\n\r\n### Check Credit Balance\r\n```\r\nGET /api/credits/balance\r\nResponse: {\r\n  \"userId\": \"uuid\",\r\n  \"balance\": 1000,\r\n  \"currency\": \"credits\",\r\n  \"lastUpdated\": \"2025-01-01T00:00:00Z\"\r\n}\r\n```\r\n\r\n### Deduct Credits for Video Generation\r\n```\r\nPOST /api/credits/deduct\r\nRequest: {\r\n  \"userId\": \"uuid\",\r\n  \"amount\": 100,\r\n  \"reason\": \"sora2_video_generation\",\r\n  \"metadata\": {\r\n    \"videoId\": \"uuid\",\r\n    \"duration\": 30,\r\n    \"resolution\": \"1080p\"\r\n  }\r\n}\r\nResponse: {\r\n  \"success\": true,\r\n  \"newBalance\": 900,\r\n  \"transactionId\": \"uuid\"\r\n}\r\n```\r\n\r\n### Get Credit Transaction History\r\n```\r\nGET /api/credits/transactions?userId=uuid&limit=10&offset=0\r\nResponse: {\r\n  \"transactions\": [\r\n    {\r\n      \"id\": \"uuid\",\r\n      \"amount\": -100,\r\n      \"type\": \"debit\",\r\n      \"reason\": \"sora2_video_generation\",\r\n      \"createdAt\": \"2025-01-01T00:00:00Z\",\r\n      \"metadata\": {\r\n        \"videoId\": \"uuid\",\r\n        \"duration\": 30\r\n      }\r\n    }\r\n  ],\r\n  \"total\": 25,\r\n  \"hasMore\": true\r\n}\r\n```\r\n\r\n## Database Schema (Key Models)\r\n\r\n### User Model\r\n```typescript\r\nmodel User {\r\n  id            String   @id @default(uuid())\r\n  email         String   @unique\r\n  passwordHash  String?\r\n  verified      Boolean  @default(false)\r\n  googleId      String?  @unique\r\n  createdAt     DateTime @default(now())\r\n  updatedAt     DateTime @updatedAt\r\n\r\n  roles         UserRole[]\r\n  creditAccount CreditAccount?\r\n  usageLogs     UsageLog[]\r\n\r\n  @@index([email])\r\n  @@map(\"users\")\r\n}\r\n```\r\n\r\n### Credit Account Model\r\n```typescript\r\nmodel CreditAccount {\r\n  id        String   @id @default(uuid())\r\n  userId    String   @unique\r\n  balance   Int      @default(0)\r\n  createdAt DateTime @default(now())\r\n  updatedAt DateTime @updatedAt\r\n\r\n  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n  transactions CreditTransaction[]\r\n\r\n  @@index([userId])\r\n  @@map(\"credit_accounts\")\r\n}\r\n```\r\n\r\n### Credit Transaction Model\r\n```typescript\r\nmodel CreditTransaction {\r\n  id          String   @id @default(uuid())\r\n  accountId   String\r\n  amount      Int\r\n  type        String   // debit, credit\r\n  reason      String   // purchase, usage, refund, promo\r\n  metadata    Json?\r\n  createdAt   DateTime @default(now())\r\n\r\n  account CreditAccount @relation(fields: [accountId], references: [id])\r\n\r\n  @@index([accountId, createdAt])\r\n  @@map(\"credit_transactions\")\r\n}\r\n```\r\n\r\n## Security Features\r\n\r\n- RBAC middleware for endpoint protection\r\n- Audit logging for all data changes\r\n- Input validation and sanitization\r\n- SQL injection prevention via Prisma ORM\r\n- Rate limiting on sensitive operations\r\n\r\n## Performance Optimizations\r\n\r\n- Database connection pooling\r\n- Redis caching for frequently accessed data\r\n- Database query optimization\r\n- Pagination for large result sets\r\n- Background job processing for heavy operations\r\n\r\n## Integration Points\r\n\r\n- **Authentication Service**: User verification and role lookup\r\n- **MCP Server**: Credit deduction for usage\r\n- **Payment System**: Credit purchases and refunds\r\n- **Notification Service**: Low balance alerts\r\n- **Analytics Service**: Usage metrics and reporting",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.732Z",
          "updatedAt": "2025-10-15T01:51:18.732Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "core_service references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "core_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "core_service references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "core_service references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "core_service references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "core_service references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "core_service references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "core_service references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "core_service references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "core_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "core_service references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "core_service references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "core_service references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "core_service references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "core_service references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "core_service references user_role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "mcp_server",
        "title": "MCP Server",
        "type": "service_spec",
        "category": "documentation",
        "content": "# MCP Server\r\n\r\n## Overview\r\n\r\nThe MCP (Model Context Protocol) Server handles integration with various LLM providers, manages real-time communication via WebSockets, and tracks usage for billing purposes. It serves as the bridge between the Smart AI Hub platform and external AI services.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3003\r\n- **Language**: TypeScript 5.x\r\n- **WebSocket**: ws library\r\n- **Queue**: BullMQ for request management\r\n- **Circuit Breaker**: opossum for fault tolerance\r\n\r\n## Responsibilities\r\n\r\n1. **LLM Provider Integration**: Connect with OpenAI, Claude, and other providers\r\n2. **WebSocket Real-time Communication**: Handle streaming responses\r\n3. **Request/Response Transformation**: Convert between platform and provider formats\r\n4. **Token Usage Tracking**: Monitor and log usage for billing\r\n5. **Provider Fallback Logic**: Switch providers when one fails\r\n6. **Sora2 Video Generator API Integration**: Handle video generation requests\r\n7. **Custom GPT Integration**: Enhanced video generation workflows\r\n\r\n## Components\r\n\r\n- **WebSocket Server**: Real-time bidirectional communication\r\n- **OpenAI Client Wrapper**: OpenAI API integration\r\n- **Anthropic Client Wrapper**: Claude API integration\r\n- **Request Queue**: BullMQ for managing request processing\r\n- **Circuit Breaker**: Fault tolerance for provider failures\r\n\r\n## Workflow\r\n\r\n1. Validate JWT & check credits\r\n2. Route to appropriate LLM provider\r\n3. Transform request to provider format\r\n4. Send request with retry logic\r\n5. Stream response via WebSocket\r\n6. Log usage & deduct credits\r\n\r\n## WebSocket Protocol\r\n\r\n### Client → Server\r\n```typescript\r\ninterface MCPRequest {\r\n  id: string;\r\n  type: 'completion' | 'chat' | 'embedding';\r\n  provider: 'openai' | 'claude' | 'auto';\r\n  model: string;\r\n  messages?: Message[];\r\n  prompt?: string;\r\n  stream: boolean;\r\n  maxTokens?: number;\r\n}\r\n```\r\n\r\n### Server → Client (Streaming)\r\n```typescript\r\ninterface MCPStreamChunk {\r\n  id: string;\r\n  type: 'chunk' | 'done' | 'error';\r\n  data?: string;\r\n  usage?: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  };\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n  };\r\n}\r\n```\r\n\r\n### Server → Client (Non-streaming)\r\n```typescript\r\ninterface MCPResponse {\r\n  id: string;\r\n  type: 'completion';\r\n  data: string;\r\n  usage: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n    credits: number;\r\n  };\r\n  metadata: {\r\n    model: string;\r\n    provider: string;\r\n    latency: number;\r\n  };\r\n}\r\n```\r\n\r\n## Provider Fallback Logic\r\n\r\n```typescript\r\nconst providerPriority = ['openai', 'claude'];\r\n\r\nasync function executeWithFallback(request: MCPRequest): Promise<MCPResponse> {\r\n  let lastError: Error;\r\n\r\n  for (const provider of providerPriority) {\r\n    try {\r\n      const result = await providers[provider].execute(request);\r\n      return result;\r\n    } catch (error) {\r\n      lastError = error;\r\n      logger.warn(`Provider ${provider} failed, trying next`, { error });\r\n\r\n      // If rate limited, add delay\r\n      if (error.code === 'RATE_LIMIT_EXCEEDED') {\r\n        await sleep(5000);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new AppError('ALL_PROVIDERS_FAILED', 'All LLM providers failed', { lastError });\r\n}\r\n```\r\n\r\n## Sora2 Video Generator Integration\r\n\r\n### Video Request Structure\r\n```typescript\r\ninterface Sora2VideoRequest {\r\n  prompt: string;\r\n  duration: number; // seconds\r\n  resolution: '720p' | '1080p' | '4K';\r\n  style?: string;\r\n  aspectRatio?: string;\r\n  userId: string;\r\n  sessionId: string;\r\n}\r\n```\r\n\r\n### Video Response Structure\r\n```typescript\r\ninterface Sora2VideoResponse {\r\n  videoId: string;\r\n  status: 'processing' | 'completed' | 'failed';\r\n  url?: string;\r\n  thumbnailUrl?: string;\r\n  duration: number;\r\n  creditsUsed: number;\r\n  createdAt: string;\r\n  completedAt?: string;\r\n}\r\n```\r\n\r\n### Sora2 API Endpoints\r\n\r\n#### Generate Video\r\n```\r\nPOST /api/mcp/sora2/generate\r\nRequest: {\r\n  prompt: string,\r\n  duration: number,\r\n  resolution: string,\r\n  style?: string,\r\n  aspectRatio?: string\r\n}\r\nResponse: {\r\n  videoId: string,\r\n  status: 'processing',\r\n  creditsUsed: number,\r\n  estimatedTime: number\r\n}\r\n```\r\n\r\n#### Check Video Status\r\n```\r\nGET /api/mcp/sora2/status/:videoId\r\nResponse: {\r\n  videoId: string,\r\n  status: 'processing' | 'completed' | 'failed',\r\n  url?: string,\r\n  thumbnailUrl?: string,\r\n  progress: number,\r\n  createdAt: string\r\n}\r\n```\r\n\r\n## Custom GPT Integration for Video Workflows\r\n\r\n### Video Workflow Request\r\n```typescript\r\ninterface VideoWorkflowRequest {\r\n  workflow: 'text-to-video' | 'image-to-video' | 'video-enhancement';\r\n  input: {\r\n    text?: string;\r\n    imageUrl?: string;\r\n    videoUrl?: string;\r\n  };\r\n  parameters: {\r\n    style?: string;\r\n    duration?: number;\r\n    resolution?: string;\r\n    enhancementType?: string;\r\n  };\r\n  sessionId: string;\r\n}\r\n```\r\n\r\n### GPT-Assisted Video Generation\r\n```typescript\r\napp.post('/api/mcp/gpt/video-workflow', authenticate, async (req, res) => {\r\n  const { workflow, input, parameters, sessionId } = req.body;\r\n  \r\n  // Step 1: Use Custom GPT to analyze and enhance the request\r\n  const enhancedPrompt = await gptService.enhanceVideoPrompt({\r\n    originalPrompt: input.text,\r\n    workflow,\r\n    parameters,\r\n    sessionId\r\n  });\r\n  \r\n  // Step 2: Generate video with Sora2 using enhanced prompt\r\n  const videoRequest = await sora2Service.createVideoRequest({\r\n    prompt: enhancedPrompt,\r\n    duration: parameters.duration || 30,\r\n    resolution: parameters.resolution || '1080p',\r\n    style: parameters.style,\r\n    userId: req.user.id,\r\n    sessionId\r\n  });\r\n  \r\n  res.json({\r\n    workflowId: generateId(),\r\n    videoId: videoRequest.id,\r\n    enhancedPrompt,\r\n    status: 'processing'\r\n  });\r\n});\r\n```\r\n\r\n## Circuit Breaker Pattern\r\n\r\n```typescript\r\nimport CircuitBreaker from 'opossum';\r\n\r\nconst options = {\r\n  timeout: 30000, // 30 seconds\r\n  errorThresholdPercentage: 50,\r\n  resetTimeout: 30000, // Try again after 30s\r\n};\r\n\r\nconst breaker = new CircuitBreaker(callOpenAI, options);\r\n\r\nbreaker.on('open', () => {\r\n  logger.error('Circuit breaker opened for OpenAI');\r\n  // Switch to Claude\r\n});\r\n\r\nbreaker.on('halfOpen', () => {\r\n  logger.info('Circuit breaker half-open, testing OpenAI');\r\n});\r\n```\r\n\r\n## Security Features\r\n\r\n- JWT authentication for all requests\r\n- Credit balance verification before processing\r\n- Request size limits\r\n- Input validation and sanitization\r\n- WebSocket connection rate limiting\r\n- Usage tracking and audit logging\r\n\r\n## Performance Optimizations\r\n\r\n- Request queuing with BullMQ\r\n- Connection pooling for LLM providers\r\n- Response streaming for large outputs\r\n- Provider response caching where appropriate\r\n- Automatic retry with exponential backoff\r\n\r\n## Monitoring\r\n\r\n- Request/response logging\r\n- Provider performance metrics\r\n- Error rate tracking\r\n- Usage analytics\r\n- Circuit breaker state monitoring",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.732Z",
          "updatedAt": "2025-10-15T01:51:18.732Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "mcp_server references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "mcp_server references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_1",
        "title": "Epic 1: Project Setup & Infrastructure (Sprint 1)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 1: Project Setup & Infrastructure (Sprint 1)\r\n\r\n## E1.1: Development Environment Setup\r\n\r\n**Story Points**: 8\r\n**Priority**: P0 (Critical)\r\n**Status**: In Progress\r\n**Dependencies**: None\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Ubuntu VPS server setup and configuration ✅ DONE\r\n- [x] Docker and Docker Compose installation ✅ DONE\r\n- [x] Nginx reverse proxy configuration ✅ DONE\r\n- [ ] SSL certificate setup (Let's Encrypt) with auto-renewal\r\n- [ ] Basic monitoring setup (PM2 with cluster mode)\r\n- [ ] Server security hardening (firewall, fail2ban, SSH keys only)\r\n\r\n**Technical Details**:\r\n\r\n```bash\r\n# SSL Certificate Setup\r\nsudo apt install certbot python3-certbot-nginx\r\nsudo certbot --nginx -d api.smartaihub.com -d www.smartaihub.com\r\nsudo certbot renew --dry-run  # Test auto-renewal\r\n\r\n# PM2 Setup\r\nnpm install -g pm2\r\npm2 startup systemd\r\npm2 save\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Configure UFW firewall (allow 22, 80, 443)\r\n- [ ] Setup fail2ban for SSH protection\r\n- [ ] Install and configure PM2 with ecosystem.config.js\r\n- [ ] Setup automated SSL renewal cron job\r\n- [ ] Create deployment user with limited permissions\r\n- [ ] Configure log rotation\r\n- [ ] Setup automated backups\r\n\r\n**Technical Debt**: Manual SSL setup initially, automate in Sprint 2\r\n\r\n---\r\n\r\n## E1.2: Database Setup\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-02\r\n- **links_to_architecture**:\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/user_role.md`, `../../02_architecture/data_models/role_permission.md`, `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/promo_code.md`, `../../02_architecture/data_models/promo_redemption.md`, `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] PostgreSQL database installation and configuration ✅\r\n- [x] Redis cache server setup ✅\r\n- [x] Database schema initialization ✅\r\n- [x] Database migration system setup ✅\r\n- [x] Connection pooling configuration ✅\r\n\r\n**Completion Notes**:\r\n\r\n- PostgreSQL 15 configured with optimized settings\r\n- Redis 7 configured for caching and sessions\r\n- Prisma migrations working correctly\r\n- All tables created and indexed\r\n- Connection pool: max 100, min 10 connections\r\n\r\n**Lessons Learned**:\r\n\r\n- Schema alignment between Prisma and migrations requires careful review\r\n- Initial credit balance (1 credit) working as expected\r\n\r\n---\r\n\r\n## E1.3: Project Structure Creation\r\n\r\n**Story Points**: 3\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-02\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Monorepo structure with microservices ✅\r\n- [x] TypeScript configuration for all services ✅\r\n- [x] Docker containers for each service ✅\r\n- [x] Environment configuration management ✅\r\n- [ ] Code quality tools setup (ESLint, Prettier)\r\n\r\n**Remaining Tasks**:\r\n\r\n- [ ] Setup ESLint with shared config\r\n- [ ] Setup Prettier with pre-commit hooks\r\n- [ ] Configure Husky for git hooks\r\n- [ ] Add commitlint for conventional commits\r\n\r\n**Technical Debt**: Code quality tools postponed to Sprint 2\r\n\r\n---\r\n\r\n## NEW: E1.4: CI/CD Pipeline Setup\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E1.3\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] GitHub Actions workflow for automated testing\r\n- [ ] Automated linting and type checking\r\n- [ ] Docker image building and pushing\r\n- [ ] Automated deployment to staging\r\n- [ ] Build status badges in README\r\n\r\n**Pipeline Stages**:\r\n\r\n```yaml\r\n1. Lint & Type Check\r\n2. Unit Tests (with coverage report)\r\n3. Integration Tests\r\n4. Build Docker Images\r\n5. Push to Registry\r\n6. Deploy to Staging (on main branch)\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Create .github/workflows/ci.yml\r\n- [ ] Setup Docker Hub or GitHub Container Registry\r\n- [ ] Configure secrets in GitHub\r\n- [ ] Setup staging environment\r\n- [ ] Add deployment scripts\r\n\r\n---\r\n\r\n## NEW: E1.5: Logging Infrastructure\r\n\r\n**Story Points**: 3\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E1.3\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Winston logger configured in all services\r\n- [ ] Structured JSON logging format\r\n- [ ] Log levels properly configured (dev: debug, prod: info)\r\n- [ ] Request ID correlation across services\r\n- [ ] Error stack traces captured\r\n- [ ] Sensitive data masking in logs\r\n\r\n**Implementation**:\r\n\r\n```typescript\r\n// Shared logger configuration\r\nimport winston from 'winston';\r\n\r\nconst logger = winston.createLogger({\r\n  level: process.env.LOG_LEVEL || 'info',\r\n  format: winston.format.combine(\r\n    winston.format.timestamp(),\r\n    winston.format.errors({ stack: true }),\r\n    winston.format.json()\r\n  ),\r\n  defaultMeta: {\r\n    service: process.env.SERVICE_NAME,\r\n  },\r\n});",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.732Z",
          "updatedAt": "2025-10-15T01:51:18.732Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_1 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_1 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "epic_1 references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "epic_1 references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "epic_1 references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_1 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_1 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "epic_1 references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_1 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_1 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_1 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_1 references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_1 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_1 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_1 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_1 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_1 references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_1 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "epic_1 references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "epic_1 references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "epic_1 references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_1 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_1 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "epic_1 references user_role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_2",
        "title": "Epic 2: Authentication System (Sprint 1-2)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 2: Authentication System (Sprint 1-2)\r\n\r\n## E2.1: Basic Authentication API\r\n\r\n**Story Points**: 8\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E1.2 (completed), E1.3 (completed)\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] User registration with email/password ✅ DONE\r\n- [x] User login with JWT token generation ✅ DONE\r\n- [x] Password hashing with bcrypt (cost: 12) ✅ DONE\r\n- [ ] Email verification system (6-digit OTP)\r\n- [ ] Password reset functionality\r\n- [x] JWT token validation middleware ✅ DONE\r\n- [x] Refresh token mechanism ✅ DONE\r\n- [x] Token blacklist (logout functionality) ✅ DONE\r\n\r\n**Completion Notes**:\r\n\r\n- Login endpoint fully implemented with credential validation\r\n- JWT middleware created for protected routes with blacklist checking\r\n- Refresh token mechanism with rotation implemented\r\n- Token blacklist functionality working for logout\r\n- Failed login attempt logging implemented\r\n- Comprehensive test coverage for login and refresh flows\r\n\r\n**Tests Completed**:\r\n\r\n- [x] Login success/failure scenarios\r\n- [x] JWT generation and validation\r\n- [x] Refresh token rotation\r\n- [x] Token blacklist functionality\r\n- [x] Validation error handling\r\n\r\n**Detailed Tasks**:\r\n\r\n**Day 1: Login Implementation**\r\n\r\n```typescript\r\n// POST /login endpoint\r\n- [ ] Validate email and password format\r\n- [ ] Query user from database\r\n- [ ] Verify password with bcrypt.compare\r\n- [ ] Generate access token (15min expiry)\r\n- [ ] Generate refresh token (7 days expiry)\r\n- [ ] Store refresh token in Redis\r\n- [ ] Track failed login attempts (max 5 per 15min)\r\n- [ ] Create audit log entry\r\n- [ ] Return tokens in response\r\n```\r\n\r\n**Day 2: JWT Middleware & Email Verification**\r\n\r\n```typescript\r\n// JWT Middleware\r\n- [ ] Extract token from Authorization header\r\n- [ ] Validate token signature\r\n- [ ] Check token expiration\r\n- [ ] Verify token not in blacklist (Redis)\r\n- [ ] Attach user to request object\r\n- [ ] Handle token errors gracefully\r\n\r\n// Email Verification\r\n- [ ] Generate 6-digit OTP\r\n- [ ] Store OTP in Redis (15min TTL)\r\n- [ ] Send verification email via SendGrid\r\n- [ ] Create /verify-email endpoint\r\n- [ ] Mark user as verified in database\r\n- [ ] Rate limit verification attempts\r\n```\r\n\r\n**Day 3-4: Password Reset & Refresh Token**\r\n\r\n```typescript\r\n// Password Reset\r\n- [ ] POST /forgot-password - Generate reset token\r\n- [ ] Send reset email with link\r\n- [ ] Store token in Redis (1 hour TTL)\r\n- [ ] POST /reset-password - Validate token\r\n- [ ] Update password hash\r\n- [ ] Invalidate all user sessions\r\n\r\n// Refresh Token\r\n- [ ] POST /refresh endpoint\r\n- [ ] Validate refresh token\r\n- [ ] Generate new access token\r\n- [ ] Rotate refresh token (optional)\r\n```\r\n\r\n**Unit Tests Required**:\r\n\r\n- [ ] Registration validation tests\r\n- [ ] Login success/failure scenarios\r\n- [ ] JWT generation and validation\r\n- [ ] Password hashing verification\r\n- [ ] Token expiration handling\r\n- [ ] Blacklist functionality\r\n\r\n**Integration Tests Required**:\r\n\r\n- [ ] Full registration flow\r\n- [ ] Login → Protected route → Logout\r\n- [ ] Email verification flow\r\n- [ ] Password reset flow\r\n\r\n**Blockers**:\r\n\r\n- Need SendGrid API key for email verification\r\n- Need to decide on OTP vs magic link for verification\r\n\r\n**Technical Debt**:\r\n\r\n- TODO: Implement rate limiting per IP/user\r\n- TODO: Add account lockout after failed attempts\r\n- TODO: Implement 2FA (Phase 2)\r\n\r\n---\r\n\r\n## E2.4: Email Verification System\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1 (completed)\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] 6-digit OTP generation ✅\r\n- [x] OTP email delivery via SendGrid ✅\r\n- [x] OTP verification endpoint ✅\r\n- [x] OTP expiry (15 minutes) ✅\r\n- [x] Rate limiting for verification attempts ✅\r\n- [x] Account status update after verification ✅\r\n- [x] Resend OTP functionality ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Email verification system fully implemented with 6-digit OTP\r\n- SendGrid integration configured and working\r\n- OTP verification endpoint with proper validation\r\n- Rate limiting implemented (max 5 attempts per 15 minutes)\r\n- Account status updates working correctly\r\n- Resend OTP functionality implemented\r\n- Comprehensive test coverage for verification flow\r\n\r\n**Implementation Details**:\r\n\r\n```typescript\r\n// OTP Generation\r\n- Generate cryptographically secure 6-digit code\r\n- Store in Redis with 15-minute TTL\r\n- Include user ID and timestamp in Redis key\r\n\r\n// Email Template\r\n- Professional HTML email template\r\n- Clear instructions for users\r\n- Company branding\r\n- Expiration time notice\r\n\r\n// Verification Endpoint\r\nPOST /api/auth/verify-email\r\n{\r\n  \"email\": \"user@example.com\",\r\n  \"otp\": \"123456\"\r\n}\r\n\r\n// Resend Endpoint\r\nPOST /api/auth/resend-verification\r\n{\r\n  \"email\": \"user@example.com\"\r\n}\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Configure SendGrid API integration\r\n- [ ] Create OTP generation utility\r\n- [ ] Design email template\r\n- [ ] Implement verification endpoint\r\n- [ ] Add rate limiting (max 5 attempts per 15 min)\r\n- [ ] Create resend OTP endpoint\r\n- [ ] Add verification status to user model\r\n- [ ] Update registration flow to require verification\r\n\r\n**Security Measures**:\r\n\r\n- [ ] Constant-time OTP comparison\r\n- [ ] Secure OTP generation using crypto.randomBytes()\r\n- [ ] Rate limiting per IP and email\r\n- [ ] OTP attempt logging\r\n- [ ] Automatic cleanup of expired OTPs\r\n\r\n**Tests Required**:\r\n\r\n- [ ] OTP generation and storage\r\n- [ ] Email sending functionality\r\n- [ ] Successful verification flow\r\n- [ ] Expired OTP handling\r\n- [ ] Invalid OTP attempts\r\n- [ ] Rate limiting enforcement\r\n- [ ] Resend OTP functionality\r\n\r\n---\r\n\r\n## E2.5: Password Reset Flow\r\n\r\n**Story Points**: 3\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.4 (Email Verification)\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Password reset request endpoint ✅\r\n- [x] Secure reset token generation ✅\r\n- [x] Reset email delivery ✅\r\n- [x] Password reset confirmation endpoint ✅\r\n- [x] Token expiry (1 hour) ✅\r\n- [x] Session invalidation after reset ✅\r\n- [x] Password strength validation ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Password reset flow fully implemented\r\n- Secure reset token generation with crypto\r\n- Reset email delivery working with SendGrid\r\n- Password reset confirmation endpoint implemented\r\n- Token expiry set to 1 hour\r\n- All user sessions invalidated after password reset\r\n- Password strength validation implemented\r\n- Comprehensive test coverage for password reset flow\r\n\r\n**Implementation Details**:\r\n\r\n```typescript\r\n// Reset Request\r\nPOST /api/auth/forgot-password\r\n{\r\n  \"email\": \"user@example.com\"\r\n}\r\n\r\n// Reset Confirmation\r\nPOST /api/auth/reset-password\r\n{\r\n  \"token\": \"secure-reset-token\",\r\n  \"newPassword\": \"newStrongPassword123!\"\r\n}\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Create secure reset token generator\r\n- [ ] Store reset tokens in Redis with 1-hour TTL\r\n- [ ] Design password reset email template\r\n- [ ] Implement forgot-password endpoint\r\n- [ ] Implement reset-password endpoint\r\n- [ ] Invalidate all user sessions after reset\r\n- [ ] Add password strength validation\r\n- [ ] Log password reset events\r\n\r\n**Security Measures**:\r\n\r\n- [ ] Cryptographically secure reset tokens\r\n- [ ] Single-use tokens (deleted after use)\r\n- [ ] Rate limiting for reset requests\r\n- [ ] Verify token existence before allowing reset\r\n- [ ] Audit trail for password changes\r\n\r\n**Tests Required**:\r\n\r\n- [ ] Reset request flow\r\n- [ ] Token validation\r\n- [ ] Password update success\r\n- [ ] Invalid token handling\r\n- [ ] Expired token handling\r\n- [ ] Session invalidation verification\r\n\r\n---\r\n\r\n## E2.2: Google OAuth Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1\r\n**Risk Level**: Medium\r\n**Blocks**: None\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Google OAuth 2.0 configuration ✅\r\n- [x] OAuth callback handling ✅\r\n- [x] User account creation from Google profile ✅\r\n- [x] Account linking (existing email) ✅\r\n- [x] OAuth error handling ✅\r\n- [x] CSRF protection in OAuth flow ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Google OAuth 2.0 fully configured with Passport.js\r\n- OAuth callback handler implemented\r\n- User account creation from Google profile working\r\n- Account linking for existing emails implemented\r\n- Comprehensive OAuth error handling\r\n- CSRF protection implemented with state parameter\r\n- OAuth endpoints tested and working\r\n\r\n**Prerequisites**:\r\n\r\n- [ ] Create Google Cloud Console project\r\n- [ ] Configure OAuth 2.0 credentials\r\n- [ ] Add authorized redirect URIs\r\n- [ ] Obtain client ID and secret\r\n\r\n**Implementation Tasks**:\r\n\r\n```typescript\r\n// Passport Google Strategy\r\n- [ ] Install passport-google-oauth20\r\n- [ ] Configure strategy with client ID/secret\r\n- [ ] Define callback URL\r\n- [ ] Handle user profile mapping\r\n- [ ] Check if user exists (by email or googleId)\r\n- [ ] Create new user or update existing\r\n- [ ] Issue JWT tokens\r\n- [ ] Handle OAuth errors\r\n```\r\n\r\n**Endpoints**:\r\n\r\n```\r\nGET  /auth/google           - Initiate OAuth flow\r\nGET  /auth/google/callback  - OAuth callback handler\r\n```\r\n\r\n**Security Considerations**:\r\n\r\n- [ ] Validate state parameter (CSRF)\r\n- [ ] Verify token with Google\r\n- [ ] Rate limit OAuth endpoints\r\n- [ ] Log OAuth events for audit\r\n\r\n**Testing**:\r\n\r\n- [ ] Mock Google OAuth responses\r\n- [ ] Test account creation flow\r\n- [ ] Test account linking flow\r\n- [ ] Test error scenarios\r\n\r\n---\r\n\r\n## E2.3: Role-Based Access Control (RBAC)\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`, `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/user_role.md`, `../../02_architecture/data_models/role_permission.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Role system implementation (SuperAdmin, Admin, Manager, User, Guest) ✅\r\n- [x] Permission system with resource-action pairs ✅\r\n- [x] Role assignment functionality ✅\r\n- [x] Permission checking middleware ✅\r\n- [x] Default role assignment (User) for new registrations ✅\r\n- [x] Role hierarchy enforcement ✅\r\n\r\n**Database Changes**:\r\n\r\n```prisma\r\n// Already defined in schema\r\n- roles table ✅\r\n- permissions table ✅\r\n- user_roles junction table ✅\r\n- role_permissions junction table ✅\r\n```\r\n\r\n**Default Roles & Permissions**:\r\n\r\n```typescript\r\nSuperAdmin:\r\n  - ALL permissions on ALL resources ✅\r\n\r\nAdmin:\r\n  - users: create, read, update, delete ✅\r\n  - credits: read, update, adjust ✅\r\n  - roles: read, assign ✅\r\n  - services: read, configure ✅\r\n\r\nManager:\r\n  - users: read (team only) ✅\r\n  - credits: read (team only), adjust (team only) ✅\r\n  - services: read ✅\r\n\r\nUser:\r\n  - users: read (self only), update (self only) ✅\r\n  - credits: read (self only) ✅\r\n  - services: use ✅\r\n\r\nGuest:\r\n  - users: read (self only) ✅\r\n  - credits: read (self only) ✅\r\n  - services: limited use ✅\r\n```\r\n\r\n**Implementation Tasks**:\r\n\r\n- [x] Create seed data for default roles/permissions ✅\r\n- [x] Implement role assignment service ✅\r\n- [x] Create RBAC middleware ✅\r\n- [x] Add role-based route protection ✅\r\n- [x] Implement permission caching (Redis) ✅\r\n\r\n**Middleware Usage**:\r\n\r\n```typescript\r\n// Protect routes by permission\r\nrouter.delete('/users/:id', requirePermission('users', 'delete'), deleteUser);\r\n\r\n// Protect routes by role\r\nrouter.get('/admin/dashboard', requireRole(['admin', 'superadmin']), getAdminDashboard);\r\n```\r\n\r\n**Completion Notes**:\r\n\r\n- Complete RBAC system implemented with 5 default roles (SuperAdmin, Admin, Manager, User, Guest)\r\n- Permission-based access control with resource-action pairs\r\n- Redis caching for permission checks (1 hour TTL)\r\n- Comprehensive test coverage for all RBAC middleware functions\r\n- Role assignment/removal endpoints with proper authorization\r\n- Seed script creates all default roles and permissions\r\n- Permission invalidation cache when roles are changed",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.732Z",
          "updatedAt": "2025-10-15T01:51:18.732Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "epic_2 references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_2 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "epic_2 references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_2 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_2 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_2 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_2 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "epic_2 references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_2 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "epic_2 references user_role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_3",
        "title": "Epic 3: Credit Management System (Sprint 2-3)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 3: Credit Management System (Sprint 2-3)\r\n\r\n## E3.1: Credit Account System\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Credit account creation for new users ✅\r\n- [x] Initial balance (1 credit) ✅\r\n- [x] Credit balance tracking API ✅\r\n- [x] Credit transaction logging ✅\r\n- [x] Credit usage calculation ✅\r\n- [x] Credit history API endpoints ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Auto-creation on user registration\r\n- Database schema implemented\r\n- Initial balance setup\r\n- Credit balance endpoint with Redis caching (60s TTL)\r\n- Transaction history with pagination (page/limit)\r\n- Admin credit adjustment endpoints\r\n- Promo code redemption system\r\n- Comprehensive error handling and validation\r\n\r\n**API Endpoints Implemented**:\r\n\r\n```typescript\r\nGET    /credits/balance        - Get current balance (with caching)\r\nGET    /credits/history        - Transaction history (paginated)\r\nPOST   /credits/redeem         - Redeem promo codes\r\nPOST   /admin/credits/adjust   - Admin credit adjustments\r\nGET    /admin/credits/:userId  - Get user credit info (admin)\r\n```\r\n\r\n---\r\n\r\n## E3.2: Credit Top-up System\r\n\r\n**Story Points**: 8\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E3.1, Stripe Account Setup\r\n**Risk Level**: High (Payment integration)\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Credit package configuration\r\n- [ ] Stripe payment integration\r\n- [ ] Checkout page (hosted or embedded)\r\n- [ ] Payment webhook handling\r\n- [ ] Transaction security (idempotency)\r\n- [ ] Purchase confirmation email\r\n- [ ] Refund processing\r\n\r\n**Credit Packages**:\r\n\r\n```typescript\r\n{\r\n  starter: { credits: 100, price: 10, perCredit: 0.10 },\r\n  pro: { credits: 1000, price: 80, perCredit: 0.08 },\r\n  business: { credits: 10000, price: 600, perCredit: 0.06 },\r\n  enterprise: { custom: true }\r\n}\r\n```\r\n\r\n**Implementation Steps**:\r\n\r\n1. **Stripe Setup** (1 day)\r\n   - [ ] Create Stripe account\r\n   - [ ] Configure products and prices\r\n   - [ ] Setup webhook endpoint\r\n   - [ ] Add Stripe SDK\r\n\r\n2. **Purchase Flow** (2 days)\r\n   - [ ] Create checkout session endpoint\r\n   - [ ] Redirect to Stripe checkout\r\n   - [ ] Handle success/cancel callbacks\r\n   - [ ] Store pending transactions\r\n\r\n3. **Webhook Processing** (2 days)\r\n   - [ ] Verify webhook signatures\r\n   - [ ] Handle checkout.session.completed\r\n   - [ ] Handle payment_intent.succeeded\r\n   - [ ] Handle payment_intent.failed\r\n   - [ ] Implement idempotency (prevent duplicate credits)\r\n   - [ ] Update credit balance atomically\r\n\r\n4. **Email Notifications** (1 day)\r\n   - [ ] Purchase confirmation email\r\n   - [ ] Receipt with transaction details\r\n   - [ ] Failed payment notification\r\n\r\n**Security Measures**:\r\n\r\n- [ ] Webhook signature verification\r\n- [ ] Idempotency keys for all operations\r\n- [ ] Transaction audit logging\r\n- [ ] PCI compliance (Stripe handles card data)\r\n\r\n**Testing**:\r\n\r\n- [ ] Use Stripe test mode\r\n- [ ] Test successful payment\r\n- [ ] Test failed payment\r\n- [ ] Test webhook retry mechanism\r\n- [ ] Test duplicate webhook prevention\r\n\r\n---\r\n\r\n## E3.3: Admin Credit Management\r\n\r\n**Story Points**: 3\r\n**Priority**: P2 (Medium)\r\n**Status**: Not Started\r\n**Dependencies**: E3.1, E2.3 (RBAC)\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Admin interface for credit adjustments\r\n- [ ] Manual credit addition/deduction\r\n- [ ] Bulk credit operations\r\n- [ ] Credit audit trail\r\n- [ ] Credit usage reports\r\n\r\n**Admin Endpoints**:\r\n\r\n```typescript\r\nPOST   /admin/credits/adjust       - Adjust user credits\r\nPOST   /admin/credits/bulk         - Bulk operations\r\nGET    /admin/credits/report       - Usage reports\r\nGET    /admin/credits/audit        - Audit trail\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Create admin credit adjustment service\r\n- [ ] Add reason field for manual adjustments\r\n- [ ] Implement bulk operations (CSV import)\r\n- [ ] Create audit trail queries\r\n- [ ] Build usage report generator\r\n\r\n---\r\n\r\n## E3.4: Promotional Code System\r\n\r\n**Story Points**: 5\r\n**Priority**: P2 (Medium)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E3.1\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/promo_code.md`, `../../02_architecture/data_models/promo_redemption.md`, `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Promo code creation (admin only) ✅\r\n- [x] Code redemption functionality ✅\r\n- [x] Validation (exists, not expired, not used) ✅\r\n- [x] One-time use per user enforcement ✅\r\n- [x] Credit bonus application ✅\r\n- [x] Redemption tracking ✅\r\n\r\n**Promo Code Properties**:\r\n\r\n```typescript\r\ninterface PromoCode {\r\n  code: string; // e.g., \"WELCOME10\"\r\n  credits: number; // Bonus credits\r\n  maxUses?: number; // Global limit (null = unlimited)\r\n  expiresAt?: Date; // Expiration date (null = never)\r\n  active: boolean; // Can be deactivated\r\n}\r\n```\r\n\r\n**Endpoints Implemented**:\r\n\r\n```typescript\r\nPOST   /credits/redeem         - Redeem code (user)\r\n// Admin endpoints for promo management will be in Phase 2\r\n```\r\n\r\n**Validation Rules Implemented**:\r\n\r\n- [x] Code must exist and be active\r\n- [x] Code must not be expired\r\n- [x] User must not have redeemed this code before\r\n- [x] Global max uses not exceeded (if set)\r\n\r\n**Completion Notes**:\r\n\r\n- Atomic transaction implementation for redemption\r\n- Redis cache invalidation on credit updates\r\n- Comprehensive error handling for all validation cases\r\n- Usage tracking with promo_code_usage table\r\n- Admin management UI planned for Phase 2",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.732Z",
          "updatedAt": "2025-10-15T01:51:18.732Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_3 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_3 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "epic_3 references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "epic_3 references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_3 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_3 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_3 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_3 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_3 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "epic_3 references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "epic_3 references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_3 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_4",
        "title": "Epic 4: MCP Server Development (Sprint 3-4)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 4: MCP Server Development (Sprint 3-4)\r\n\r\n## E4.1: MCP Server Foundation\r\n\r\n**Story Points**: 8\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1 (JWT middleware), E3.1 (Credit system)\r\n**Risk Level**: High\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`, `../../02_architecture/services/api_gateway.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] MCP protocol implementation ✅\r\n- [x] WebSocket server with authentication ✅\r\n- [x] Request/response message format ✅\r\n- [x] Connection lifecycle management ✅\r\n- [x] Error handling and logging ✅\r\n- [x] Heartbeat/ping-pong mechanism ✅\r\n\r\n**WebSocket Server Setup**:\r\n\r\n```typescript\r\nimport WebSocket from 'ws';\r\n\r\nconst wss = new WebSocket.Server({\r\n  port: 3003,\r\n  verifyClient: async (info, callback) => {\r\n    // Verify JWT from query param or header\r\n    try {\r\n      const token = extractToken(info.req);\r\n      const user = await verifyToken(token);\r\n      info.req.user = user;\r\n      callback(true);\r\n    } catch (error) {\r\n      callback(false, 401, 'Unauthorized');\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n**Message Protocol**:\r\n\r\n```typescript\r\n// Client → Server\r\ninterface MCPRequest {\r\n  id: string; // Unique request ID\r\n  type: 'completion' | 'chat'; // Request type\r\n  provider?: 'openai' | 'claude' | 'auto';\r\n  model: string;\r\n  messages: Message[];\r\n  stream: boolean;\r\n  maxTokens?: number;\r\n  temperature?: number;\r\n}\r\n\r\n// Server → Client\r\ninterface MCPResponse {\r\n  id: string; // Matches request ID\r\n  type: 'chunk' | 'done' | 'error';\r\n  data?: string; // Content chunk\r\n  usage?: TokenUsage; // Final usage stats\r\n  error?: ErrorDetails;\r\n}\r\n```\r\n\r\n**Connection Management**:\r\n\r\n- [x] Handle client connect ✅\r\n- [x] Authenticate with JWT ✅\r\n- [x] Track active connections (Map) ✅\r\n- [x] Handle client disconnect ✅\r\n- [x] Clean up resources ✅\r\n- [x] Implement reconnection logic ✅\r\n\r\n**Heartbeat**:\r\n\r\n```typescript\r\n// Ping every 30 seconds\r\nsetInterval(() => {\r\n  wss.clients.forEach((ws) => {\r\n    if (!ws.isAlive) {\r\n      ws.terminate();\r\n      return;\r\n    }\r\n    ws.isAlive = false;\r\n    ws.ping();\r\n  });\r\n}, 30000);\r\n```\r\n\r\n**Completion Notes**:\r\n\r\n- Full WebSocket server implementation with authentication\r\n- Connection service for managing active connections\r\n- Credit service integration for pre-request validation\r\n- Logging service for request tracking and analytics\r\n- Health check and stats endpoints for monitoring\r\n- Comprehensive error handling and structured logging\r\n- Mock LLM processing (placeholder for actual AI integration)\r\n\r\n---\r\n\r\n## E4.2: OpenAI Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-13\r\n**Dependencies**: E4.1\r\n**Risk Level**: Medium\r\n**Assigned To**: Backend Team\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`, `../../02_architecture/data_models/credit_transaction.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] OpenAI SDK integration\r\n- [x] Support for GPT-3.5, GPT-4\r\n- [x] Streaming responses\r\n- [x] Token usage tracking\r\n- [x] Error handling (rate limits, timeouts)\r\n- [x] Credit deduction per request\r\n\r\n**Completion Notes**:\r\n\r\n- Full OpenAI SDK integration completed with streaming support\r\n- GPT-3.5 and GPT-4 models implemented\r\n- Token usage tracking and credit deduction working\r\n- Rate limiting and timeout handling implemented\r\n- Comprehensive error handling for all failure scenarios\r\n- Integration with MCP server foundation completed\r\n\r\n**Implementation**:\r\n\r\n```typescript\r\nimport OpenAI from 'openai';\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nasync function callOpenAI(request: MCPRequest): Promise<MCPResponse> {\r\n  // Check user credits before making request\r\n  await checkSufficientCredits(request.userId, estimateCredits(request));\r\n\r\n  try {\r\n    const stream = await openai.chat.completions.create({\r\n      model: request.model,\r\n      messages: request.messages,\r\n      stream: true,\r\n      max_tokens: request.maxTokens,\r\n    });\r\n\r\n    // Stream chunks back to client\r\n    for await (const chunk of stream) {\r\n      ws.send(\r\n        JSON.stringify({\r\n          id: request.id,\r\n          type: 'chunk',\r\n          data: chunk.choices[0]?.delta?.content,\r\n        })\r\n      );\r\n    }\r\n\r\n    // Deduct credits based on actual usage\r\n    await deductCredits(request.userId, usage.totalTokens);\r\n  } catch (error) {\r\n    // Handle errors (rate limit, timeout, etc.)\r\n  }\r\n}\r\n```\r\n\r\n**Rate Limit Handling**:\r\n\r\n- [ ] Detect 429 status code\r\n- [ ] Implement exponential backoff\r\n- [ ] Queue requests if rate limited\r\n- [ ] Fallback to Claude if persistent\r\n\r\n**Tasks**:\r\n\r\n- [ ] Install OpenAI SDK\r\n- [ ] Create OpenAI provider wrapper\r\n- [ ] Implement streaming logic\r\n- [ ] Add token counting\r\n- [ ] Integrate credit deduction\r\n- [ ] Add comprehensive error handling\r\n\r\n---\r\n\r\n## E4.5: Sora2 Video Generator Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-13\r\n**Dependencies**: E4.1, E4.2\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`, `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`, `../../02_architecture/data_models/credit_transaction.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Sora2 Video API integration\r\n- [x] Session-based authentication with verification codes\r\n- [x] Google OAuth integration for Sora2\r\n- [x] Credit management for video generation\r\n- [x] Custom GPT integration for video workflows\r\n- [x] Error handling for video generation failures\r\n\r\n**Completion Notes**:\r\n\r\n- Full Sora2 Video Generator integration completed\r\n- Session-based authentication system implemented with verification codes\r\n- Google OAuth integration with session parameters working\r\n- Credit management APIs (check and deduct) implemented for video generation\r\n- Custom GPT integration for video workflows completed\r\n- Comprehensive error handling for all video generation scenarios\r\n- Redis session storage implemented for OAuth tokens\r\n- Atomic credit transactions for video generation\r\n\r\n**Implementation Details**:\r\n\r\n```typescript\r\n// Sora2 Video Generation Endpoint\r\nPOST /api/sora2/generate\r\n{\r\n  \"prompt\": \"A beautiful sunset over the ocean\",\r\n  \"duration\": 10,\r\n  \"resolution\": \"1080p\"\r\n}\r\n\r\n// Session-based Authentication\r\nGET /api/sora2/auth/session?code=verification_code\r\n{\r\n  \"sessionToken\": \"session_token_here\",\r\n  \"expiresAt\": \"2025-10-14T08:57:00Z\"\r\n}\r\n\r\n// Credit Management for Video Generation\r\nPOST /api/credits/check\r\nPOST /api/credits/deduct\r\n{\r\n  \"userId\": \"user_id\",\r\n  \"credits\": 5,\r\n  \"service\": \"sora2\",\r\n  \"sessionId\": \"session_token_here\"\r\n}\r\n```\r\n\r\n**OAuth Flow with Verification Codes**:\r\n\r\n1. User initiates video generation request\r\n2. System generates verification code and stores in Redis\r\n3. User authorizes via Google OAuth with verification code\r\n4. System receives OAuth callback with verification code\r\n5. System creates session token and stores in Redis\r\n6. User can now generate videos using session token\r\n\r\n**Security Measures**:\r\n\r\n- [x] Verification codes expire after 15 minutes\r\n- [x] Session tokens expire after 24 hours\r\n- [x] All requests require valid session token\r\n- [x] Credit deduction happens before video generation\r\n- [x] Audit trail for all video generation requests\r\n\r\n**Tests Completed**:\r\n\r\n- [x] OAuth flow with verification codes\r\n- [x] Session management in Redis\r\n- [x] Credit check and deduction for video generation\r\n- [x] Video generation with valid session\r\n- [x] Error handling for expired sessions\r\n- [x] Error handling for insufficient credits\r\n\r\n---\r\n\r\n## E4.3: Claude Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E4.1, E4.2\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Anthropic SDK integration\r\n- [ ] Support for Claude-3 models\r\n- [ ] Unified interface with OpenAI\r\n- [ ] Provider switching logic\r\n- [ ] Load balancing between providers\r\n\r\n**Provider Abstraction**:\r\n\r\n```typescript\r\ninterface LLMProvider {\r\n  execute(request: MCPRequest): Promise<MCPResponse>;\r\n  estimateCredits(request: MCPRequest): number;\r\n  checkAvailability(): Promise<boolean>;\r\n}\r\n\r\nclass OpenAIProvider implements LLMProvider {\r\n  // Implementation\r\n}\r\n\r\nclass ClaudeProvider implements LLMProvider {\r\n  // Implementation\r\n}\r\n\r\n// Provider selection\r\nconst providers = {\r\n  openai: new OpenAIProvider(),\r\n  claude: new ClaudeProvider(),\r\n};\r\n\r\nfunction selectProvider(request: MCPRequest): LLMProvider {\r\n  if (request.provider && request.provider !== 'auto') {\r\n    return providers[request.provider];\r\n  }\r\n\r\n  // Auto-select based on availability and load\r\n  return selectBestProvider();\r\n}\r\n```\r\n\r\n---\r\n\r\n## E4.4: MCP Authentication & Authorization\r\n\r\n**Story Points**: 3\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E4.1, E2.1\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/credit_account.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] JWT validation for WebSocket connections\r\n- [ ] User permission checking per request\r\n- [ ] Credit validation before LLM calls\r\n- [ ] Service access control by role\r\n- [ ] Usage logging per user\r\n\r\n**Pre-request Checks**:\r\n\r\n```typescript\r\nasync function handleMCPRequest(ws: WebSocket, request: MCPRequest) {\r\n  const user = ws.user; // From JWT validation\r\n\r\n  // 1. Check user has permission to use service\r\n  if (!(await hasPermission(user, 'services', 'use'))) {\r\n    return sendError(ws, 'FORBIDDEN', 'No permission to use AI services');\r\n  }\r\n\r\n  // 2. Check sufficient credits\r\n  const estimatedCredits = estimateCredits(request);\r\n  const balance = await getCreditBalance(user.id);\r\n\r\n  if (balance < estimatedCredits) {\r\n    return sendError(ws, 'INSUFFICIENT_CREDITS', 'Not enough credits');\r\n  }\r\n\r\n  // 3. Check rate limits\r\n  if (await isRateLimited(user.id)) {\r\n    return sendError(ws, 'RATE_LIMIT_EXCEEDED', 'Too many requests');\r\n  }\r\n\r\n  // 4. Process request\r\n  await processLLMRequest(ws, request);\r\n\r\n  // 5. Log usage\r\n  await logUsage(user.id, request, response);\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.733Z",
          "updatedAt": "2025-10-15T01:51:18.733Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_4 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_4 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_4 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_4 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_4 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_4 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_4 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_4 references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_4 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_4 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_4 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_4 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_4 references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_4 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_4 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_4 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_5",
        "title": "Epic 5: Frontend Development (Sprint 4-5)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 5: Frontend Development (Sprint 4-5)\r\n\r\n## E5.1: React App Setup\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: 🔄 In Progress (Started 2025-10-04)\r\n**Dependencies**: None\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] React 18+ with TypeScript\r\n- [x] Vite build tool configuration\r\n- [ ] Material-UI component library\r\n- [ ] Redux Toolkit state management\r\n- [ ] React Router navigation\r\n- [ ] Responsive layout foundation\r\n\r\n**Current Progress**:\r\n\r\n- ✅ Vite + React + TypeScript setup complete\r\n- ✅ Development server running on port 5173\r\n- ✅ API Gateway development server also running\r\n- 🔄 Installing additional dependencies (MUI, Redux, etc.)\r\n\r\n**Initial Setup**:\r\n\r\n```bash\r\nnpm create vite@latest frontend -- --template react-ts\r\ncd frontend\r\nnpm install @mui/material @emotion/react @emotion/styled\r\nnpm install @reduxjs/toolkit react-redux\r\nnpm install react-router-dom\r\nnpm install react-hook-form zod @hookform/resolvers\r\n```\r\n\r\n**Project Structure**:\r\n\r\n```\r\nfrontend/src/\r\n├── components/\r\n│   ├── common/          # Reusable components\r\n│   ├── auth/            # Auth-related\r\n│   └── layout/          # Layout components\r\n├── pages/               # Route components\r\n├── store/               # Redux store\r\n├── services/            # API services\r\n├── hooks/               # Custom hooks\r\n├── utils/               # Utilities\r\n├── types/               # TypeScript types\r\n└── theme/               # MUI theme\r\n```\r\n\r\n**Theme Configuration**:\r\n\r\n```typescript\r\nimport { createTheme } from '@mui/material/styles';\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: { main: '#1976d2' },\r\n    secondary: { main: '#dc004e' },\r\n  },\r\n  typography: {\r\n    fontFamily: 'Inter, system-ui, sans-serif',\r\n  },\r\n});\r\n```\r\n\r\n---\r\n\r\n## E5.2: Authentication UI\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E2.1, E5.1\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Login page with form validation\r\n- [ ] Registration page\r\n- [ ] Email verification UI\r\n- [ ] Password reset flow\r\n- [ ] Google OAuth button\r\n- [ ] Protected route wrapper\r\n\r\n**Components**:\r\n\r\n```typescript\r\n// Login Form\r\n- [ ] Email and password fields\r\n- [ ] Validation with react-hook-form + zod\r\n- [ ] Remember me checkbox\r\n- [ ] Forgot password link\r\n- [ ] Loading states\r\n- [ ] Error display\r\n\r\n// Registration Form\r\n- [ ] Email, password, confirm password\r\n- [ ] Terms acceptance checkbox\r\n- [ ] Validation rules\r\n- [ ] Success message\r\n\r\n// Protected Route\r\n- [ ] Check authentication status\r\n- [ ] Redirect to login if not authenticated\r\n- [ ] Show loading while checking\r\n```\r\n\r\n---\r\n\r\n## E5.3: Dashboard UI\r\n\r\n**Story Points**: 8\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E5.1, E5.2\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Dashboard layout with navigation\r\n- [ ] Credit balance widget\r\n- [ ] Usage statistics charts\r\n- [ ] Available services grid\r\n- [ ] Recent activity table\r\n\r\n**Dashboard Widgets**:\r\n\r\n- Credit Balance Card (real-time)\r\n- Usage Chart (last 30 days)\r\n- Quick Actions (Top-up, View History)\r\n- Service Status Indicators\r\n- Recent Transactions Table\r\n\r\n---\r\n\r\n## E5.4: Admin Interface\r\n\r\n**Story Points**: 8\r\n**Priority**: P2 (Medium)\r\n**Status**: Not Started\r\n**Dependencies**: E5.1, E2.3 (RBAC)\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/credit_account.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Admin dashboard with metrics\r\n- [ ] User management table\r\n- [ ] Credit management interface\r\n- [ ] System monitoring panels\r\n- [ ] Audit log viewer",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.733Z",
          "updatedAt": "2025-10-15T01:51:18.733Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_5 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_5 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_5 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_5 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_5 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_5 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_5 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_5 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_5 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_5 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_5 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_5 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_5 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_5 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_6",
        "title": "Epic 6: Testing & Deployment (Sprint 5)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 6: Testing & Deployment (Sprint 5)\r\n\r\n## E6.1: Testing Implementation\r\n\r\n**Story Points**: 8\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n  - Data Models: All data models in `../../02_architecture/data_models/`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Unit tests (80%+ coverage)\r\n- [ ] Integration tests for APIs\r\n- [ ] E2E tests for critical flows\r\n- [ ] Performance testing\r\n- [ ] Security testing\r\n\r\n**Testing Stack**:\r\n\r\n- Jest for unit tests\r\n- Supertest for API tests\r\n- Cypress for E2E tests\r\n- Artillery for load testing\r\n\r\n---\r\n\r\n## E6.2: Production Deployment\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: Not Started\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Production Docker configuration\r\n- [ ] Environment variable management\r\n- [ ] SSL automation\r\n- [ ] Database migration automation\r\n- [ ] Monitoring and alerting",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.733Z",
          "updatedAt": "2025-10-15T01:51:18.733Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_6 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_6 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_6 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_6 references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_6 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_6 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_6 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_6 references mcp_server",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Product Backlog",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# Product Backlog\r\n\r\nThis directory contains the product backlog for the Smart AI Hub project. It includes epics that define large features and user value, as well as sprint planning information that organizes work into timeboxed iterations.\r\n\r\n## Contents\r\n\r\n### Epics\r\nEpics are large bodies of work that can be broken down into smaller stories or tasks.\r\n\r\n- [epic_1.md](epics/epic_1.md) - User Authentication and Authorization\r\n- [epic_2.md](epics/epic_2.md) - Credit Management System\r\n- [epic_3.md](epics/epic_3.md) - API Integration Framework\r\n- [epic_4.md](epics/epic_4.md) - Usage Analytics and Reporting\r\n- [epic_5.md](epics/epic_5.md) - Admin Dashboard and Management\r\n- [epic_6.md](epics/epic_6.md) - Notification System\r\n\r\n### Sprints\r\nSprints are timeboxed iterations of work that deliver a potentially shippable increment of the product.\r\n\r\n- [sprints/](sprints/) - Sprint planning and backlog items",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.733Z",
          "updatedAt": "2025-10-15T01:51:18.733Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_1",
          "description": "README references epic_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_2",
          "description": "README references epic_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_3",
          "description": "README references epic_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_4",
          "description": "README references epic_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_5",
          "description": "README references epic_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_6",
          "description": "README references epic_6",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Frontend Specifications",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# Frontend Specifications\r\n\r\nThis directory contains the frontend specifications for the Smart AI Hub platform. It includes UI components, pages, layouts, state management, and utility specifications.\r\n\r\n## Directory Structure\r\n\r\n```\r\nspecs/03_frontend/\r\n├── README.md                    # This file\r\n├── components/                  # UI Component specifications\r\n│   ├── auth/                   # Authentication components\r\n│   ├── common/                 # Common reusable components\r\n│   ├── forms/                  # Form components\r\n│   └── layout/                 # Layout components\r\n├── pages/                      # Page specifications\r\n├── layouts/                    # Layout specifications\r\n├── hooks/                      # Custom React hooks\r\n├── store/                      # State management specifications\r\n└── utils/                      # Utility specifications\r\n```\r\n\r\n## Frontend Technology Stack\r\n\r\n- **Framework**: React 18+ with TypeScript\r\n- **Build Tool**: Vite\r\n- **UI Library**: Material-UI (MUI)\r\n- **State Management**: Zustand\r\n- **Form Handling**: React Hook Form with Zod validation\r\n- **Routing**: React Router v6\r\n- **HTTP Client**: Axios\r\n- **Styling**: Material-UI theme system + CSS-in-JS\r\n\r\n## Component Standards\r\n\r\nAll frontend components must follow these standards:\r\n\r\n1. **TypeScript**: All components must be fully typed\r\n2. **Accessibility**: WCAG 2.1 Level AA compliance\r\n3. **Responsive**: Mobile-first responsive design\r\n4. **Performance**: Optimized for rendering and bundle size\r\n5. **Testing**: Unit tests with React Testing Library\r\n6. **Documentation**: Storybook stories for all components\r\n\r\n## Design System\r\n\r\nThe frontend uses a consistent design system based on Material-UI with custom theming:\r\n\r\n- **Primary Color**: #1976d2 (Blue)\r\n- **Secondary Color**: #dc004e (Pink)\r\n- **Typography**: Inter font family\r\n- **Spacing**: 8px base unit\r\n- **Border Radius**: 4px default\r\n\r\n## State Management\r\n\r\nState is managed using Zustand with the following stores:\r\n- **Auth Store**: User authentication state\r\n- **Credit Store**: Credit balance and transactions\r\n- **UI Store**: Loading states, modals, notifications\r\n- **Chat Store**: Chat history and active sessions\r\n\r\n## API Integration\r\n\r\nFrontend communicates with backend APIs through:\r\n- **Base URL**: Configurable via environment variables\r\n- **Authentication**: JWT tokens in Authorization header\r\n- **Error Handling**: Centralized error handling with user-friendly messages\r\n- **Retry Logic**: Automatic retry for failed requests with exponential backoff\r\n\r\n## Testing Strategy\r\n\r\n- **Unit Tests**: Component logic and utilities\r\n- **Integration Tests**: Component interactions\r\n- **E2E Tests**: Critical user journeys\r\n- **Visual Regression**: Storybook with Chromatic\r\n- **Performance**: Lighthouse CI integration\r\n\r\n## Deployment\r\n\r\n- **Development**: Local development with hot reload\r\n- **Staging**: Automated deployment on PR merge\r\n- **Production**: Manual deployment with version tagging\r\n- **CDN**: Static assets served via CDN",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.742Z",
          "updatedAt": "2025-10-15T01:51:18.742Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "api_gateway",
        "title": "API Gateway Service",
        "type": "user_story",
        "category": "documentation",
        "content": "# API Gateway Service\n\n## 1. Overview\n\nThe API Gateway serves as the central entry point for all API requests to the Smart AI Hub platform. It handles request routing, authentication verification, rate limiting, and other cross-cutting concerns. The gateway provides a unified interface for clients to interact with various microservices, abstracting the underlying service architecture and providing consistent security, monitoring, and traffic management across the entire platform.\n\n## 2. Objectives\n\n1. Provide a single entry point for all client requests to the Smart AI Hub platform\n2. Implement centralized authentication and authorization for all API endpoints\n3. Enforce role-based rate limiting to protect backend services from abuse\n4. Route requests efficiently to appropriate backend services based on URL patterns\n5. Implement comprehensive logging and monitoring for all API traffic\n6. Provide high availability and load balancing for backend services\n7. Ensure security through proper CORS handling, request validation, and security headers\n8. Support WebSocket connections for real-time communication requirements\n\n## 3. User Stories\n\n### Story 1: API Request Routing\n\nAs a client application developer, I want to send all API requests to a single endpoint, so that I don't need to manage multiple service URLs and configurations.\n\n**Acceptance Criteria:**\n\n1. The API Gateway must accept requests at a single base URL\n2. The gateway must route requests to appropriate services based on URL patterns\n3. The routing must be transparent to the client application\n4. The gateway must handle service discovery automatically\n5. The gateway must return appropriate responses from backend services\n6. The gateway must handle service failures gracefully\n7. The gateway must maintain request context across service calls\n\n### Story 2: Authentication and Authorization\n\nAs a system administrator, I want all API requests to be authenticated and authorized centrally, so that I can enforce security policies consistently across all services.\n\n**Acceptance Criteria:**\n\n1. The gateway must validate JWT tokens for all protected routes\n2. The gateway must check token validity against a blacklist\n3. The gateway must extract user information from valid tokens\n4. The gateway must reject requests with invalid or expired tokens\n5. The gateway must pass user context to backend services\n6. The gateway must support token refresh mechanisms\n7. The gateway must log authentication attempts for security monitoring\n\n### Story 3: Rate Limiting\n\nAs a platform operator, I want to implement rate limiting based on user roles, so that I can prevent abuse and ensure fair resource allocation.\n\n**Acceptance Criteria:**\n\n1. The gateway must enforce different rate limits for different user roles\n2. The gateway must use Redis for distributed rate limiting\n3. The gateway must return appropriate error responses when limits are exceeded\n4. The gateway must allow unlimited requests for admin users\n5. The gateway must implement sliding window rate limiting\n6. The gateway must provide rate limit headers in responses\n7. The gateway must allow rate limit configuration updates without restart\n\n### Story 4: Request Monitoring and Logging\n\nAs a DevOps engineer, I want comprehensive logging of all API requests, so that I can monitor system performance, troubleshoot issues, and analyze usage patterns.\n\n**Acceptance Criteria:**\n\n1. The gateway must generate unique request IDs for tracking\n2. The gateway must log request and response details\n3. The gateway must record timing metrics for all requests\n4. The gateway must log authentication and authorization results\n5. The gateway must provide structured logs for analysis\n6. The gateway must support different log levels for different environments\n7. The gateway must integrate with external monitoring systems\n\n## 4. Scope\n\n### In Scope\n\n1. HTTP request routing and proxying to backend services\n2. JWT token validation and user context extraction\n3. Role-based rate limiting with Redis storage\n4. CORS handling for cross-origin requests\n5. Request/response logging with unique tracking IDs\n6. Health check endpoints for monitoring\n7. WebSocket proxy support for real-time connections\n8. Security headers implementation\n9. Request size limits and validation\n10. Error handling and standardization\n\n### Out of Scope\n\n1. User authentication and token generation (handled by auth-service)\n2. Business logic implementation (handled by backend services)\n3. Database operations and data persistence\n4. WebSocket message processing beyond proxying\n5. Advanced API analytics and reporting\n6. API versioning beyond basic routing\n7. Request/response transformation beyond basic proxying\n8. Service mesh implementation\n9. Advanced caching strategies\n10. API documentation generation\n\n## 5. Technical Requirements\n\n### 5.1. Technology Stack\n\n- **Runtime**: Node.js 20 LTS\n- **Framework**: Express.js 4.x\n- **Language**: TypeScript 5.x\n- **Port**: 3000\n- **Process Manager**: PM2\n- **Container**: Docker\n\n### 5.2. Core Components\n\n#### HTTP Server\n\n- Express.js server with TypeScript support\n- Middleware pipeline for request processing\n- Error handling middleware\n- Request/response logging middleware\n\n#### Authentication Middleware\n\n- JWT token validation\n- Token blacklist checking via Redis\n- User context extraction and attachment\n- Authentication error handling\n\n#### Rate Limiting Middleware\n\n- Redis-backed distributed rate limiting\n- Role-based limit configuration\n- Sliding window implementation\n- Rate limit headers in responses\n\n#### Proxy Middleware\n\n- http-proxy-middleware for service routing\n- WebSocket support for real-time connections\n- Load balancing across service instances\n- Service health checking\n\n### 5.3. API Configuration\n\n#### Routing Rules\n\n```\n/api/auth/*     → auth-service:3001\n/api/users/*    → core-service:3002\n/api/credits/*  → core-service:3002\n/api/mcp/*      → mcp-server:3003\n/api/ws/*       → mcp-server:3003 (WebSocket upgrade)\n/health         → Health check endpoint\n/metrics        → Prometheus metrics endpoint\n```\n\n#### Rate Limiting Configuration\n\n```typescript\nconst rateLimiter = rateLimit({\n  store: new RedisStore({\n    client: redisClient,\n    prefix: 'rl:',\n  }),\n  windowMs: 60 * 1000, // 1 minute\n  max: async (req) => {\n    const user = req.user;\n    if (!user) return 10; // Guest\n\n    switch (user.role) {\n      case 'admin':\n        return Number.POSITIVE_INFINITY;\n      case 'manager':\n        return 120;\n      case 'user':\n        return 60;\n      default:\n        return 10;\n    }\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  message: {\n    code: 'RATE_LIMIT_EXCEEDED',\n    message: 'Too many requests, please try again later',\n  },\n});\n```\n\n### 5.4. Security Requirements\n\n1. **Authentication**: JWT token validation for all protected routes\n2. **Authorization**: Role-based access control enforcement\n3. **CORS**: Proper cross-origin resource sharing configuration\n4. **Security Headers**: Implementation of security best practices\n5. **Request Validation**: Input sanitization and validation\n6. **Rate Limiting**: Protection against abuse and DDoS attacks\n7. **IP Blocking**: Ability to block malicious IP addresses\n\n### 5.5. Performance Requirements\n\n1. **Response Time**: Gateway processing overhead under 10ms\n2. **Throughput**: Support at least 5000 requests per second\n3. **Concurrency**: Handle at least 1000 concurrent connections\n4. **Memory Usage**: Keep memory usage under 512MB\n5. **CPU Usage**: Keep CPU usage under 70% under normal load\n6. **Connection Pooling**: Efficient connection management to Redis\n\n### 5.6. Monitoring and Logging\n\n1. **Request Logging**: Log all incoming requests with unique IDs\n2. **Response Logging**: Log all outgoing responses with timing\n3. **Error Tracking**: Comprehensive error logging and reporting\n4. **Performance Metrics**: Track response times and throughput\n5. **Health Checks**: Monitor service health and availability\n6. **Alerting**: Integration with alerting systems for critical issues\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n\n1. Test request routing logic for all defined routes\n2. Test JWT token validation with valid and invalid tokens\n3. Test rate limiting with different user roles\n4. Test CORS handling with various origins\n5. Test error handling middleware\n6. Test request logging functionality\n7. Test WebSocket proxying\n\n### 6.2. Integration Tests\n\n1. Test end-to-end request flow through gateway to services\n2. Test authentication flow with auth-service\n3. Test rate limiting with Redis backend\n4. Test service discovery and load balancing\n5. Test health check endpoints\n6. Test WebSocket connection establishment\n7. Test error propagation from backend services\n\n### 6.3. Performance Tests\n\n1. Load testing with high volume of requests\n2. Stress testing beyond expected capacity\n3. Concurrency testing with multiple simultaneous requests\n4. Memory usage testing under sustained load\n5. CPU usage profiling during peak operations\n6. Response time benchmarking\n\n### 6.4. Security Tests\n\n1. Authentication bypass attempts\n2. Rate limiting circumvention attempts\n3. CORS policy violation testing\n4. Injection attacks on request parameters\n5. DDoS attack simulation\n6. Security header validation\n\n### 6.5. End-to-End Tests\n\n1. Complete API request flow from client to backend\n2. WebSocket connection lifecycle\n3. Authentication and authorization flow\n4. Error handling and recovery scenarios\n5. Service failover and recovery\n6. Monitoring and alerting verification\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n\n1. **Redis**: For rate limiting and token blacklist storage\n2. **Auth Service**: For token validation and user information\n3. **Core Service**: For user and credit management APIs\n4. **MCP Server**: For AI model integration APIs\n5. **Docker**: For containerization and deployment\n6. **Monitoring System**: For metrics collection and alerting\n\n### Assumptions\n\n1. Backend services are available and discoverable\n2. Redis cluster is available and highly available\n3. JWT tokens follow a standard format with required claims\n4. Service instances register themselves for discovery\n5. Network connectivity between services is reliable\n6. SSL/TLS termination is handled at the infrastructure level\n\n## 8. Non-Functional Requirements\n\n### Availability\n\n- System must maintain 99.9% uptime\n- Graceful degradation when backend services are unavailable\n- Automatic failover to healthy service instances\n- Health check monitoring with automated recovery\n\n### Scalability\n\n- Horizontal scaling through container orchestration\n- Stateless design for easy scaling\n- Efficient resource utilization\n- Auto-scaling based on load metrics\n\n### Performance\n\n- Minimal latency overhead for request proxying\n- Efficient connection pooling and reuse\n- Optimized memory usage and garbage collection\n- Fast startup time for new instances\n\n### Security\n\n- Secure communication with backend services\n- Protection against common web vulnerabilities\n- Regular security updates and patches\n- Security audit logging and monitoring\n\n### Maintainability\n\n- Clean, well-documented code following best practices\n- Comprehensive test coverage\n- Modular architecture for easy updates\n- Configuration management for different environments\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - All API requests are properly routed to backend services\n   - Authentication is enforced for all protected endpoints\n   - Rate limiting is applied based on user roles\n   - CORS policies are correctly implemented\n   - WebSocket connections are properly proxied\n\n2. **Performance Requirements**\n   - Gateway processing overhead is under 10ms\n   - System handles 5000+ requests per second\n   - Memory usage stays under 512MB\n   - CPU usage stays under 70% under normal load\n\n3. **Security Requirements**\n   - All protected routes require valid authentication\n   - Rate limits prevent abuse and DDoS attacks\n   - Security headers are properly implemented\n   - Request validation prevents injection attacks\n\n4. **Reliability Requirements**\n   - System maintains 99.9% uptime\n   - Failed service requests are handled gracefully\n   - Health checks detect and report service issues\n   - Logging provides comprehensive visibility\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n\n1. **Single Point of Failure**: Gateway failure could affect entire platform\n   - Mitigation: Implement multiple gateway instances with load balancing\n\n2. **Performance Bottleneck**: Gateway could become a bottleneck under high load\n   - Mitigation: Implement horizontal scaling and performance optimization\n\n3. **Security Breach**: Compromised gateway could expose all backend services\n   - Mitigation: Implement comprehensive security measures and regular audits\n\n### Medium Priority Risks\n\n1. **Service Discovery Issues**: Inability to discover backend services\n   - Mitigation: Implement service registry with health checking\n\n2. **Redis Failure**: Rate limiting and blacklist functionality would fail\n   - Mitigation: Implement Redis clustering and fallback mechanisms\n\n### Low Priority Risks\n\n1. **Configuration Errors**: Incorrect routing or security configurations\n   - Mitigation: Implement configuration validation and testing\n\n## 11. Timeline and Milestones\n\n### Phase 1: Core Implementation (3 weeks)\n\n- Basic Express server setup\n- Request routing and proxying\n- Authentication middleware\n- Basic rate limiting\n\n### Phase 2: Advanced Features (2 weeks)\n\n- WebSocket support\n- Advanced rate limiting\n- Comprehensive logging\n- Security implementation\n\n### Phase 3: Testing and Optimization (2 weeks)\n\n- Performance testing and optimization\n- Security testing and hardening\n- Integration testing with all services\n- Documentation completion\n\n### Phase 4: Deployment and Monitoring (1 week)\n\n- Production deployment\n- Monitoring and alerting setup\n- Performance tuning\n- User acceptance testing\n\n## 12. Sign-off\n\n**Product Owner:** ********\\_******** Date: ****\\_****\n\n**Tech Lead:** ********\\_******** Date: ****\\_****\n\n**QA Lead:** ********\\_******** Date: ****\\_****\n\n**DevOps Lead:** ********\\_******** Date: ****\\_****",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.744Z",
          "updatedAt": "2025-10-15T01:51:18.744Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "api_gateway references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "api_gateway references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "auth_service",
        "title": "Authentication Service",
        "type": "user_story",
        "category": "documentation",
        "content": "# Authentication Service\n\n## 1. Overview\n\nThe Authentication Service handles all user authentication, authorization, and identity management functions for the Smart AI Hub platform. It supports traditional email/password authentication as well as OAuth integration with external providers like Google and Sora2. The service ensures secure user identity verification, token management, and session control while providing a seamless authentication experience across all platform services.\n\n## 2. Objectives\n\n1. Provide secure user registration and login functionality with multiple authentication methods\n2. Implement robust JWT token management with access and refresh token mechanisms\n3. Support OAuth 2.0 integration with external providers (Google, Sora2)\n4. Ensure password security through strong hashing policies and secure reset mechanisms\n5. Implement email verification to validate user identities and prevent fraud\n6. Provide comprehensive session management with token blacklisting capabilities\n7. Enable secure password recovery with time-limited, single-use tokens\n8. Support rate limiting and abuse prevention for all authentication endpoints\n\n## 3. User Stories\n\n### Story 1: User Registration and Email Verification\n\nAs a new user, I want to register for an account with my email and password, so that I can access the Smart AI Hub platform and its features.\n\n**Acceptance Criteria:**\n\n1. Users must register with a valid email address and secure password\n2. Passwords must meet the minimum security requirements (8+ chars, uppercase, number, special)\n3. Users must receive a verification email after successful registration\n4. Users must verify their email address before accessing platform features\n5. Verification tokens must expire after 24 hours for security\n6. Users can request a new verification email if the original expires\n7. Registration must fail gracefully with clear error messages for invalid inputs\n\n### Story 2: User Login and Session Management\n\nAs a registered user, I want to log in to my account securely, so that I can access my personalized features and maintain my session across platform interactions.\n\n**Acceptance Criteria:**\n\n1. Users must log in with their email and password\n2. Successful login must generate access and refresh tokens\n3. Access tokens must expire after 15 minutes for security\n4. Refresh tokens must expire after 7 days for convenience\n5. Users must be able to refresh their access token without re-authentication\n6. Users must be able to log out and invalidate their tokens\n7. Failed login attempts must be rate limited to prevent brute force attacks\n\n### Story 3: OAuth Integration with External Providers\n\nAs a user, I want to authenticate using external providers like Google, so that I can quickly access the platform without creating additional credentials.\n\n**Acceptance Criteria:**\n\n1. Users must be able to authenticate using Google OAuth 2.0\n2. Google authentication must create or link to existing user accounts\n3. Users must be able to connect multiple OAuth providers to their account\n4. OAuth authentication must follow standard OAuth 2.0 flow\n5. User profile information must be securely retrieved from providers\n6. OAuth authentication must generate the same JWT tokens as email/password login\n7. Users must be able to disconnect OAuth providers from their account\n\n### Story 4: Password Reset and Recovery\n\nAs a user, I want to reset my forgotten password securely, so that I can regain access to my account without compromising security.\n\n**Acceptance Criteria:**\n\n1. Users must request password reset with their registered email\n2. Password reset tokens must be sent via email\n3. Reset tokens must expire after 1 hour for security\n4. Reset tokens must be single-use and invalidated after use\n5. New passwords must meet the same security requirements as registration\n6. Users must be logged out from all active sessions after password reset\n7. Users must receive confirmation emails when their password is changed\n\n### Story 5: Sora2 OAuth Integration with Verification Codes\n\nAs a user integrating with Sora2 video generation service, I want to authenticate using verification codes, so that I can securely connect to the video generation platform.\n\n**Acceptance Criteria:**\n\n1. Users must initiate Sora2 OAuth integration through the platform\n2. A unique verification code must be generated and sent via email\n3. Users must verify the code to proceed with OAuth flow\n4. OAuth session must be confirmed with additional parameters\n5. Successful integration must generate appropriate JWT tokens\n6. Integration status must be tracked and displayed to users\n7. Users must be able to revoke Sora2 integration at any time\n\n## 4. Scope\n\n### In Scope\n\n1. User registration with email/password authentication\n2. Email verification for new user accounts\n3. User login with JWT token generation\n4. Access and refresh token management\n5. Token blacklisting for logout and session invalidation\n6. Password reset with secure, time-limited tokens\n7. OAuth 2.0 integration with Google provider\n8. Sora2 OAuth integration with verification codes\n9. Rate limiting on authentication endpoints\n10. Session management and tracking\n\n### Out of Scope\n\n1. User profile management beyond authentication\n2. Role and permission management (handled by authorization service)\n3. Multi-factor authentication (MFA) implementation\n4. Social login providers beyond Google and Sora2\n5. Advanced fraud detection and prevention\n6. User activity analytics and reporting\n7. Account deletion and data retention policies\n8. API key management for programmatic access\n9. SAML or enterprise SSO integration\n10. Biometric authentication methods\n\n## 5. Technical Requirements\n\n### 5.1. Technology Stack\n\n- **Runtime**: Node.js 20 LTS\n- **Framework**: Express.js 4.x\n- **Language**: TypeScript 5.x\n- **Port**: 3001\n- **Authentication**: Passport.js + JWT\n- **Database**: PostgreSQL 15+\n- **Cache**: Redis 7+\n- **Email Service**: SendGrid\n\n### 5.2. Database Schema\n\n#### Users Table\n\n```sql\nCREATE TABLE users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255),\n  verified BOOLEAN DEFAULT FALSE,\n  google_id VARCHAR(255) UNIQUE,\n  sora2_id VARCHAR(255) UNIQUE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n#### Refresh Tokens Table\n\n```sql\nCREATE TABLE refresh_tokens (\n  token VARCHAR(255) PRIMARY KEY,\n  user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n  expires_at TIMESTAMP NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n#### Verification Tokens Table\n\n```sql\nCREATE TABLE verification_tokens (\n  token VARCHAR(255) PRIMARY KEY,\n  user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n  type VARCHAR(50) NOT NULL, -- 'email', 'password', 'sora2'\n  expires_at TIMESTAMP NOT NULL,\n  used BOOLEAN DEFAULT FALSE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 5.3. API Endpoints\n\n#### Authentication Endpoints\n\n```\nPOST /register          // User registration\nPOST /login             // User login\nPOST /logout            // User logout (blacklist token)\nPOST /refresh           // Refresh access token\nPOST /verify-email      // Email verification\nPOST /forgot-password   // Request password reset\nPOST /reset-password    // Reset password\nGET /me                 // Current user info\n```\n\n#### OAuth Endpoints\n\n```\nGET /oauth/google               // Google OAuth initiate\nGET /oauth/google/callback      // Google OAuth callback\nGET /oauth/sora2                // Sora2 OAuth initiate\nPOST /oauth/session/verify      // Verify session code\nPOST /oauth/session/confirm     // Confirm session with parameters\n```\n\n### 5.4. JWT Configuration\n\n```typescript\nconst jwtConfig = {\n  accessToken: {\n    secret: process.env.JWT_SECRET,\n    expiresIn: '15m',\n    algorithm: 'HS256',\n  },\n  refreshToken: {\n    secret: process.env.JWT_REFRESH_SECRET,\n    expiresIn: '7d',\n    algorithm: 'HS256',\n  },\n};\n\n// Token Payload Structure\ninterface JWTPayload {\n  sub: string; // User ID\n  email: string;\n  role: string;\n  iat: number; // Issued at\n  exp: number; // Expiration\n  jti: string; // JWT ID (for revocation)\n}\n```\n\n### 5.5. Security Requirements\n\n1. **Password Security**: Bcrypt hashing with cost factor 12\n2. **Token Security**: JWT tokens with strong secret keys\n3. **Rate Limiting**: Prevent brute force attacks on authentication endpoints\n4. **Email Verification**: Validate user email addresses\n5. **Token Blacklisting**: Invalidate tokens on logout\n6. **CSRF Protection**: Prevent cross-site request forgery\n7. **Session Management**: Track and invalidate user sessions\n\n### 5.6. Password Policy\n\n- Minimum 8 characters\n- At least 1 uppercase letter\n- At least 1 number\n- At least 1 special character\n- Bcrypt cost factor: 12\n- Password history tracking (prevent reuse of last 5 passwords)\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n\n1. Test user registration with valid and invalid inputs\n2. Test password hashing and verification\n3. Test JWT token generation and validation\n4. Test email verification token generation and validation\n5. Test password reset token generation and validation\n6. Test OAuth flow simulation\n7. Test rate limiting functionality\n\n### 6.2. Integration Tests\n\n1. Test complete registration flow with email verification\n2. Test login and token refresh flow\n3. Test password reset flow\n4. Test Google OAuth integration\n5. Test Sora2 OAuth integration with verification codes\n6. Test token blacklisting on logout\n7. Test session management across multiple devices\n\n### 6.3. Security Tests\n\n1. Test SQL injection prevention\n2. Test XSS prevention\n3. Test CSRF protection\n4. Test rate limiting effectiveness\n5. Test token security and encryption\n6. Test password strength enforcement\n7. Test OAuth security implementation\n\n### 6.4. Performance Tests\n\n1. Load testing with high volume of authentication requests\n2. Stress testing beyond expected capacity\n3. Token generation and validation performance\n4. Database query performance under load\n5. Redis cache performance for token blacklisting\n6. Email service performance under high volume\n\n### 6.5. End-to-End Tests\n\n1. Complete user journey from registration to platform access\n2. OAuth authentication flow with external providers\n3. Password recovery flow\n4. Session management across multiple devices\n5. Token refresh and expiration handling\n6. Account security settings management\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n\n1. **PostgreSQL**: Store user data and authentication records\n2. **Redis**: Token blacklist, rate limiting, and session storage\n3. **SendGrid**: Email service for verification and password reset\n4. **Google OAuth 2.0**: Third-party authentication provider\n5. **Sora2 Video API**: OAuth integration for video generation services\n\n### Assumptions\n\n1. PostgreSQL database is available and properly configured\n2. Redis cluster is available for caching and session management\n3. SendGrid service is configured with appropriate templates\n4. Google OAuth application is properly registered\n5. Sora2 OAuth integration is available and documented\n6. Email delivery is reliable and timely\n\n## 8. Non-Functional Requirements\n\n### Availability\n\n- Service must maintain 99.9% uptime\n- Graceful degradation when external dependencies are unavailable\n- Automatic failover and recovery mechanisms\n- Health check endpoints for monitoring\n\n### Performance\n\n- Authentication responses under 200ms\n- Support at least 1000 authentication requests per second\n- Token generation and validation under 10ms\n- Efficient database queries with proper indexing\n\n### Security\n\n- All sensitive data encrypted at rest\n- Secure communication with TLS 1.3\n- Regular security audits and penetration testing\n- Compliance with data protection regulations\n\n### Scalability\n\n- Horizontal scaling through container orchestration\n- Stateless design for easy scaling\n- Efficient resource utilization\n- Auto-scaling based on authentication load\n\n### Maintainability\n\n- Clean, well-documented code following best practices\n- Comprehensive test coverage\n- Modular architecture for easy updates\n- Configuration management for different environments\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - Users can register with email/password and receive verification emails\n   - Users can log in and receive valid JWT tokens\n   - Users can reset their passwords securely\n   - OAuth integration works with Google and Sora2\n   - Token refresh mechanism works seamlessly\n   - Logout properly invalidates tokens\n\n2. **Security Requirements**\n   - Passwords are securely hashed with bcrypt\n   - JWT tokens are properly signed and validated\n   - Rate limiting prevents brute force attacks\n   - Email verification prevents fake accounts\n   - Token blacklisting prevents session hijacking\n\n3. **Performance Requirements**\n   - Authentication responses are under 200ms\n   - System handles 1000+ requests per second\n   - Token operations are efficient\n   - Database queries are optimized\n\n4. **Reliability Requirements**\n   - Service maintains 99.9% uptime\n   - Email delivery is reliable\n   - OAuth providers are accessible\n   - Database connections are stable\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n\n1. **Security Breach**: Compromised authentication could expose all user data\n   - Mitigation: Implement comprehensive security measures and regular audits\n\n2. **Email Service Failure**: Users cannot verify accounts or reset passwords\n   - Mitigation: Implement multiple email providers and fallback mechanisms\n\n3. **OAuth Provider Changes**: External provider API changes could break integration\n   - Mitigation: Implement adapter pattern and stay updated with provider changes\n\n### Medium Priority Risks\n\n1. **Database Performance**: High volume of authentication requests could slow down database\n   - Mitigation: Implement proper indexing, caching, and database optimization\n\n2. **Token Security**: Compromised JWT secrets could allow token forgery\n   - Mitigation: Regular key rotation, strong secret management, and token validation\n\n### Low Priority Risks\n\n1. **Rate Limiting Evasion**: Attackers might bypass rate limiting mechanisms\n   - Mitigation: Implement multiple rate limiting strategies and monitoring\n\n## 11. Timeline and Milestones\n\n### Phase 1: Core Authentication (2 weeks)\n\n- User registration and login implementation\n- JWT token management\n- Email verification system\n- Password reset functionality\n\n### Phase 2: OAuth Integration (2 weeks)\n\n- Google OAuth implementation\n- Sora2 OAuth with verification codes\n- OAuth account linking\n- Session management enhancement\n\n### Phase 3: Security and Performance (2 weeks)\n\n- Security hardening and testing\n- Rate limiting implementation\n- Performance optimization\n- Comprehensive testing\n\n### Phase 4: Deployment and Monitoring (1 week)\n\n- Production deployment\n- Monitoring and alerting setup\n- Documentation completion\n- User acceptance testing\n\n## 12. Sign-off\n\n**Product Owner:** ********\\_******** Date: ****\\_****\n\n**Tech Lead:** ********\\_******** Date: ****\\_****\n\n**QA Lead:** ********\\_******** Date: ****\\_****\n\n**DevOps Lead:** ********\\_******** Date: ****\\_****",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.745Z",
          "updatedAt": "2025-10-15T01:51:18.745Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "auth_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "auth_service references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "auth_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "auth_service references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "core_service",
        "title": "Core Service",
        "type": "user_story",
        "category": "documentation",
        "content": "# Core Service\n\n## 1. Overview\n\nThe Core Service handles the primary business logic of the Smart AI Hub platform, including user management, role-based access control, credit accounting, and usage analytics. It serves as the central hub for managing platform resources and user interactions, providing essential APIs for user operations, credit management, and business logic enforcement. The service ensures data consistency, implements business rules, and maintains the integrity of platform operations through atomic transactions and comprehensive validation.\n\n## 2. Objectives\n\n1. Provide comprehensive user management capabilities with CRUD operations\n2. Implement robust role-based access control (RBAC) with permission hierarchy\n3. Manage user credit accounts with atomic transaction processing\n4. Track and analyze service usage for billing and analytics\n5. Maintain promotional code system for marketing and user acquisition\n6. Integrate with Sora2 video generation service through session-based authentication\n7. Ensure data integrity through proper database transactions and validation\n8. Provide high-performance APIs with caching and optimization strategies\n\n## 3. User Stories\n\n### Story 1: User Profile Management\n\nAs a registered user, I want to view and update my profile information, so that I can maintain accurate personal data and manage my account settings.\n\n**Acceptance Criteria:**\n\n1. Users must be able to view their profile information including email and roles\n2. Users must be able to update their profile information with proper validation\n3. Users must be able to view their credit balance and transaction history\n4. Users must be able to view their usage statistics and limits\n5. Profile updates must be validated and persisted atomically\n6. Users must receive confirmation of successful profile updates\n7. Profile changes must be logged for audit purposes\n\n### Story 2: Credit Balance Management\n\nAs a platform user, I want to check my credit balance and transaction history, so that I can monitor my usage and manage my spending on the platform.\n\n**Acceptance Criteria:**\n\n1. Users must be able to view their current credit balance\n2. Users must be able to view detailed transaction history with pagination\n3. Transaction history must include amount, type, reason, and timestamp\n4. Users must be able to filter transactions by date range and type\n5. Balance updates must be reflected immediately after transactions\n6. Transaction records must be immutable once created\n7. Users must receive low balance alerts when credits are running low\n\n### Story 3: Role and Permission Management\n\nAs an administrator, I want to manage user roles and permissions, so that I can control access to platform features and maintain security.\n\n**Acceptance Criteria:**\n\n1. Administrators must be able to assign roles to users\n2. Role assignments must follow proper hierarchy and validation\n3. Permission changes must take effect immediately\n4. Role assignments must be logged for audit purposes\n5. Users must be able to view their assigned roles and permissions\n6. Role hierarchy must prevent privilege escalation\n7. Permission caching must update when roles change\n\n### Story 4: Promotional Code System\n\nAs a marketing manager, I want to create and manage promotional codes, so that I can attract new users and reward existing customers with credits.\n\n**Acceptance Criteria:**\n\n1. Marketing managers must be able to create promotional codes with specific values\n2. Promotional codes must have expiration dates and usage limits\n3. Users must be able to redeem promotional codes for credits\n4. Redemption attempts must be validated and tracked\n5. Expired or fully used codes must be rejected\n6. Redemption history must be tracked for reporting\n7. Promotional code usage must not exceed allocated limits\n\n### Story 5: Usage Analytics and Reporting\n\nAs a platform administrator, I want to view usage analytics and generate reports, so that I can understand platform utilization and make informed business decisions.\n\n**Acceptance Criteria:**\n\n1. Administrators must be able to view aggregated usage statistics\n2. Reports must be filterable by date range, user, and service type\n3. Usage data must be collected accurately and in real-time\n4. Reports must include credit consumption and transaction metrics\n5. Analytics data must be retained for historical analysis\n6. Report generation must be efficient for large datasets\n7. Export functionality must be available for external analysis\n\n## 4. Scope\n\n### In Scope\n\n1. User profile management with CRUD operations\n2. Role-based access control implementation\n3. Credit account management with atomic transactions\n4. Transaction processing and history tracking\n5. Usage analytics and reporting\n6. Promotional code creation and redemption\n7. Integration with Sora2 video generation service\n8. Database schema management with Prisma ORM\n9. Caching layer with Redis for performance\n10. Audit logging for all data changes\n\n### Out of Scope\n\n1. User authentication and session management (handled by auth-service)\n2. Payment processing for credit purchases\n3. Email notification system for users\n4. Advanced analytics and business intelligence\n5. Machine learning for usage prediction\n6. Multi-tenant architecture with data isolation\n7. Real-time notifications and alerts\n8. File storage and management\n9. API versioning beyond basic implementation\n10. Advanced search and filtering capabilities\n\n## 5. Technical Requirements\n\n### 5.1. Technology Stack\n\n- **Runtime**: Node.js 20 LTS\n- **Framework**: Express.js 4.x\n- **Language**: TypeScript 5.x\n- **Port**: 3002\n- **Database**: PostgreSQL 15+ with Prisma ORM\n- **Cache**: Redis 7+\n\n### 5.2. Database Schema\n\n#### User Model\n\n```typescript\nmodel User {\n  id            String   @id @default(uuid())\n  email         String   @unique\n  passwordHash  String?\n  verified      Boolean  @default(false)\n  googleId      String?  @unique\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  roles         UserRole[]\n  creditAccount CreditAccount?\n  usageLogs     UsageLog[]\n\n  @@index([email])\n  @@map(\"users\")\n}\n```\n\n#### Credit Account Model\n\n```typescript\nmodel CreditAccount {\n  id        String   @id @default(uuid())\n  userId    String   @unique\n  balance   Int      @default(0)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  transactions CreditTransaction[]\n\n  @@index([userId])\n  @@map(\"credit_accounts\")\n}\n```\n\n#### Credit Transaction Model\n\n```typescript\nmodel CreditTransaction {\n  id          String   @id @default(uuid())\n  accountId   String\n  amount      Int\n  type        String   // debit, credit\n  reason      String   // purchase, usage, refund, promo\n  metadata    Json?\n  createdAt   DateTime @default(now())\n\n  account CreditAccount @relation(fields: [accountId], references: [id])\n\n  @@index([accountId, createdAt])\n  @@map(\"credit_transactions\")\n}\n```\n\n### 5.3. Core Business Logic\n\n#### Credit Deduction with Atomic Transactions\n\n```typescript\nasync function deductCredits(\n  userId: string,\n  amount: number,\n  reason: string,\n  metadata?: any\n): Promise<void> {\n  await prisma.$transaction(async (tx) => {\n    // 1. Lock the credit account\n    const account = await tx.creditAccount.findUnique({\n      where: { userId },\n      select: { id: true, balance: true },\n    });\n\n    if (!account) {\n      throw new AppError('ACCOUNT_NOT_FOUND', 'Credit account not found');\n    }\n\n    if (account.balance < amount) {\n      throw new AppError('INSUFFICIENT_CREDITS', 'Not enough credits');\n    }\n\n    // 2. Update balance\n    await tx.creditAccount.update({\n      where: { id: account.id },\n      data: { balance: { decrement: amount } },\n    });\n\n    // 3. Create transaction record\n    await tx.creditTransaction.create({\n      data: {\n        accountId: account.id,\n        amount: -amount,\n        type: 'debit',\n        reason,\n        metadata,\n      },\n    });\n  });\n}\n```\n\n### 5.4. API Endpoints\n\n#### User Management\n\n```\nGET /api/users/profile          // Get current user profile\nPUT /api/users/profile          // Update user profile\nGET /api/users/:id              // Get user by ID (admin only)\nPUT /api/users/:id/roles        // Update user roles (admin only)\n```\n\n#### Credit Management\n\n```\nGET /api/credits/balance        // Get credit balance\nPOST /api/credits/deduct        // Deduct credits\nGET /api/credits/transactions   // Get transaction history\nPOST /api/credits/add           // Add credits (admin only)\n```\n\n#### Promotional Codes\n\n```\nPOST /api/promos/create         // Create promo code (admin only)\nPOST /api/promos/redeem         // Redeem promo code\nGET /api/promos/:id             // Get promo code details\nGET /api/promos/list            // List active promo codes\n```\n\n#### Usage Analytics\n\n```\nGET /api/usage/summary          // Get usage summary\nGET /api/usage/reports          // Generate usage reports\nGET /api/usage/metrics          // Get usage metrics\n```\n\n### 5.5. Security Requirements\n\n1. **RBAC Implementation**: Role-based access control for all endpoints\n2. **Input Validation**: Comprehensive validation for all API inputs\n3. **Audit Logging**: Log all data changes with user context\n4. **SQL Injection Prevention**: Using Prisma ORM for safe queries\n5. **Rate Limiting**: Protect sensitive operations from abuse\n6. **Data Encryption**: Sensitive data encrypted at rest\n\n### 5.6. Performance Requirements\n\n1. **Response Time**: API responses under 200ms for 95% of requests\n2. **Database Optimization**: Efficient queries with proper indexing\n3. **Caching Strategy**: Redis caching for frequently accessed data\n4. **Connection Pooling**: Optimize database connection management\n5. **Pagination**: Efficient pagination for large result sets\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n\n1. Test user profile CRUD operations\n2. Test credit deduction with atomic transactions\n3. Test role assignment and permission validation\n4. Test promotional code creation and redemption\n5. Test usage calculation and aggregation\n6. Test input validation and error handling\n7. Test database transaction rollback scenarios\n\n### 6.2. Integration Tests\n\n1. Test complete user workflow from registration to credit usage\n2. Test credit transaction flow with proper balance updates\n3. Test role-based access control across all endpoints\n4. Test promotional code lifecycle from creation to redemption\n5. Test usage analytics accuracy and reporting\n6. Test database transaction consistency\n7. Test cache invalidation and updates\n\n### 6.3. Performance Tests\n\n1. Load testing with high volume of user operations\n2. Stress testing credit transaction processing\n3. Concurrent user access and transaction handling\n4. Database performance under heavy load\n5. Cache performance and hit ratio testing\n6. API response time benchmarking\n\n### 6.4. Security Tests\n\n1. Test RBAC enforcement across all endpoints\n2. Test input validation against injection attacks\n3. Test privilege escalation prevention\n4. Test audit logging completeness\n5. Test data access controls and permissions\n6. Test authentication bypass attempts\n\n### 6.5. End-to-End Tests\n\n1. Complete user journey with credit usage\n2. Role-based feature access testing\n3. Promotional code redemption workflow\n4. Usage reporting and analytics verification\n5. Multi-user concurrent operations\n6. System integration with other services\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n\n1. **PostgreSQL**: Primary database for data persistence\n2. **Redis**: Caching layer for performance optimization\n3. **Prisma ORM**: Database access and schema management\n4. **Authentication Service**: User verification and token validation\n5. **MCP Server**: Integration for AI model usage tracking\n6. **Payment System**: Credit purchase processing\n\n### Assumptions\n\n1. PostgreSQL database is available and properly configured\n2. Redis cluster is available for caching operations\n3. Authentication service provides reliable user validation\n4. Payment system integration is available for credit purchases\n5. MCP server provides accurate usage data for billing\n6. Network connectivity between services is reliable\n\n## 8. Non-Functional Requirements\n\n### Availability\n\n- Service must maintain 99.9% uptime\n- Graceful degradation when database is unavailable\n- Automatic failover and recovery mechanisms\n- Health check endpoints for monitoring\n\n### Performance\n\n- API responses under 200ms for 95% of requests\n- Support at least 1000 concurrent users\n- Database transactions complete under 100ms\n- Cache hit ratio above 90%\n\n### Security\n\n- All data access properly authorized\n- Sensitive data encrypted at rest\n- Comprehensive audit logging\n- Regular security assessments\n\n### Scalability\n\n- Horizontal scaling through container orchestration\n- Database sharding capability for large datasets\n- Efficient resource utilization\n- Auto-scaling based on load metrics\n\n### Maintainability\n\n- Clean, well-documented code following best practices\n- Comprehensive test coverage\n- Modular architecture for easy updates\n- Configuration management for different environments\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - User profile management works correctly\n   - Credit transactions are processed atomically\n   - Role-based access control is properly enforced\n   - Promotional codes work as designed\n   - Usage analytics provide accurate insights\n\n2. **Performance Requirements**\n   - API responses are under 200ms\n   - Database operations are efficient\n   - Caching improves performance significantly\n   - System handles expected load\n\n3. **Security Requirements**\n   - Access control is properly enforced\n   - Data changes are audited\n   - Input validation prevents attacks\n   - Sensitive data is protected\n\n4. **Reliability Requirements**\n   - Service maintains high availability\n   - Data consistency is preserved\n   - Error handling is comprehensive\n   - Monitoring provides visibility\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n\n1. **Data Corruption**: Concurrent credit transactions could lead to inconsistency\n   - Mitigation: Implement proper database transactions and locking\n\n2. **Performance Bottlenecks**: High volume of transactions could slow down the system\n   - Mitigation: Implement caching, optimization, and horizontal scaling\n\n3. **Security Breaches**: Unauthorized access could compromise user data\n   - Mitigation: Implement comprehensive security measures and regular audits\n\n### Medium Priority Risks\n\n1. **Database Failure**: Database unavailability could affect all operations\n   - Mitigation: Implement database replication and failover mechanisms\n\n2. **Cache Inconsistency**: Cache invalidation issues could serve stale data\n   - Mitigation: Implement proper cache invalidation strategies\n\n### Low Priority Risks\n\n1. **Reporting Accuracy**: Complex analytics queries could have performance issues\n   - Mitigation: Implement data warehousing for analytics queries\n\n## 11. Timeline and Milestones\n\n### Phase 1: Core Implementation (3 weeks)\n\n- User management APIs\n- Credit management system\n- Role-based access control\n- Basic database schema\n\n### Phase 2: Business Logic (2 weeks)\n\n- Transaction processing\n- Promotional code system\n- Usage tracking\n- Performance optimization\n\n### Phase 3: Analytics and Reporting (2 weeks)\n\n- Usage analytics implementation\n- Reporting system\n- Performance tuning\n- Comprehensive testing\n\n### Phase 4: Integration and Deployment (1 week)\n\n- Service integration testing\n- Production deployment\n- Monitoring setup\n- Documentation completion\n\n## 12. Sign-off\n\n**Product Owner:** ********\\_******** Date: ****\\_****\n\n**Tech Lead:** ********\\_******** Date: ****\\_****\n\n**QA Lead:** ********\\_******** Date: ****\\_****\n\n**DevOps Lead:** ********\\_******** Date: ****\\_****",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.745Z",
          "updatedAt": "2025-10-15T01:51:18.745Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "core_service references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "core_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "core_service references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "core_service references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "core_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "core_service references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "credit_account",
        "title": "Credit Account Management System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Credit Account Management System\n\n## 1. ภาพรวม (Overview)\n\nระบบจัดการบัญชีเครดิต (Credit Account Management System) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับจัดการยอดเงินเครดิตของผู้ใช้ ระบบนี้ทำงานร่วมกับระบบการชำระเงินผ่าน Stripe และรองรับการเติมเงิน การใช้งาน และการติดตามประวัติการทำรายการของผู้ใช้\n\nระบบนี้ทำงานโดยสร้างบัญชีเครดิตสำหรับผู้ใช้แต่ละคน เพื่อเก็บยอดเงินคงเหลือ ประวัติการทำรายการ และการใช้งานบริการต่างๆ ภายในแพลตฟอร์ม บัญชีเครดิตเป็นส่วนสำคัญในการควบคุมการเข้าถึงและการใช้งานบริการของ Smart AI Hub\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถจัดการยอดเงินเครดิตของผู้ใช้ได้อย่างปลอดภัย\n- รองรับการเติมเงินผ่านระบบการชำระเงินต่างๆ\n- ป้องกันการฉ้อโกงและการใช้งานโดยไม่ได้รับอนุญาต\n- อำนวยความสะดวกในการติดตามประวัติการทำรายการ\n- รองรับการใช้โปรโมชั่นและส่วนลดต่างๆ\n- ทำงานร่วมกับระบบการชำระเงินอย่างมีประสิทธิภาพ\n- ลดความซับซ้อนในการจัดการการเงินของผู้ใช้\n\n## 3. User Stories\n\n### Story 1: ผู้ใช้เติมเงินเข้าบัญชีเครดิต\n\n**ในฐานะ** ผู้ใช้งาน  \n**ฉันต้องการ** เติมเงินเข้าบัญชีเครดิตของฉัน  \n**เพื่อที่จะ** ใช้บริการต่างๆ ภายในแพลตฟอร์ม Smart AI Hub\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอเติมเงินต้องมีช่องกรอกจำนวนเงิน\n- [ ] ต้องมีตัวเลือกช่องทางการชำระเงิน (บัตรเครดิต, โอนเงิน)\n- [ ] ต้องมีการแสดงยอดเงินคงเหลือปัจจุบัน\n- [ ] เมื่อชำระเงินสำเร็จ ต้องมีการอัปเดตยอดเงินในบัญชี\n- [ ] ต้องมีการแสดงประวัติการเติมเงิน\n- [ ] ต้องมีการแจ้งเตือนเมื่อเติมเงินสำเร็จ\n- [ ] ต้องมีการบันทึกการทำรายการในระบบ\n\n### Story 2: ผู้ใช้ตรวจสอบยอดเงินคงเหลือและประวัติการใช้งาน\n\n**ในฐานะ** ผู้ใช้งาน  \n**ฉันต้องการ** ตรวจสอบยอดเงินคงเหลือและประวัติการใช้งาน  \n**เพื่อที่จะ** ติดตามการใช้จ่ายเครดิตของฉัน\n\n**Acceptance Criteria:**\n\n- [ ] หน้า Dashboard ต้องแสดงยอดเงินคงเหลือปัจจุบัน\n- [ ] ต้องมีหน้าจอสำหรับดูประวัติการทำรายการ\n- [ ] ต้องสามารถกรองประวัติการทำรายการตามช่วงเวลา\n- [ ] ต้องแสดงรายละเอียดของแต่ละรายการ (วันที่, จำนวนเงิน, ประเภท)\n- [ ] ต้องมีการแสดงกราฟสรุปการใช้งาน\n- [ ] ต้องสามารถส่งออกข้อมูลประวัติการทำรายการได้\n- [ ] ต้องมีการแจ้งเตือนเมื่อยอดเงินใกล้หมด\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การสร้างและจัดการบัญชีเครดิต (Credit Account Creation and Management)\n- การเติมเงินเข้าบัญชี (Credit Top-up)\n- การตรวจสอบยอดเงินคงเหลือ (Balance Checking)\n- การดึงข้อมูลประวัติการทำรายการ (Transaction History)\n- การใช้เครดิตสำหรับบริการต่างๆ (Credit Usage)\n- การจัดการโปรโมชั่นและส่วนลด (Promotion and Discount Management)\n- การบันทึกและติดตามการทำรายการ (Transaction Logging)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการบัญชีธนาคารโดยตรง (Direct Bank Account Management)\n- การกู้ยืมเครดิต (Credit Loans)\n- การจัดการดอกเบี้ย (Interest Management)\n- การจัดการบัตรเครดิตโดยตรง (Direct Credit Card Management)\n- การโอนเงินระหว่างผู้ใช้ (Peer-to-Peer Transfers)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                                     | Description                   | Request Body                                 | Response                          |\n| ------ | -------------------------------------------- | ----------------------------- | -------------------------------------------- | --------------------------------- |\n| GET    | `/api/credit/accounts/:userId`               | ดึงข้อมูลบัญชีเครดิตของผู้ใช้ | -                                            | `{ creditAccount }`               |\n| POST   | `/api/credit/accounts/:userId/topup`         | เติมเงินเข้าบัญชี             | `{ amount, paymentMethod }`                  | `{ transaction, updatedBalance }` |\n| GET    | `/api/credit/accounts/:userId/transactions`  | ดึงประวัติการทำรายการ         | Query: `{ page, limit, startDate, endDate }` | `{ transactions, total }`         |\n| POST   | `/api/credit/accounts/:userId/use`           | ใช้เครดิตสำหรับบริการ         | `{ amount, description, serviceId }`         | `{ transaction, updatedBalance }` |\n| GET    | `/api/credit/accounts/:userId/balance`       | ตรวจสอบยอดเงินคงเหลือ         | -                                            | `{ balance }`                     |\n| POST   | `/api/credit/accounts/:userId/promo/apply`   | ใช้โปรโมชั่น                  | `{ promoCode }`                              | `{ discount, updatedBalance }`    |\n| GET    | `/api/credit/accounts/:userId/usage-summary` | ดึงสรุปการใช้งาน              | Query: `{ period }`                          | `{ summary }`                     |\n\n### 5.2 Database Schema\n\n```prisma\nmodel CreditAccount {\n  id            String   @id @default(uuid())\n  userId        String   @unique\n  balance       Int      @default(0) // เก็บเป็นหน่วยเงินที่เล็กที่สุด (เช่น สตางค์)\n  currency      String   @default(\"THB\")\n  status        String   @default(\"active\") // active, suspended, closed\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  transactions  CreditTransaction[]\n  promoRedemptions PromoRedemption[]\n\n  @@index([userId])\n  @@index([status])\n  @@map(\"credit_accounts\")\n}\n```\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนเข้าถึงข้อมูลบัญชีเครดิต\n- ต้องมีการตรวจสอบสิทธิ์ก่อนทำรายการทางการเงิน\n- ต้องมีการบันทึกการทำรายการทั้งหมดในระบบ Audit Log\n- ต้องป้องกันการทำรายการที่ผิดกฎหมายหรือฉ้อโกง\n- ต้องมีการตรวจสอบข้อมูลก่อนทำรายการ\n- ต้องมีการจำกัดจำนวนเงินในการทำรายการ\n\n### 5.4 Frontend Requirements\n\n- มีหน้าจอสำหรับแสดงยอดเงินคงเหลือ\n- มีหน้าจอสำหรับเติมเงิน\n- มีหน้าจอสำหรับดูประวัติการทำรายการ\n- มีการแสดงกราฟสรุปการใช้งาน\n- มีการตรวจสอบสิทธิ์ก่อนแสดงข้อมูลการเงิน\n- มีการแจ้งเตือนเมื่อมีการทำรายการ\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการสร้างบัญชีเครดิต\n- [ ] ทดสอบการเติมเงินเข้าบัญชี\n- [ ] ทดสอบการใช้เครดิต\n- [ ] ทดสอบการตรวจสอบยอดเงินคงเหลือ\n- [ ] ทดสอบการดึงประวัติการทำรายการ\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบการชำระเงิน (Stripe)\n- [ ] ทดสอบการทำงานร่วมกับระบบโปรโมชั่น\n- [ ] ทดสอบการทำงานร่วมกับระบบผู้ใช้\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการเติมเงินผ่าน UI\n- [ ] ทดสอบการตรวจสอบยอดเงินคงเหลือ\n- [ ] ทดสอบการดูประวัติการทำรายการ\n- [ ] ทดสอบการใช้เครดิตสำหรับบริการ\n- [ ] ทดสอบการใช้โปรโมชั่น\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ระบบต้องการ PostgreSQL Database สำหรับจัดเก็บข้อมูลบัญชีเครดิต\n- ต้องมีระบบ User Management ที่ทำงานได้เต็มรูปแบบ\n- ต้องมีระบบการชำระเงินผ่าน Stripe\n- ต้องมีระบบจัดการโปรโมชั่น\n- ต้องมีระบบติดตามการทำรายการ\n\n### 7.2 Assumptions\n\n- ผู้ใช้ต้องล็อกอินเข้าสู่ระบบก่อนทำการกระทำใดๆ\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- การทำรายการทางการเงินจะถูกบันทึกทั้งหมด\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบยอดเงินต้องทำงานได้ภายใน **100ms** (P95)\n- การทำรายการต้องเสร็จภายใน **500ms**\n- รองรับการทำรายการได้อย่างน้อย **100 รายการต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีการ Backup ข้อมูลบัญชีเครดิตทุกวัน\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลทางการเงินที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการฉ้อโกง\n- ต้องมีการบันทึกการทำรายการทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                       | Impact   | Probability | Mitigation Strategy                                  |\n| -------------------------- | -------- | ----------- | ---------------------------------------------------- |\n| Payment Processing Failure | High     | Medium      | มีระบบ Retry และ Rollback การทำรายการอัตโนมัติ       |\n| Account Balance Mismatch   | Critical | Low         | ใช้ Database Transaction และมีการตรวจสอบความสอดคล้อง |\n| Fraudulent Transactions    | High     | Medium      | มีระบบตรวจสอบพฤติกรรมการใช้งานที่ผิดปกติ             |\n| Performance Issues         | Medium   | Low         | ใช้ Database Indexing และ Cache ข้อมูลที่ใช้บ่อย     |\n\n## 10. Timeline และ Milestones\n\n| Milestone               | Target Date | Status      |\n| ----------------------- | ----------- | ----------- |\n| Database Schema Design  | 2025-10-16  | Not Started |\n| Backend API Development | 2025-10-18  | Not Started |\n| Payment Integration     | 2025-10-20  | Not Started |\n| Frontend Integration    | 2025-10-22  | Not Started |\n| Testing                 | 2025-10-24  | Not Started |\n| Production Deployment   | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.746Z",
          "updatedAt": "2025-10-15T01:51:18.746Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "credit_account references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "credit_account references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_1",
        "title": "Multi-method Authentication System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Multi-method Authentication System\n\n## 1. ภาพรวม (Overview)\n\nระบบ Multi-method Authentication เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ทำหน้าที่ในการตรวจสอบสิทธิ์ผู้ใช้ผ่านหลายวิธีเพื่อให้มั่นใจในความปลอดภัยและความสะดวกในการเข้าใช้งาน ระบบนี้รองรับการล็อกอินผ่าน Google OAuth 2.0 อีเมลและรหัสผ่าน พร้อมทั้งมีระบบยืนยันตัวตนและการรีเซ็ตรหัสผ่านที่ปลอดภัย\n\nระบบนี้ทำงานโดยใช้ JWT Token สำหรับการจัดการ Session โดยมี Access Token ที่มีอายุสั้น 15 นาที และ Refresh Token ที่มีอายุ 7 วัน นอกจากนี้ยังมีแผนที่จะรองรับ Multi-Factor Authentication (MFA) ใน Phase 2 เพื่อเพิ่มความปลอดภัยให้สูงขึ้น\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถตรวจสอบสิทธิ์ผู้ใช้ได้อย่างปลอดภัย\n- รองรับวิธีการเข้าสู่ระบบที่หลากหลาย\n- ป้องกันการเข้าถึงโดยไม่ได้รับอนุญาต\n- อำนวยความสะดวกในการจัดการบัญชีผู้ใช้\n- รับประกันอัตราการสำเร็จในการล็อกอินสูง\n- ให้มีความสามารถในการกู้คืนบัญชีได้อย่างรวดเร็ว\n- รองรับการขยายตัวเพื่อเพิ่มวิธีการตรวจสอบสิทธิ์ในอนาคต\n\n## 3. User Stories\n\n### Story 1: ผู้ใช้ลงทะเบียนและเข้าสู่ระบบ\n\n**ในฐานะ** ผู้ใช้ใหม่  \n**ฉันต้องการ** ลงทะเบียนและเข้าสู่ระบบด้วยวิธีที่ง่ายและปลอดภัย  \n**เพื่อที่จะ** เริ่มใช้งานบริการของ Smart AI Hub\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอลงทะเบียนที่ชัดเจนและเข้าใจง่าย\n- [ ] ต้องรองรับการลงทะเบียนด้วย Google OAuth 2.0\n- [ ] ต้องรองรับการลงทะเบียนด้วยอีเมลและรหัสผ่าน\n- [ ] ต้องมีการยืนยันอีเมลด้วย OTP 6 หลัก\n- [ ] ต้องมีการเข้ารหัสรหัสผ่านด้วย BCRYPT (cost factor: 12)\n- [ ] ต้องมีการตรวจสอบความแข็งแรงของรหัสผ่าน\n- [ ] ต้องมีการแจ้งเตือนเมื่อลงทะเบียนสำเร็จ\n\n### Story 2: ผู้ใช้เข้าสู่ระบบและจัดการ Session\n\n**ในฐานะ** ผู้ใช้ที่มีบัญชีอยู่แล้ว  \n**ฉันต้องการ** เข้าสู่ระบบและรักษาสถานะการล็อกอินไว้  \n**เพื่อที่จะ** ใช้งานบริการต่างๆ ได้อย่างต่อเนื่อง\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอล็อกอินที่รองรับทุกวิธีการ\n- [ ] ต้องมีการจัดการ Session ด้วย JWT Token\n- [ ] ต้องมี Access Token ที่หมดอายุภายใน 15 นาที\n- [ ] ต้องมี Refresh Token ที่หมดอายุภายใน 7 วัน\n- [ ] ต้องมีการ Refresh Token อัตโนมัติ\n- [ ] ต้องมีการออกจากระบบที่ปลอดภัย\n- [ ] ต้องมีการจดจำการล็อกอิน (Remember Me)\n\n### Story 3: ผู้ใช้รีเซ็ตรหัสผ่าน\n\n**ในฐานะ** ผู้ใช้ที่ลืมรหัสผ่าน  \n**ฉันต้องการ** รีเซ็ตรหัสผ่านของฉันอย่างปลอดภัย  \n**เพื่อที่จะ** กลับเข้าใช้งานบัญชีของฉันได้อีกครั้ง\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอขอรีเซ็ตรหัสผ่าน\n- [ ] ต้องมีการส่งลิงก์รีเซ็ตไปยังอีเมลผู้ใช้\n- [ ] ลิงก์รีเซ็ตต้องมี Token ที่ปลอดภัยและมีอายุจำกัด\n- [ ] ต้องมีการตรวจสอบ Token ก่อนอนุญาตให้รีเซ็ตรหัสผ่าน\n- [ ] ต้องมีการตรวจสอบความแข็งแรงของรหัสผ่านใหม่\n- [ ] ต้องมีการแจ้งเตือนเมื่อรีเซ็ตรหัสผ่านสำเร็จ\n- [ ] ต้องมีการบันทึกประวัติการรีเซ็ตรหัสผ่าน\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การลงทะเบียนผู้ใช้ (User Registration)\n- การเข้าสู่ระบบ (User Login)\n- การยืนยันตัวตน (Email Verification)\n- การรีเซ็ตรหัสผ่าน (Password Reset)\n- การจัดการ Session (Session Management)\n- การเชื่อมต่อ OAuth 2.0 (OAuth Integration)\n- การเข้ารหัสรหัสผ่าน (Password Encryption)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การตรวจสอบสิทธิ์แบบ Multi-Factor (MFA)\n- การเชื่อมต่อ Social Media อื่นๆ (Other Social Logins)\n- การจัดการ Single Sign-On (SSO)\n- การตรวจสอบสิทธิ์แบบ Biometric (Biometric Auth)\n- การจัดการ Identity Provider ภายนอก (External IdP)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                    | Description         | Request Body                | Response           |\n| ------ | --------------------------- | ------------------- | --------------------------- | ------------------ |\n| POST   | `/api/auth/register`        | ลงทะเบียนผู้ใช้ใหม่ | `{ email, password, name }` | `{ user, tokens }` |\n| POST   | `/api/auth/login`           | เข้าสู่ระบบ         | `{ email, password }`       | `{ user, tokens }` |\n| POST   | `/api/auth/oauth/google`    | ล็อกอินด้วย Google  | `{ token }`                 | `{ user, tokens }` |\n| POST   | `/api/auth/verify-email`    | ยืนยันอีเมล         | `{ email, otp }`            | `{ success }`      |\n| POST   | `/api/auth/forgot-password` | ขอรีเซ็ตรหัสผ่าน    | `{ email }`                 | `{ success }`      |\n| POST   | `/api/auth/reset-password`  | รีเซ็ตรหัสผ่าน      | `{ token, password }`       | `{ success }`      |\n| POST   | `/api/auth/refresh`         | Refresh Token       | `{ refreshToken }`          | `{ tokens }`       |\n| POST   | `/api/auth/logout`          | ออกจากระบบ          | `{ refreshToken }`          | `{ success }`      |\n\n### 5.2 Authentication Flow\n\n#### Registration Flow:\n\n1. User ส่งข้อมูลการลงทะเบียน (email, password, name)\n2. Server ตรวจสอบความถูกต้องของข้อมูล\n3. Server เข้ารหัสรหัสผ่านด้วย BCRYPT (cost factor: 12)\n4. Server สร้างบัญชีผู้ใช้ใหม่\n5. Server ส่ง OTP 6 หลักไปยังอีเมลผู้ใช้ (อายุ 15 นาที)\n6. User ยืนยันอีเมลด้วย OTP\n7. Server สร้าง JWT Tokens และส่งกลับให้ User\n\n#### Login Flow:\n\n1. User ส่งข้อมูลล็อกอิน (email, password หรือ Google token)\n2. Server ตรวจสอบข้อมูลประจำตัว\n3. Server สร้าง JWT Tokens (Access 15min, Refresh 7 days)\n4. Server ส่ง Tokens กลับให้ User\n5. Client เก็บ Tokens ไว้ใน localStorage/HttpOnly cookies\n\n### 5.3 Security Requirements\n\n- รหัสผ่านต้องถูกเข้ารหัสด้วย BCRYPT (cost factor: 12)\n- JWT Tokens ต้องมีการเซ็นด้วย Private Key ที่ปลอดภัย\n- OTP ต้องมีอายุ 15 นาทีและใช้ได้ครั้งเดียว\n- Password reset tokens ต้องมีอายุ 1 ชั่วโมง\n- ต้องมีการจำกัดความพยายามในการล็อกอิน (5 ครั้งต่อ 15 นาที)\n- ต้องมีการบันทึกการเข้าสู่ระบบในระบบ Audit Log\n- ต้องมีการป้องกันการโจมตีแบบ Brute Force และ Dictionary Attack\n\n### 5.4 Password Requirements\n\n- ความยาวอย่างน้อย 8 ตัวอักษร\n- ต้องมีตัวอักษรพิมพ์ใหญ่อย่างน้อย 1 ตัว\n- ต้องมีตัวอักษรพิมพ์เล็กอย่างน้อย 1 ตัว\n- ต้องมีตัวเลขอย่างน้อย 1 ตัว\n- ต้องมีอักขระพิเศษอย่างน้อย 1 ตัว\n- ต้องไม่ซ้ำกับรหัสผ่านเก่า 3 รหัสล่าสุด\n- ต้องไม่มีในรายการรหัสผ่านที่ห้ามใช้ (common passwords)\n\n### 5.5 Frontend Requirements\n\n- มีหน้าจอลงทะเบียนที่ตอบสนองและใช้งานง่าย\n- มีหน้าจอล็อกอินที่รองรับทุกวิธีการ\n- มีหน้าจอยืนยันอีเมลและรีเซ็ตรหัสผ่าน\n- มีการตรวจสอบความถูกต้องของข้อมูลในฝั่ง Client\n- มีการแสดงความแข็งแรงของรหัสผ่านแบบ Real-time\n- มีการจัดการ Session อัตโนมัติ\n- รองรับการแสดงข้อมูลบนอุปกรณ์พกพา\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการเข้ารหัสและตรวจสอบรหัสผ่าน\n- [ ] ทดสอบการสร้างและตรวจสอบ JWT Tokens\n- [ ] ทดสอบการสร้างและตรวจสอบ OTP\n- [ ] ทดสอบการตรวจสอบความแข็งแรงของรหัสผ่าน\n- [ ] ทดสอบการสร้างและตรวจสอบ Password Reset Tokens\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับ Google OAuth 2.0\n- [ ] ทดสอบการทำงานร่วมกับระบบส่งอีเมล\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการลงทะเบียนผู้ใช้ใหม่ผ่าน UI\n- [ ] ทดสอบการเข้าสู่ระบบผ่าน UI\n- [ ] ทดสอบการยืนยันอีเมลผ่าน UI\n- [ ] ทดสอบการรีเซ็ตรหัสผ่านผ่าน UI\n- [ ] ทดสอบการเข้าสู่ระบบด้วย Google OAuth ผ่าน UI\n\n### 6.4 Performance Tests\n\n- [ ] ทดสอบการล็อกอินได้ 100 ครั้งต่อวินาที\n- [ ] ทดสอบการตอบกลับภายใน 200ms สำหรับการล็อกอิน\n- [ ] ทดสอบการลงทะเบียนได้ 50 ครั้งต่อวินาที\n- [ ] ทดสอบการส่ง OTP ภายใน 5 วินาที\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมี Google OAuth 2.0 Credentials\n- ต้องมีระบบส่งอีเมล (Email Service)\n- ต้องมีระบบฐานข้อมูลสำหรับเก็บข้อมูลผู้ใช้\n- ต้องมีระบบจัดการ Session และ Tokens\n\n### 7.2 Assumptions\n\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- ผู้ใช้มีอีเมลที่ถูกต้องและสามารถเข้าถึงได้\n- ระบบส่งอีเมลมีความเชื่อถือได้และส่งข้อความถึงผู้รับภายใน 5 นาที\n- ผู้ใช้มีความรู้เบื้องต้นเกี่ยวกับการใช้รหัสผ่านที่ปลอดภัย\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การล็อกอินต้องทำงานได้ภายใน **200ms**\n- ต้องรองรับการล็อกอินได้อย่างน้อย **100 ครั้งต่อวินาที**\n- การส่ง OTP ต้องทำงานภายใน **5 วินาที**\n- การลงทะเบียนต้องทำงานได้ภายใน **500ms**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบสำรองข้อมูลผู้ใช้\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องมีการป้องกันการโจมตีทั่วไป\n- ต้องมีการบันทึกการเข้าสู่ระบบทั้งหมด\n\n## 9. Success Metrics\n\n- อัตราการสำเร็จในการลงทะเบียน > 70%\n- อัตราการสำเร็จในการล็อกอิน > 99%\n- เวลาในการยืนยันอีเมลภายใน 5 นาที\n- กระบวนการรีเซ็ตรหัสผ่านภายใน 3 นาที\n- จำนวนความพยายามในการล็อกอินที่ล้มเหลว < 1% ของการล็อกอินทั้งหมด\n\n## 10. Risks และ Mitigation\n\n| Risk                       | Impact   | Probability | Mitigation Strategy                      |\n| -------------------------- | -------- | ----------- | ---------------------------------------- |\n| Password Security Breaches | Critical | Medium      | มีการเข้ารหัสที่แข็งแกร่งและการแจ้งเตือน |\n| Email Delivery Failures    | High     | Low         | มีระบบสำรองสำหรับการส่งอีเมล             |\n| OAuth Provider Issues      | Medium   | Low         | มีทางเลือกอื่นในการล็อกอิน               |\n| Brute Force Attacks        | High     | Medium      | มีการจำกัดความพยายามและการแจ้งเตือน      |\n\n## 11. Timeline และ Milestones\n\n| Milestone                 | Target Date | Status      |\n| ------------------------- | ----------- | ----------- |\n| Authentication API        | 2025-10-16  | Not Started |\n| Email Verification System | 2025-10-18  | Not Started |\n| Password Reset System     | 2025-10-20  | Not Started |\n| Google OAuth Integration  | 2025-10-22  | Not Started |\n| Testing                   | 2025-10-24  | Not Started |\n| Production Deployment     | 2025-10-26  | Not Started |\n\n## 12. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.748Z",
          "updatedAt": "2025-10-15T01:51:18.748Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_1 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_1 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_2",
        "title": "Role-Based Access Control (RBAC) System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Role-Based Access Control (RBAC) System\n\n## 1. ภาพรวม (Overview)\n\nระบบ Role-Based Access Control (RBAC) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ทำหน้าที่ในการจัดการสิทธิ์การเข้าถึงทรัพยากรต่างๆ ภายในระบบ ระบบนี้อนุญาตให้ผู้ดูแลระบบสามารถกำหนดสิทธิ์การใช้งานให้กับผู้ใช้ได้อย่างยืดหยุ่นผ่านการจัดกลุ่มผู้ใช้ตามบทบาท (Role) และการกำหนดสิทธิ์ (Permission) ให้กับแต่ละบทบาท\n\nระบบนี้ทำงานโดยใช้โครงสร้างลำดับชั้นของบทบาท (Role Hierarchy) และการสืบทอดสิทธิ์ (Permission Inheritance) ทำให้การจัดการสิทธิ์การเข้าถึงเป็นไปอย่างมีประสิทธิภาพและสอดคล้องกับหลักการของ Principle of Least Privilege\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถจัดการสิทธิ์การเข้าถึงทรัพยากรได้อย่างมีประสิทธิภาพ\n- ป้องกันการเข้าถึงทรัพยากรโดยไม่ได้รับอนุญาต\n- รองรับการจัดการสิทธิ์แบบ Role-based ที่ยืดหยุ่น\n- อำนวยความสะดวกในการตรวจสอบและติดตามสิทธิ์การเข้าถึง\n- ลดความซับซ้อนในการจัดการสิทธิ์ของผู้ใช้จำนวนมาก\n- รองรับการเปลี่ยนแปลงโครงสร้างองค์กรได้อย่างรวดเร็ว\n- ให้สอดคล้องกับมาตรฐานความปลอดภัยและการปฏิบัติตามกฎระเบียบ\n\n## 3. User Stories\n\n### Story 1: ผู้ดูแลระบบจัดการบทบาทและสิทธิ์\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** สร้าง แก้ไข และลบบทบาทพร้อมสิทธิ์ที่เกี่ยวข้อง  \n**เพื่อที่จะ** ควบคุมการเข้าถึงทรัพยากรของระบบได้อย่างมีประสิทธิภาพ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอสำหรับจัดการบทบาท (Role Management)\n- [ ] ต้องสามารถสร้างบทบาทใหม่ได้\n- [ ] ต้องสามารถกำหนดชื่อและคำอธิบายบทบาทได้\n- [ ] ต้องสามารถกำหนดสิทธิ์ให้กับบทบาทได้\n- [ ] ต้องสามารถแก้ไขและลบบทบาทได้\n- [ ] ต้องมีการแสดงลำดับชั้นของบทบาท\n- [ ] ต้องมีการตรวจสอบสิทธิ์ก่อนทำการเปลี่ยนแปลง\n\n### Story 2: ผู้ดูแลระบบกำหนดบทบาทให้ผู้ใช้\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** กำหนดบทบาทให้กับผู้ใช้แต่ละคน  \n**เพื่อที่จะ** ควบคุมการเข้าถึงของผู้ใช้ตามหน้าที่ความรับผิดชอบ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอสำหรับจัดการผู้ใช้และบทบาท\n- [ ] ต้องสามารถกำหนดบทบาทให้กับผู้ใช้ได้\n- [ ] ต้องสามารถเปลี่ยนบทบาทของผู้ใช้ได้\n- [ ] ต้องสามารถกำหนดบทบาทได้หลายบทบาทต่อผู้ใช้\n- [ ] ต้องแสดงประวัติการเปลี่ยนแปลงบทบาทของผู้ใช้\n- [ ] ต้องมีการตรวจสอบสิทธิ์ก่อนทำการเปลี่ยนแปลง\n- [ ] ต้องมีการแจ้งเตือนเมื่อมีการเปลี่ยนแปลงบทบาท\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การจัดการบทบาท (Role Management)\n- การจัดการสิทธิ์ (Permission Management)\n- การกำหนดบทบาทให้ผู้ใช้ (User Role Assignment)\n- การตรวจสอบสิทธิ์การเข้าถึง (Access Control)\n- การจัดการลำดับชั้นของบทบาท (Role Hierarchy)\n- การสืบทอดสิทธิ์ (Permission Inheritance)\n- การตรวจสอบและติดตามการเข้าถึง (Audit Trail)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการสิทธิ์แบบ Attribute-based (ABAC)\n- การจัดการสิทธิ์แบบ Dynamic ตามเวลา\n- การจัดการสิทธิ์แบบ Context-aware\n- การจัดการสิทธิ์แบบ Delegation\n- การจัดการสิทธิ์แบบ Just-in-time (JIT)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                       | Description             | Request Body                         | Response          |\n| ------ | ------------------------------ | ----------------------- | ------------------------------------ | ----------------- |\n| GET    | `/api/roles`                   | ดึงรายการบทบาททั้งหมด   | Query: `{ page, limit, search }`     | `{ roles }`       |\n| POST   | `/api/roles`                   | สร้างบทบาทใหม่          | `{ name, description, permissions }` | `{ role }`        |\n| GET    | `/api/roles/:id`               | ดึงข้อมูลบทบาท          | -                                    | `{ role }`        |\n| PUT    | `/api/roles/:id`               | แก้ไขบทบาท              | `{ name, description, permissions }` | `{ role }`        |\n| DELETE | `/api/roles/:id`               | ลบบทบาท                 | -                                    | `{ success }`     |\n| GET    | `/api/permissions`             | ดึงรายการสิทธิ์ทั้งหมด  | Query: `{ resource }`                | `{ permissions }` |\n| GET    | `/api/users/:id/roles`         | ดึงบทบาทของผู้ใช้       | -                                    | `{ roles }`       |\n| POST   | `/api/users/:id/roles`         | กำหนดบทบาทให้ผู้ใช้     | `{ roleIds }`                        | `{ success }`     |\n| DELETE | `/api/users/:id/roles/:roleId` | ลบบทบาทของผู้ใช้        | -                                    | `{ success }`     |\n| POST   | `/api/check-permission`        | ตรวจสอบสิทธิ์การเข้าถึง | `{ userId, resource, action }`       | `{ allowed }`     |\n\n### 5.2 Role Hierarchy\n\n```\nSuper Admin (Level 5)\n├── Admin (Level 4)\n│   ├── Manager (Level 3)\n│   │   ├── User (Level 2)\n│   │   │   └── Guest (Level 1)\n│   │   └── [Custom Roles Level 3]\n│   └── [Custom Roles Level 4]\n└── [Custom Roles Level 5]\n```\n\n### 5.3 Default Permissions\n\n| Resource      | Action | Super Admin | Admin | Manager | User | Guest   |\n| ------------- | ------ | ----------- | ----- | ------- | ---- | ------- |\n| Dashboard     | read   | ✓           | ✓     | ✓       | ✓    | ✓       |\n| AI Services   | use    | ✓           | ✓     | ✓       | ✓    | Limited |\n| Users         | read   | ✓           | ✓     | Team    | Self | Self    |\n| Users         | create | ✓           | ✓     | Team    | -    | -       |\n| Users         | update | ✓           | ✓     | Team    | Self | -       |\n| Users         | delete | ✓           | ✓     | -       | -    | -       |\n| Credits       | read   | ✓           | ✓     | Team    | Self | Self    |\n| Credits       | adjust | ✓           | ✓     | Team    | -    | -       |\n| Roles         | read   | ✓           | ✓     | -       | -    | -       |\n| Roles         | manage | ✓           | -     | -       | -    | -       |\n| System Config | read   | ✓           | ✓     | -       | -    | -       |\n| System Config | update | ✓           | -     | -       | -    | -       |\n\n### 5.4 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนเข้าถึงทรัพยากรทุกครั้ง\n- ต้องมีการเข้ารหัสข้อมูลสิทธิ์ที่ละเอียดอ่อน\n- ต้องมีการบันทึกการตรวจสอบสิทธิ์ในระบบ Audit Log\n- ต้องมีการตรวจสอบความถูกต้องของคำขอ\n- ต้องมีการป้องกันการเข้าถึงโดยไม่ได้รับอนุญาต\n- ต้องมีการจัดการ Session และ Token อย่างปลอดภัย\n\n### 5.5 Frontend Requirements\n\n- มีหน้าจอสำหรับจัดการบทบาทและสิทธิ์\n- มีหน้าจอสำหรับจัดการผู้ใช้และบทบาท\n- มีการตรวจสอบสิทธิ์ก่อนแสดงข้อมูล\n- มีการแสดง UI ตามสิทธิ์ของผู้ใช้\n- มีการแจ้งเตือนเมื่อไม่มีสิทธิ์เข้าถึง\n- รองรับการแสดงข้อมูลบนอุปกรณ์พกพา\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการสร้าง แก้ไข และลบบทบาท\n- [ ] ทดสอบการกำหนดสิทธิ์ให้บทบาท\n- [ ] ทดสอบการกำหนดบทบาทให้ผู้ใช้\n- [ ] ทดสอบการตรวจสอบสิทธิ์การเข้าถึง\n- [ ] ทดสอบการสืบทอดสิทธิ์จากลำดับชั้นบทบาท\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการทำงานร่วมกับระบบตรวจสอบสิทธิ์\n- [ ] ทดสอบการทำงานร่วมกับระบบบันทึกการใช้งาน\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการจัดการบทบาทและสิทธิ์ผ่าน UI\n- [ ] ทดสอบการกำหนดบทบาทให้ผู้ใช้ผ่าน UI\n- [ ] ทดสอบการเข้าถึงทรัพยากรตามสิทธิ์\n- [ ] ทดสอบการแสดง UI ตามสิทธิ์ของผู้ใช้\n- [ ] ทดสอบการแจ้งเตือนเมื่อไม่มีสิทธิ์เข้าถึง\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมีระบบจัดการผู้ใช้และการตรวจสอบสิทธิ์\n- ต้องมีระบบฐานข้อมูลสำหรับเก็บข้อมูลบทบาทและสิทธิ์\n- ต้องมีระบบบันทึกการใช้งาน\n- ต้องมีระบบติดตามประสิทธิภาพ\n\n### 7.2 Assumptions\n\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- ผู้ใช้จะมีบทบาทที่เหมาะสมกับหน้าที่ความรับผิดชอบ\n- การเปลี่ยนแปลงบทบาทจะถูกตรวจสอบและอนุมัติ\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบสิทธิ์ต้องทำงานได้ภายใน **50ms**\n- ต้องรองรับการตรวจสอบสิทธิ์ได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n- การดึงข้อมูลบทบาทและสิทธิ์ต้องมีการ Cache\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบสำรองข้อมูลบทบาทและสิทธิ์\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องมีการตรวจสอบและป้องกันการเข้าถึงโดยไม่ได้รับอนุญาต\n- ต้องมีการบันทึกการตรวจสอบสิทธิ์ทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                   | Impact   | Probability | Mitigation Strategy                     |\n| ---------------------- | -------- | ----------- | --------------------------------------- |\n| Privilege Escalation   | Critical | Low         | มีการตรวจสอบและจำกัดการเปลี่ยนแปลงบทบาท |\n| Permission Conflicts   | High     | Medium      | มีระบบตรวจสอบความขัดแย้งของสิทธิ์       |\n| Performance Issues     | Medium   | Medium      | มีระบบ Cache และ Optimization           |\n| Role Management Errors | High     | Low         | มีการ Validation และ Confirmation       |\n\n## 10. Timeline และ Milestones\n\n| Milestone                 | Target Date | Status      |\n| ------------------------- | ----------- | ----------- |\n| Role Management System    | 2025-10-16  | Not Started |\n| Permission System         | 2025-10-18  | Not Started |\n| User Role Assignment      | 2025-10-20  | Not Started |\n| Access Control Middleware | 2025-10-22  | Not Started |\n| Testing                   | 2025-10-24  | Not Started |\n| Production Deployment     | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.750Z",
          "updatedAt": "2025-10-15T01:51:18.750Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "fr_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_2 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "fr_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_2 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_3",
        "title": "Credit Management System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Credit Management System\n\n## 1. ภาพรวม (Overview)\n\nระบบ Credit Management เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ทำหน้าที่ในการจัดการหน่วยความจุ (Credits) ของผู้ใช้ ซึ่งเป็นหน่วยวัดที่ใช้ในการเรียกใช้ AI Services ต่างๆ ระบบนี้ทำหน้าที่ในการติดตามยอดคงเหลือ บันทึกธุรกรรม และคำนวณค่าใช้จ่ายตามการใช้งานจริง\n\nระบบนี้ทำงานโดยใช้หลักการของ Immutable Ledger ซึ่งทุกธุรกรรมจะถูกบันทึกและไม่สามารถแก้ไขได้ ทำให้มั่นใจได้ในความถูกต้องและโปร่งใสของข้อมูลการเงิน นอกจากนี้ระบบยังรองรับการแจ้งเตือนเมื่อยอดคงเหลือต่ำ การหมดอายุของเครดิต และการดำเนินการคืนเงิน\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถติดตามยอดคงเหลือของเครดิตแบบ Real-time\n- บันทึกประวัติธุรกรรมทั้งหมดอย่างถูกต้อง\n- คำนวณค่าใช้จ่ายตามการใช้งาน AI Services อย่างเป็นธรรม\n- แจ้งเตือนผู้ใช้เมื่อยอดคงเหลือต่ำ\n- รองรับการหมดอายุของเครดิต\n- อำนวยความสะดวกในการเติมเครดิตและการคืนเงิน\n- ให้ข้อมูลการเงินที่โปร่งใสและน่าเชื่อถือ\n\n## 3. User Stories\n\n### Story 1: ผู้ใช้ตรวจสอบและเติมเครดิต\n\n**ในฐานะ** ผู้ใช้แพลตฟอร์ม  \n**ฉันต้องการ** ดูยอดคงเหลือของเครดิตและเติมเครดิตเพิ่ม  \n**เพื่อที่จะ** ใช้งาน AI Services ต่อไปได้อย่างไม่ขาดตอน\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอแสดงยอดคงเหลือของเครดิตแบบ Real-time\n- [ ] ต้องแสดงประวัติการใช้เครดิตและการเติมเครดิต\n- [ ] ต้องมีวิธีการเติมเครดิตที่หลากหลาย (Credit Card, Bank Transfer)\n- [ ] ต้องมีการแจ้งเตือนเมื่อยอดคงเหลือต่ำกว่าที่กำหนด\n- [ ] ต้องแสดงวันหมดอายุของเครดิต (ถ้ามี)\n- [ ] ต้องมีการแสดงราคาต่อหน่วยของแต่ละ AI Service\n- [ ] ต้องมีการตรวจสอบสิทธิ์ก่อนทำธุรกรรมการเงิน\n\n### Story 2: ผู้ดูแลระบบจัดการเครดิตและการคืนเงิน\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** จัดการเครดิตของผู้ใช้และดำเนินการคืนเงิน  \n**เพื่อที่จะ** แก้ไขปัญหาและให้บริการผู้ใช้ได้อย่างเป็นธรรม\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอสำหรับจัดการเครดิตของผู้ใช้ทั้งหมด\n- [ ] ต้องสามารถปรับยอดเครดิตของผู้ใช้ได้ (เพิ่ม/ลด)\n- [ ] ต้องสามารถดำเนินการคืนเงินได้\n- [ ] ต้องมีการบันทึกเหตุผลในการปรับเครดิต\n- [ ] ต้องมีการอนุมัติก่อนดำเนินการคืนเงิน\n- [ ] ต้องแสดงรายงานการเคลื่อนไหวของเครดิตทั้งระบบ\n- [ ] ต้องมีการตรวจสอบสิทธิ์ระดับ Admin ก่อนเข้าถึง\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การติดตามยอดคงเหลือเครดิต (Balance Tracking)\n- การบันทึกธุรกรรม (Transaction Logging)\n- การคำนวณค่าใช้จ่าย (Cost Calculation)\n- การแจ้งเตือนยอดต่ำ (Low Balance Alerts)\n- การเติมเครดิต (Credit Top-up)\n- การคืนเงิน (Refund Processing)\n- การหมดอายุเครดิต (Credit Expiration)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการส่วนลดและโปรโมชั่น (Discount & Promotion Management)\n- การวางบิลและใบเสร็จ (Invoicing)\n- การรายงานภาษี (Tax Reporting)\n- การจัดการสกุลเงินหลายสกุล (Multi-currency)\n- การจัดการบัญชีธนาคาร (Bank Account Management)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                    | Description         | Request Body                              | Response           |\n| ------ | --------------------------- | ------------------- | ----------------------------------------- | ------------------ |\n| GET    | `/api/credits/balance`      | ดึงยอดเครดิตคงเหลือ | Query: `{ userId }`                       | `{ balance }`      |\n| GET    | `/api/credits/transactions` | ดึงประวัติธุรกรรม   | Query: `{ userId, page, limit }`          | `{ transactions }` |\n| POST   | `/api/credits/topup`        | เติมเครดิต          | `{ amount, paymentMethod }`               | `{ transaction }`  |\n| POST   | `/api/credits/deduct`       | หักเครดิต           | `{ userId, amount, reason }`              | `{ success }`      |\n| GET    | `/api/credits/pricing`      | ดึงอัตราค่าบริการ   | Query: `{ service }`                      | `{ pricing }`      |\n| POST   | `/api/credits/refund`       | คืนเครดิต           | `{ userId, amount, reason }`              | `{ transaction }`  |\n| GET    | `/api/credits/summary`      | ดึงสรุปการใช้เครดิต | Query: `{ userId, period }`               | `{ summary }`      |\n| PUT    | `/api/credits/settings`     | ตั้งค่าเครดิต       | `{ lowBalanceThreshold, expirationDays }` | `{ settings }`     |\n\n### 5.2 Credit Deduction Rules\n\n```yaml\n# Text Generation Models\nGPT-4: 10 credits per 1000 tokens\nGPT-4-Turbo: 8 credits per 1000 tokens\nGPT-3.5-Turbo: 1 credit per 1000 tokens\nClaude-3-Opus: 12 credits per 1000 tokens\nClaude-3-Sonnet: 8 credits per 1000 tokens\nClaude-3-Haiku: 2 credits per 1000 tokens\nGemini-Pro: 5 credits per 1000 tokens\n\n# Image Generation\nDALL-E-3: 50 credits per image\nMidjourney: 40 credits per image\nStable Diffusion: 20 credits per image\n\n# Video Generation\nStandard Video: 200 credits per minute\nHD Video: 400 credits per minute\nSora2 Video Generation: 30 credits per video\n\n# Special Services\nCode Analysis: 5 credits per analysis\nTranslation: 3 credits per 1000 characters\nAudio Transcription: 10 credits per minute\n```\n\n### 5.3 Database Schema\n\n```prisma\nmodel CreditAccount {\n  id          String   @id @default(cuid())\n  userId      String   @unique\n  balance     Float    @default(0)\n  totalEarned Float    @default(0)\n  totalSpent  Float    @default(0)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  user         User                @relation(fields: [userId], references: [id])\n  transactions CreditTransaction[]\n\n  @@map(\"credit_accounts\")\n}\n\nmodel CreditTransaction {\n  id          String      @id @default(cuid())\n  accountId   String\n  amount      Float\n  balance     Float\n  type        TransactionType\n  description String\n  metadata    Json?\n  createdAt   DateTime    @default(now())\n\n  account CreditAccount @relation(fields: [accountId], references: [id])\n\n  @@map(\"credit_transactions\")\n}\n\nenum TransactionType {\n  TOPUP\n  USAGE\n  REFUND\n  EXPIRATION\n  ADJUSTMENT\n  PROMOTION\n}\n```\n\n### 5.4 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนทำธุรกรรมทุกครั้ง\n- ต้องมีการเข้ารหัสข้อมูลการเงินที่ละเอียดอ่อน\n- ต้องมีการบันทึกธุรกรรมทั้งหมดในระบบ Audit Log\n- ต้องมีการตรวจสอบความถูกต้องของคำขอ\n- ต้องมีการป้องกันการฉ้อโกงและการใช้งานผิดปกติ\n- ต้องมีการจำกัดจำนวนธุรกรรมต่อผู้ใช้\n\n### 5.5 Frontend Requirements\n\n- มีหน้าจอแสดงยอดเครดิตคงเหลือแบบ Real-time\n- มีหน้าจอประวัติธุรกรรมที่สามารถกรองและค้นหาได้\n- มีหน้าจอเติมเครดิตที่รองรับการชำระเงินหลายช่องทาง\n- มีการแจ้งเตือนเมื่อยอดคงเหลือต่ำ\n- มีการตรวจสอบสิทธิ์ก่อนแสดงข้อมูล\n- รองรับการแสดงข้อมูลบนอุปกรณ์พกพา\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการคำนวณค่าใช้จ่ายตามการใช้งาน\n- [ ] ทดสอบการหักเครดิต\n- [ ] ทดสอบการเติมเครดิต\n- [ ] ทดสอบการคืนเครดิต\n- [ ] ทดสอบการตรวจสอบยอดคงเหลือ\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบชำระเงิน\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการทำงานร่วมกับระบบบันทึกการใช้งาน\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการเติมเครดิตผ่าน UI\n- [ ] ทดสอบการใช้เครดิตเพื่อเรียกใช้ AI Services\n- [ ] ทดสอบการแสดงประวัติธุรกรรมผ่าน UI\n- [ ] ทดสอบการแจ้งเตือนยอดต่ำ\n- [ ] ทดสอบการคืนเครดิตผ่าน UI ของ Admin\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมีระบบจัดการผู้ใช้และการตรวจสอบสิทธิ์\n- ต้องมีระบบชำระเงิน (Payment Gateway)\n- ต้องมีระบบฐานข้อมูลที่เชื่อถือได้\n- ต้องมีระบบส่งการแจ้งเตือน (Notification System)\n\n### 7.2 Assumptions\n\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- ผู้ใช้มีวิธีการชำระเงินที่ถูกต้อง\n- การเรียกใช้ AI Services จะถูกคำนวณค่าใช้จ่ายทันที\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบยอดเครดิตต้องทำงานได้ภายใน **100ms**\n- ต้องรองรับธุรกรรมได้อย่างน้อย **100 ครั้งต่อวินาที**\n- การประมวลผลธุรกรรมต้องมีความถูกต้อง 100%\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบสำรองข้อมูลธุรกรรม\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลการเงินที่ละเอียดอ่อน\n- ต้องมีการตรวจสอบและป้องกันการฉ้อโกง\n- ต้องมีการบันทึกธุรกรรมทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk               | Impact   | Probability | Mitigation Strategy                      |\n| ------------------ | -------- | ----------- | ---------------------------------------- |\n| Calculation Errors | Critical | Low         | มีการทดสอบและตรวจสอบการคำนวณอย่างละเอียด |\n| Payment Failures   | High     | Medium      | มีระบบจัดการความล้มเหลวของการชำระเงิน    |\n| Credit Fraud       | Critical | Low         | มีระบบตรวจสอบและป้องกันการฉ้อโกง         |\n| System Downtime    | High     | Low         | มีระบบสำรองและ Recovery Plan             |\n\n## 10. Timeline และ Milestones\n\n| Milestone               | Target Date | Status      |\n| ----------------------- | ----------- | ----------- |\n| Credit Balance System   | 2025-10-16  | Not Started |\n| Transaction Logging     | 2025-10-18  | Not Started |\n| Cost Calculation Engine | 2025-10-20  | Not Started |\n| Payment Integration     | 2025-10-22  | Not Started |\n| Testing                 | 2025-10-24  | Not Started |\n| Production Deployment   | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.751Z",
          "updatedAt": "2025-10-15T01:51:18.751Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "fr_3 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_3 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "fr_3 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_3 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_4",
        "title": "MCP Server Implementation",
        "type": "api_spec",
        "category": "documentation",
        "content": "# MCP Server Implementation\n\n## 1. ภาพรวม (Overview)\n\nระบบ MCP Server (Model Context Protocol Server) เป็นส่วนกลางของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับเชื่อมต่อกับ AI Service Providers ต่างๆ เช่น OpenAI, Anthropic Claude และ Google Gemini ระบบนี้ทำหน้าที่เป็นส่วนกลางในการจัดการการเรียกใช้ AI Services ทำให้สามารถสลับไปมาระหว่าง Providers ได้อย่างง่าย\n\nระบบนี้ทำงานโดยให้ API ที่สอดคล้องกับมาตรฐาน MCP แก่แอปพลิเคชันต่างๆ ภายในระบบ และทำหน้าที่แปลงคำขอเหล่านั้นไปยังรูปแบบที่เหมาะสมกับแต่ละ Provider การจัดการ MCP Server เป็นส่วนสำคัญในการให้บริการ AI ที่สม่ำเสมอและเชื่อถือได้แก่ผู้ใช้\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถเชื่อมต่อกับ AI Service Providers หลายรายได้\n- รองรับการเรียกใช้ AI Services แบบ Real-time\n- ป้องกันการสูญหายของคำขอและการตอบกลับ\n- อำนวยความสะดวกในการจัดการ Context Window\n- รองรับการส่งข้อมูลแบบ Streaming สำหรับการตอบกลับแบบ Real-time\n- ทำงานร่วมกับระบบบันทึกการใช้งานและคำนวณค่าใช้จ่าย\n- ลดความซับซ้อนในการจัดการ AI Services\n\n## 3. User Stories\n\n### Story 1: แอปพลิเคชันเรียกใช้ AI Services ผ่าน MCP Server\n\n**ในฐานะ** นักพัฒนาแอปพลิเคชัน  \n**ฉันต้องการ** เรียกใช้ AI Services ผ่าน MCP Server  \n**เพื่อที่จะ** ใช้งาน AI ต่างๆ ในแอปพลิเคชันของฉัน\n\n**Acceptance Criteria:**\n\n- [ ] MCP Server ต้องรองรับคำขอตามมาตรฐาน MCP\n- [ ] ต้องรองรับการเชื่อมต่อกับ OpenAI, Anthropic และ Google\n- [ ] ต้องมีการจัดการการเรียกใช้ที่ล้มเหลวอัตโนมัติ\n- [ ] ต้องรองรับการส่งข้อมูลแบบ Streaming\n- [ ] ต้องมีการจัดการ Context Window อัตโนมัติ\n- [ ] ต้องมีการบันทึกการเรียกใช้และการตอบกลับ\n- [ ] ต้องมีการจัดการ Rate Limiting และ Quota\n\n### Story 2: ผู้ดูแลระบบจัดการ MCP Server\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** จัดการการตั้งค่าและติดตามสถานะของ MCP Server  \n**เพื่อที่จะ** ให้บริการ AI Services ที่เสถียรและมีประสิทธิภาพ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอสำหรับตั้งค่า API Keys ของแต่ละ Provider\n- [ ] ต้องมีการแสดงสถานะการเชื่อมต่อของแต่ละ Provider\n- [ ] ต้องมีการแสดงสถิติการใช้งานของแต่ละ Provider\n- [ ] ต้องสามารถเปิด/ปิดการใช้งานของ Provider ได้\n- [ ] ต้องมีการตั้งค่า Rate Limits และ Quotas\n- [ ] ต้องมีการแจ้งเตือนเมื่อเกิดปัญหากับ Provider\n- [ ] ต้องมีการบันทึก Log การทำงานของ MCP Server\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การเชื่อมต่อกับ AI Service Providers (Provider Integration)\n- การจัดการคำขอและการตอบกลับ (Request/Response Management)\n- การจัดการ Context Window (Context Management)\n- การส่งข้อมูลแบบ Streaming (Streaming Support)\n- การจัดการการเรียกใช้ที่ล้มเหลว (Error Handling and Retry)\n- การบันทึกการใช้งาน (Usage Logging)\n- การจัดการ Rate Limiting และ Quotas (Rate Limiting)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การพัฒนา AI Models ใหม่ (AI Model Development)\n- การจัดการ Fine-tuning ของ Models (Model Fine-tuning)\n- การจัดการ Vector Databases (Vector Database Management)\n- การจัดการ AI Model Training (Model Training)\n- การจัดการ Custom AI Models (Custom Model Management)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                    | Description                   | Request Body                            | Response                      |\n| ------ | --------------------------- | ----------------------------- | --------------------------------------- | ----------------------------- |\n| POST   | `/api/mcp/chat`             | ส่งคำขอแชทไปยัง AI Provider   | `{ provider, model, messages, stream }` | `{ response }` หรือ Streaming |\n| POST   | `/api/mcp/embeddings`       | สร้าง Embeddings จากข้อความ   | `{ provider, model, input }`            | `{ embeddings }`              |\n| GET    | `/api/mcp/providers`        | ดึงรายการ Providers ที่รองรับ | -                                       | `{ providers }`               |\n| GET    | `/api/mcp/models/:provider` | ดึงรายการ Models ของ Provider | -                                       | `{ models }`                  |\n| GET    | `/api/mcp/status`           | ตรวจสอบสถานะ MCP Server       | -                                       | `{ status, providers }`       |\n| POST   | `/api/mcp/test-connection`  | ทดสอบการเชื่อมต่อกับ Provider | `{ provider, apiKey }`                  | `{ success, message }`        |\n| GET    | `/api/mcp/usage-stats`      | ดึงสถิติการใช้งาน             | Query: `{ period, provider }`           | `{ statistics }`              |\n\n### 5.2 Supported Providers\n\n- **OpenAI**: GPT-3.5-Turbo, GPT-4, GPT-4-Turbo, GPT-4o\n- **Anthropic**: Claude-3-Opus, Claude-3-Sonnet, Claude-3-Haiku\n- **Google**: Gemini-Pro (Phase 2)\n- **Future Providers**: รองรับการเพิ่ม Providers ใหม่ในอนาคต\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนเรียกใช้ AI Services\n- ต้องมีการเข้ารหัส API Keys ของ Providers\n- ต้องมีการตรวจสอบความถูกต้องของคำขอ\n- ต้องมีการบันทึกการเรียกใช้ AI Services ในระบบ Audit Log\n- ต้องมีการจำกัดจำนวนคำขอต่อผู้ใช้ (Rate Limiting)\n- ต้องมีการตรวจสอบเนื้อหาที่เป็นอันตราย (Content Filtering)\n\n### 5.4 Frontend Requirements\n\n- มีหน้าจอสำหรับจัดการ MCP Server\n- มีการแสดงสถานะการเชื่อมต่อของ Providers แบบ Real-time\n- มีการแสดงสถิติการใช้งานแบบมองเห็นภาพรวม\n- มีการตรวจสอบสิทธิ์ก่อนแสดงข้อมูล\n- มีการแจ้งเตือนเมื่อเกิดปัญหากับ Providers\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการเชื่อมต่อกับแต่ละ Provider\n- [ ] ทดสอบการจัดการคำขอและการตอบกลับ\n- [ ] ทดสอบการจัดการ Context Window\n- [ ] ทดสอบการส่งข้อมูลแบบ Streaming\n- [ ] ทดสอบการจัดการการเรียกใช้ที่ล้มเหลว\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบบันทึกการใช้งาน\n- [ ] ทดสอบการทำงานร่วมกับระบบคำนวณค่าใช้จ่าย\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการเรียกใช้ AI Services ผ่าน UI\n- [ ] ทดสอบการสลับไปมาระหว่าง Providers\n- [ ] ทดสอบการจัดการ MCP Server ผ่าน UI\n- [ ] ทดสอบการแสดงสถิติการใช้งานผ่าน UI\n- [ ] ทดสอบการจัดการการเชื่อมต่อ Providers ผ่าน UI\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมี API Keys สำหรับแต่ละ AI Provider\n- ต้องมีระบบจัดการผู้ใช้และการตรวจสอบสิทธิ์\n- ต้องมีระบบบันทึกการใช้งาน\n- ต้องมีระบบคำนวณค่าใช้จ่าย\n- ต้องมีระบบติดตามประสิทธิภาพ\n\n### 7.2 Assumptions\n\n- AI Providers มี API ที่เสถียรและเชื่อถือได้\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- การเรียกใช้ AI Services จะถูกคำนวณค่าใช้จ่าย\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตอบกลับของ AI Services ต้องทำงานได้ภายในเวลาที่เหมาะสม (ขึ้นอยู่กับ Provider)\n- ต้องรองรับการเรียกใช้ได้อย่างน้อย **50 ครั้งต่อวินาที**\n- การส่งข้อมูลแบบ Streaming ต้องมี Latency ต่ำ\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีระบบจัดการการเชื่อมต่อที่ล้มเหลวอัตโนมัติ\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการเรียกใช้โดยไม่ได้รับอนุญาต\n- ต้องมีการบันทึกการเรียกใช้ AI Services ทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk              | Impact   | Probability | Mitigation Strategy                            |\n| ----------------- | -------- | ----------- | ---------------------------------------------- |\n| Provider Downtime | High     | Medium      | มีระบบสลับไปยัง Provider อื่นอัตโนมัติ         |\n| API Rate Limits   | Medium   | High        | มีระบบจัดการ Rate Limiting และ Queuing         |\n| Cost Overrun      | High     | Medium      | มีระบบตรวจสอบและจำกัดการใช้งานต่อผู้ใช้        |\n| Data Privacy      | Critical | Low         | ใช้การเข้ารหัสข้อมูลและไม่เก็บข้อมูลที่ละเอียด |\n\n## 10. Timeline และ Milestones\n\n| Milestone             | Target Date | Status      |\n| --------------------- | ----------- | ----------- |\n| Provider Integration  | 2025-10-16  | Not Started |\n| MCP API Development   | 2025-10-18  | Not Started |\n| Streaming Support     | 2025-10-20  | Not Started |\n| Frontend Integration  | 2025-10-22  | Not Started |\n| Testing               | 2025-10-24  | Not Started |\n| Production Deployment | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.752Z",
          "updatedAt": "2025-10-15T01:51:18.752Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_4 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_4 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_5",
        "title": "Usage Analytics and Reporting System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Usage Analytics and Reporting System\n\n## 1. ภาพรวม (Overview)\n\nระบบ Usage Analytics and Reporting เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ทำหน้าที่ในการเก็บรวบรวม วิเคราะห์ และแสดงข้อมูลการใช้งานของระบบ ระบบนี้จะติดตามการใช้งาน AI Services คำนวณต้นทุน และจัดทำรายงานต่างๆ เพื่อให้ผู้ดูแลระบบและผู้ใช้สามารถติดตามและจัดการการใช้งานได้อย่างมีประสิทธิภาพ\n\nระบบนี้ทำงานโดยรวบรวมข้อมูลจากการเรียกใช้ AI Services การเชื่อมต่อของผู้ใช้ และการใช้ทรัพยากรต่างๆ ภายในระบบ จากนั้นนำข้อมูลเหล่านั้นมาวิเคราะห์เพื่อสร้างสรรค์ข้อมูลเชิงลึกที่เป็นประโยชน์ต่อการตัดสินใจและการปรับปรุงระบบ\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถติดตามการใช้งาน AI Services ได้อย่างละเอียด\n- คำนวณต้นทุนการใช้งานต่อผู้ใช้และต่อคำขอ\n- วิเคราะห์ประสิทธิภาพของ AI Providers ต่างๆ\n- สร้างรายงานการใช้งานที่เป็นประโยชน์สำหรับผู้ดูแลระบบ\n- แสดงข้อมูลการใช้งานแบบ Real-time บน Dashboard\n- รองรับการส่งรายงานประจำวัน/เดือนอัตโนมัติ\n- อำนวยความสะดวกในการวางแผนความจุและทรัพยากร\n\n## 3. User Stories\n\n### Story 1: ผู้ดูแลระบบตรวจสอบการใช้งานระบบ\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** ดูข้อมูลการใช้งานระบบแบบ Real-time  \n**เพื่อที่จะ** ติดตามสถานะของระบบและวางแผนทรัพยากร\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมี Dashboard ที่แสดงข้อมูลการใช้งานแบบ Real-time\n- [ ] ต้องแสดงจำนวนคำขอต่อวินาที/นาที/ชั่วโมง\n- [ ] ต้องแสดงสถิติการใช้งานต่อผู้ใช้\n- [ ] ต้องแสดงประสิทธิภาพของแต่ละ AI Provider\n- [ ] ต้องมีการแจ้งเตือนเมื่อมีการใช้งานผิดปกติ\n- [ ] ต้องสามารถกรองข้อมูลตามช่วงเวลาได้\n- [ ] ต้องมีการแสดงข้อมูลแบบมองเห็นภาพรวม (Visualization)\n\n### Story 2: ผู้ใช้ตรวจสอบการใช้งานส่วนตัว\n\n**ในฐานะ** ผู้ใช้แพลตฟอร์ม  \n**ฉันต้องการ** ดูข้อมูลการใช้งานและค่าใช้จ่ายของฉัน  \n**เพื่อที่จะ** จัดการการใช้งานและควบคุมงบประมาณ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอสำหรับดูข้อมูลการใช้งานส่วนตัว\n- [ ] ต้องแสดงปริมาณการใช้งานต่อวัน/เดือน\n- [ ] ต้องแสดงค่าใช้จ่ายที่เกิดขึ้น\n- [ ] ต้องแสดงรายละเอียดการเรียกใช้ AI Services\n- [ ] ต้องสามารถดูประวัติการใช้งานย้อนหลังได้\n- [ ] ต้องมีการแสดงข้อมูลแบบกราฟเพื่อความเข้าใจง่าย\n- [ ] ต้องสามารถส่งออกข้อมูลเป็น PDF หรือ CSV ได้\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การเก็บรวบรวมข้อมูลการใช้งาน (Data Collection)\n- การวิเคราะห์ข้อมูลการใช้งาน (Data Analysis)\n- การแสดงข้อมูลแบบ Real-time (Real-time Dashboard)\n- การสร้างรายงานประจำงวด (Periodic Reporting)\n- การส่งออกข้อมูล (Data Export)\n- การแจ้งเตือนและ Alerting (Alerts and Notifications)\n- การคำนวณต้นทุน (Cost Calculation)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การพยากรณ์การใช้งานในอนาคต (Usage Prediction)\n- การวิเคราะห์พฤติกรรมผู้ใช้ขั้นสูง (Advanced User Behavior Analysis)\n- การจัดการ SLA และการรับประกันคุณภาพ (SLA Management)\n- การติดตามตำแหน่งทางภูมิศาสตร์ (Geographic Tracking)\n- การวิเคราะห์ความรู้สึกของผู้ใช้ (Sentiment Analysis)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                              | Description             | Request Body                  | Response          |\n| ------ | ------------------------------------- | ----------------------- | ----------------------------- | ----------------- |\n| GET    | `/api/analytics/overview`             | ดูข้อมูลภาพรวมการใช้งาน | Query: `{ period, filters }`  | `{ overview }`    |\n| GET    | `/api/analytics/usage`                | ดูข้อมูลการใช้งาน       | Query: `{ userId, period }`   | `{ usage }`       |\n| GET    | `/api/analytics/costs`                | ดูข้อมูลต้นทุน          | Query: `{ userId, period }`   | `{ costs }`       |\n| GET    | `/api/analytics/performance`          | ดูข้อมูลประสิทธิภาพ     | Query: `{ provider, period }` | `{ performance }` |\n| GET    | `/api/analytics/reports`              | ดึงรายการรายงาน         | Query: `{ type, status }`     | `{ reports }`     |\n| POST   | `/api/analytics/reports`              | สร้างรายงานใหม่         | `{ type, parameters }`        | `{ report }`      |\n| GET    | `/api/analytics/reports/:id/download` | ดาวน์โหลดรายงาน         | -                             | File download     |\n\n### 5.2 Metrics and KPIs\n\n- **Usage Metrics**:\n  - Requests per user/day/month\n  - Token usage by model\n  - Active users per period\n  - Session duration\n  - Peak usage times\n\n- **Performance Metrics**:\n  - Average response time\n  - Error rate by provider\n  - Success rate\n  - Latency percentiles (p50, p95, p99)\n\n- **Cost Metrics**:\n  - Cost per request\n  - Cost per user\n  - Total cost by period\n  - Cost breakdown by provider/model\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนเข้าถึงข้อมูลการวิเคราะห์\n- ต้องมีการจำกัดการเข้าถึงข้อมูลตามบทบาทผู้ใช้\n- ต้องมีการบันทึกการเข้าถึงข้อมูลการวิเคราะห์\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องมีการตรวจสอบและป้องกันการดึงข้อมูลจำนวนมาก\n\n### 5.4 Frontend Requirements\n\n- มี Dashboard หลักสำหรับแสดงข้อมูลภาพรวม\n- มีหน้าจอสำหรับวิเคราะห์ข้อมูลแบบละเอียด\n- มีระบบกราฟและแผนภูมิสำหรับแสดงข้อมูล\n- มีระบบกรองและค้นหาข้อมูล\n- มีการตรวจสอบสิทธิ์ก่อนแสดงข้อมูล\n- รองรับการแสดงข้อมูลบนอุปกรณ์พกพา\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการเก็บรวบรวมข้อมูลการใช้งาน\n- [ ] ทดสอบการคำนวณต้นทุน\n- [ ] ทดสอบการวิเคราะห์ข้อมูล\n- [ ] ทดสอบการสร้างรายงาน\n- [ ] ทดสอบการส่งออกข้อมูล\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบบันทึกการใช้งาน\n- [ ] ทดสอบการทำงานร่วมกับระบบคำนวณค่าใช้จ่าย\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการส่งข้อมูลไปยัง Frontend\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการแสดงข้อมูลบน Dashboard\n- [ ] ทดสอบการสร้างและดาวน์โหลดรายงาน\n- [ ] ทดสอบการกรองและค้นหาข้อมูล\n- [ ] ทดสอบการแสดงข้อมูลส่วนตัวของผู้ใช้\n- [ ] ทดสอบการแจ้งเตือนเมื่อมีการใช้งานผิดปกติ\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมีระบบบันทึกการใช้งาน (Usage Logging)\n- ต้องมีระบบคำนวณค่าใช้จ่าย (Billing System)\n- ต้องมีระบบจัดการผู้ใช้และการตรวจสอบสิทธิ์\n- ต้องมีระบบจัดเก็บข้อมูลที่มีประสิทธิภาพ\n- ต้องมีระบบติดตามประสิทธิภาพ\n\n### 7.2 Assumptions\n\n- ข้อมูลการใช้งานจะถูกบันทึกอย่างสม่ำเสมอ\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- ผู้ใช้มีสิทธิ์เข้าถึงข้อมูลการใช้งานของตนเองเท่านั้น\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตอบกลับของ Analytics API ต้องทำงานได้ภายใน **2 วินาที**\n- ต้องรองรับการเรียกใช้ Analytics API ได้อย่างน้อย **100 ครั้งต่อวินาที**\n- การอัปเดต Dashboard แบบ Real-time ต้องมี Latency ต่ำกว่า **5 วินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีระบบสำรองข้อมูลการวิเคราะห์\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องมีการตรวจสอบและป้องกันการเข้าถึงโดยไม่ได้รับอนุญาต\n- ต้องมีการบันทึกการเข้าถึงข้อมูลการวิเคราะห์ทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                    | Impact   | Probability | Mitigation Strategy                     |\n| ----------------------- | -------- | ----------- | --------------------------------------- |\n| Data Volume Overload    | High     | Medium      | มีระบบ Data Retention และ Archiving     |\n| Performance Degradation | High     | Medium      | มีระบบ Caching และ Data Aggregation     |\n| Privacy Concerns        | Critical | Low         | มีการ Anonymize ข้อมูลที่ละเอียดอ่อน    |\n| Cost of Analytics       | Medium   | High        | มีการ Optimize Queries และ Data Storage |\n\n## 10. Timeline และ Milestones\n\n| Milestone                 | Target Date | Status      |\n| ------------------------- | ----------- | ----------- |\n| Data Collection Setup     | 2025-10-16  | Not Started |\n| Analytics API Development | 2025-10-18  | Not Started |\n| Dashboard Development     | 2025-10-20  | Not Started |\n| Reporting System          | 2025-10-22  | Not Started |\n| Testing                   | 2025-10-24  | Not Started |\n| Production Deployment     | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.752Z",
          "updatedAt": "2025-10-15T01:51:18.752Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_5 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_5 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_6",
        "title": "API Standards and Guidelines",
        "type": "api_spec",
        "category": "documentation",
        "content": "# API Standards and Guidelines\n\n## 1. ภาพรวม (Overview)\n\nเอกสารนี้กำหนดมาตรฐานและแนวทางปฏิบัติที่เป็นทางการสำหรับการพัฒนา API ของแพลตฟอร์ม Smart AI Hub มาตรฐานเหล่านี้ถูกออกแบบมาเพื่อให้มั่นใจในความสอดคล้อง ความปลอดภัย และประสิทธิภาพของ API ทั้งหมดในระบบ\n\nมาตรฐาน API นี้ครอบคลุมการออกแบบ RESTful API การตรวจสอบสิทธิ์ การจัดการข้อผิดพลาด การจำกัดอัตราการเรียกใช้ และการจัดรูปแบบการตอบกลับที่สอดคล้องกัน การทำตามมาตรฐานเหล่านี้จะช่วยให้นักพัฒนาทั้งภายในและภายนอกสามารถใช้งาน API ของเราได้อย่างมีประสิทธิภาพและสอดคล้องกัน\n\n## 2. วัตถุประสงค์ (Objectives)\n\nมาตรฐาน API นี้ถูกออกแบบมาเพื่อ:\n\n- ให้มีความสอดคล้องกันในการออกแบบ API ทั้งระบบ\n- ทำให้การพัฒนาและบำรุงรักษา API เป็นไปอย่างมีประสิทธิภาพ\n- รับประกันความปลอดภัยของ API ในทุกระดับ\n- อำนวยความสะดวกในการใช้งาน API สำหรับนักพัฒนา\n- ลดความซับซ้อนในการเรียนรู้และใช้งาน API\n- สนับสนุนการทำงานร่วมกันระหว่างทีมพัฒนา\n- ให้มีพื้นฐานที่มั่นคงสำหรับการขยายระบบในอนาคต\n\n## 3. User Stories\n\n### Story 1: นักพัฒนาใช้งาน API ของระบบ\n\n**ในฐานะ** นักพัฒนาซอฟต์แวร์  \n**ฉันต้องการ** เข้าใจและใช้งาน API ของ Smart AI Hub  \n**เพื่อที่จะ** สร้างแอปพลิเคชันที่เชื่อมต่อกับระบบได้อย่างง่าย\n\n**Acceptance Criteria:**\n\n- [ ] API ต้องมีเอกสารที่ชัดเจนและสมบูรณ์\n- [ ] การตอบกลับของ API ต้องมีรูปแบบที่สอดคล้องกัน\n- [ ] ข้อความแสดงข้อผิดพลาดต้องมีความชัดเจนและเป็นประโยชน์\n- [ ] ต้องมีตัวอย่างการใช้งาน API ที่เข้าใจง่าย\n- [ ] ต้องมีการจัดการการตรวจสอบสิทธิ์ที่ชัดเจน\n- [ ] ต้องมีการจำกัดอัตราการเรียกใช้ที่เหมาะสม\n- [ ] ต้องมีการจัดการเวอร์ชันของ API อย่างเป็นระบบ\n\n### Story 2: ผู้ดูแลระบบจัดการ API\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** ติดตามและจัดการการใช้งาน API  \n**เพื่อที่จะ** ให้บริการ API ที่เสถียรและปลอดภัย\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีเครื่องมือติดตามการใช้งาน API\n- [ ] ต้องสามารถตั้งค่าการจำกัดอัตราการเรียกใช้ตามบทบาทได้\n- [ ] ต้องมีการแจ้งเตือนเมื่อมีการใช้งาน API ผิดปกติ\n- [ ] ต้องสามารถบล็อกการเข้าถึง API ที่น่าสงสัยได้\n- [ ] ต้องมีการบันทึกการเรียกใช้ API ทั้งหมด\n- [ ] ต้องมีรายงานสถิติการใช้งาน API\n- [ ] ต้องสามารถจัดการเวอร์ชันของ API ได้\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การออกแบบ RESTful API (RESTful API Design)\n- การจัดการเวอร์ชันของ API (API Versioning)\n- การตรวจสอบสิทธิ์และการอนุญาต (Authentication & Authorization)\n- การจำกัดอัตราการเรียกใช้ (Rate Limiting)\n- การจัดการข้อผิดพลาด (Error Handling)\n- การจัดรูปแบบการตอบกลับ (Response Formatting)\n- การจัดการการแบ่งหน้า (Pagination)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การออกแบบ GraphQL API (GraphQL API Design)\n- การจัดการ WebSocket Connections (WebSocket Management)\n- การจัดการ File Uploads ขนาดใหญ่ (Large File Uploads)\n- การจัดการ Streaming Data (Streaming Data Management)\n- การจัดการ API Gateway ขั้นสูง (Advanced API Gateway)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 API Versioning\n\nระบบจะใช้ URL-based versioning:\n\n```\nhttps://api.smartaihub.com/v1/users\nhttps://api.smartaihub.com/v2/users\n```\n\nกฎการจัดการเวอร์ชัน:\n\n- เวอร์ชันปัจจุบันคือ v1\n- เวอร์ชันใหม่จะถูกสร้างเมื่อมีการเปลี่ยนแปลงที่ทำให้เกิด Breaking Changes\n- เวอร์ชันเก่าจะได้รับการสนับสนุนอย่างน้อย 6 เดือนหลังจากเวอร์ชันใหม่ถูกเปิดใช้งาน\n- การเปลี่ยนแปลงที่ไม่ใช่ Breaking Changes จะไม่ต้องการเวอร์ชันใหม่\n\n### 5.2 Authentication\n\nระบบจะใช้ Bearer Token (JWT) สำหรับการตรวจสอบสิทธิ์:\n\n```http\nAuthorization: Bearer <JWT_TOKEN>\n```\n\nขั้นตอนการตรวจสอบสิทธิ์:\n\n1. Client ส่งคำขอพร้อม JWT Token ใน Header\n2. Server ตรวจสอบความถูกต้องของ Token\n3. Server ตรวจสอบสิทธิ์ของผู้ใช้จาก Token\n4. Server ดำเนินการตามคำขอหรือส่งกลับข้อผิดพลาด\n\n### 5.3 Rate Limiting\n\nการจำกัดอัตราการเรียกใช้ตามบทบาทผู้ใช้:\n\n| Role    | Requests per Minute | Requests per Hour | Requests per Day |\n| ------- | ------------------- | ----------------- | ---------------- |\n| Guest   | 10                  | 100               | 1,000            |\n| User    | 60                  | 1,000             | 10,000           |\n| Manager | 120                 | 2,000             | 20,000           |\n| Admin   | No limit            | No limit          | No limit         |\n\nHeaders สำหรับ Rate Limiting:\n\n```http\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1634567890\n```\n\n### 5.4 Error Response Format\n\nรูปแบบมาตรฐานสำหรับการตอบกลับข้อผิดพลาด:\n\n```json\n{\n  \"error\": {\n    \"code\": \"INVALID_CREDENTIALS\",\n    \"message\": \"Email or password is incorrect\",\n    \"details\": {\n      \"field\": \"password\",\n      \"attempts_remaining\": 3\n    },\n    \"timestamp\": \"2025-10-15T10:30:00Z\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n```\n\nรหัสข้อผิดพลาดทั่วไป:\n\n- `INVALID_CREDENTIALS` - ข้อมูลล็อกอินไม่ถูกต้อง\n- `UNAUTHORIZED` - ไม่มีสิทธิ์เข้าถึงทรัพยากร\n- `FORBIDDEN` - ถูกปฏิเสธการเข้าถึง\n- `NOT_FOUND` - ไม่พบทรัพยากรที่ร้องขอ\n- `VALIDATION_ERROR` - ข้อมูลที่ส่งไม่ถูกต้อง\n- `RATE_LIMIT_EXCEEDED` - เกินอัตราการเรียกใช้ที่กำหนด\n- `INTERNAL_SERVER_ERROR` - เกิดข้อผิดพลาดภายในเซิร์ฟเวอร์\n\n### 5.5 Success Response Format\n\nรูปแบบมาตรฐานสำหรับการตอบกลับสำเร็จ:\n\n```json\n{\n  \"data\": {\n    \"id\": \"user_123\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\"\n  },\n  \"meta\": {\n    \"timestamp\": \"2025-10-15T10:30:00Z\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n```\n\n### 5.6 Pagination Standard\n\nรูปแบบมาตรฐานสำหรับการแบ่งหน้า:\n\n```json\n{\n  \"data\": [\n    { \"id\": 1, \"name\": \"Item 1\" },\n    { \"id\": 2, \"name\": \"Item 2\" }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"per_page\": 20,\n    \"total\": 100,\n    \"total_pages\": 5,\n    \"has_prev\": false,\n    \"has_next\": true\n  }\n}\n```\n\nQuery Parameters สำหรับ Pagination:\n\n- `page` - หน้าที่ต้องการ (default: 1)\n- `per_page` - จำนวนรายการต่อหน้า (default: 20, max: 100)\n\n### 5.7 Security Requirements\n\n- ทุก API Endpoint ต้องใช้ HTTPS เท่านั้น\n- ต้องมีการตรวจสอบสิทธิ์สำหรับทุก Endpoint ยกเว้น Public Endpoints\n- ต้องมีการป้องกัน CSRF Attacks\n- ต้องมีการป้องกัน SQL Injection และ XSS\n- ต้องมีการจำกัดขนาดของ Request Body\n- ต้องมีการ Sanitize ข้อมูล Input ทั้งหมด\n\n### 5.8 HTTP Status Codes\n\nรหัสสถานะ HTTP ที่ใช้ในระบบ:\n\n| Status Code | Meaning               | Usage                          |\n| ----------- | --------------------- | ------------------------------ |\n| 200         | OK                    | คำขอสำเร็จ                     |\n| 201         | Created               | สร้างทรัพยากรสำเร็จ            |\n| 204         | No Content            | คำขอสำเร็จ ไม่มีข้อมูลตอบกลับ  |\n| 400         | Bad Request           | คำขอไม่ถูกต้อง                 |\n| 401         | Unauthorized          | ไม่มีสิทธิ์เข้าถึง             |\n| 403         | Forbidden             | ถูกปฏิเสธการเข้าถึง            |\n| 404         | Not Found             | ไม่พบทรัพยากร                  |\n| 409         | Conflict              | ข้อมูลซ้ำหรือขัดแย้ง           |\n| 422         | Unprocessable Entity  | ข้อมูลไม่ผ่านการตรวจสอบ        |\n| 429         | Too Many Requests     | เกินอัตราการเรียกใช้           |\n| 500         | Internal Server Error | เกิดข้อผิดพลาดภายในเซิร์ฟเวอร์ |\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการตรวจสอบสิทธิ์และการอนุญาต\n- [ ] ทดสอบการจำกัดอัตราการเรียกใช้\n- [ ] ทดสอบการจัดการข้อผิดพลาด\n- [ ] ทดสอบการจัดรูปแบบการตอบกลับ\n- [ ] ทดสอบการจัดการเวอร์ชัน\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบการทำงานของ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบตรวจสอบสิทธิ์\n- [ ] ทดสอบการทำงานร่วมกับระบบจำกัดอัตราการเรียกใช้\n- [ ] ทดสอบการทำงานร่วมกับระบบบันทึกการใช้งาน\n- [ ] ทดสอบการทำงานร่วมกับระบบแจ้งเตือน\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการใช้งาน API จากภายนอก\n- [ ] ทดสอบการจัดการข้อผิดพลาดจากภายนอก\n- [ ] ทดสอบการจำกัดอัตราการเรียกใช้จากภายนอก\n- [ ] ทดสอบการเปลี่ยนเวอร์ชัน API\n- [ ] ทดสอบการใช้งาน API พร้อมกันหลายผู้ใช้\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมีระบบตรวจสอบสิทธิ์และการอนุญาต\n- ต้องมีระบบจัดการผู้ใช้และบทบาท\n- ต้องมีระบบจำกัดอัตราการเรียกใช้\n- ต้องมีระบบบันทึกการใช้งาน\n\n### 7.2 Assumptions\n\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- ผู้ใช้จะมี JWT Token ที่ถูกต้อง\n- การเรียกใช้ API จะเป็นไปตามข้อกำหนดที่กำหนด\n- นักพัฒนาจะอ่านเอกสาร API ก่อนใช้งาน\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- API ต้องตอบกลับภายใน **200ms** สำหรับคำขอทั่วไป\n- ต้องรองรับการเรียกใช้ได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n- ต้องมีการ Cache สำหรับคำขอที่ถูกเรียกบ่อย\n\n### 8.2 Availability\n\n- API ต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบ Load Balancing และ Failover\n\n### 8.3 Security\n\n- ต้องมีการตรวจสอบสิทธิ์ทุกครั้ง\n- ต้องมีการป้องกันการโจมตีทั่วไป\n- ต้องมีการบันทึกการเรียกใช้ API ทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk               | Impact   | Probability | Mitigation Strategy                 |\n| ------------------ | -------- | ----------- | ----------------------------------- |\n| API Abuse          | High     | Medium      | มีระบบ Rate Limiting และ Monitoring |\n| DDoS Attacks       | High     | Low         | มีระบบป้องกัน DDoS                  |\n| Security Breaches  | Critical | Low         | มีการตรวจสอบสิทธิ์และ Encryption    |\n| Performance Issues | Medium   | Medium      | มีระบบ Monitoring และ Optimization  |\n\n## 10. Timeline และ Milestones\n\n| Milestone             | Target Date | Status      |\n| --------------------- | ----------- | ----------- |\n| API Design Standards  | 2025-10-16  | Not Started |\n| Authentication System | 2025-10-18  | Not Started |\n| Rate Limiting System  | 2025-10-20  | Not Started |\n| Error Handling System | 2025-10-22  | Not Started |\n| Testing               | 2025-10-24  | Not Started |\n| Production Deployment | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.753Z",
          "updatedAt": "2025-10-15T01:51:18.753Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_6 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_6 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_auth_05",
        "title": "Session-Based Authentication System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Session-Based Authentication System\n\n## 1. ภาพรวม (Overview)\n\nระบบ Session-Based Authentication เป็นส่วนเสริมของระบบตรวจสอบสิทธิ์ของแพลตฟอร์ม Smart AI Hub ที่ออกแบบมาเพื่อรองรับการเชื่อมต่อจากบุคคลที่สาม (Third-party Integrations) โดยเฉพาะ ระบบนี้ทำงานโดยสร้าง Session Tokens ที่ปลอดภัยและจัดเก็บไว้ใน Redis เพื่อให้บริการแอปพลิเคชันภายนอกสามารถตรวจสอบสิทธิ์ผู้ใช้ได้\n\nระบบนี้แตกต่างจากระบบ JWT-based Authentication ตรงที่ใช้ Session Tokens ที่จัดเก็บไว้ฝั่ง Server-side ทำให้สามารถเพิกถอนสิทธิ์ได้ทันทีเมื่อจำเป็น ซึ่งเหมาะสำหรับการใช้งานในสถานการณ์ที่ต้องการความปลอดภัยสูงและการควบคุมที่ละเอียด\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถตรวจสอบสิทธิ์สำหรับบุคคลที่สามได้อย่างปลอดภัย\n- รองรับการจัดการ Session ที่มีอายุการใช้งานยาวนาน\n- อำนวยความสะดวกในการเพิกถอนสิทธิ์การเข้าถึง\n- รับประกันประสิทธิภาพในการตรวจสอบสิทธิ์\n- ให้มีความยืดหยุ่นในการกำหนดค่า Session\n- รองรับการตรวจสอบสถานะ Session แบบ Real-time\n- ลดความซับซ้อนในการบูรณาการระบบภายนอก\n\n## 3. User Stories\n\n### Story 1: นักพัฒนาบุคคลที่สามใช้ Session Authentication\n\n**ในฐานะ** นักพัฒนาแอปพลิเคชันบุคคลที่สาม  \n**ฉันต้องการ** ใช้ Session-based Authentication เพื่อตรวจสอบสิทธิ์ผู้ใช้  \n**เพื่อที่จะ** สร้างแอปพลิเคชันที่เชื่อมต่อกับ Smart AI Hub ได้อย่างปลอดภัย\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีวิธีการสร้าง Session Token ที่ปลอดภัย\n- [ ] ต้องมี API Endpoint สำหรับตรวจสอบสถานะ Session\n- [ ] ต้องมีการส่งคืนข้อมูลผู้ใช้สำหรับ Session ที่ถูกต้อง\n- [ ] ต้องมีการจัดการ Session ที่หมดอายุอย่างสมบูรณ์\n- [ ] ต้องมีเอกสาร API ที่ชัดเจนสำหรับการบูรณาการ\n- [ ] ต้องมีตัวอย่างโค้ดสำหรับการใช้งาน\n- [ ] ต้องมีการตอบกลับภายใน 100ms สำหรับการตรวจสอบ Session\n\n### Story 2: ผู้ดูแลระบบจัดการ Session ของบุคคลที่สาม\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** จัดการ Session ที่สร้างโดยบุคคลที่สาม  \n**เพื่อที่จะ** ควบคุมการเข้าถึงและรับประกันความปลอดภัยของระบบ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอสำหรับดูรายการ Session ทั้งหมด\n- [ ] ต้องสามารถเพิกถอน Session ใดๆ ได้ทันที\n- [ ] ต้องแสดงข้อมูล Session เช่น ผู้ใช้ เวลาสร้าง อายุการใช้งาน\n- [ ] ต้องสามารถกรองและค้นหา Session ได้\n- [ ] ต้องมีการแจ้งเตือนเมื่อมี Session ที่น่าสงสัย\n- [ ] ต้องมีการตั้งค่าอายุการใช้งาน Session แบบ Global\n- [ ] ต้องมีรายงานสถิติการใช้ Session ของบุคคลที่สาม\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การสร้าง Session Tokens (Session Token Generation)\n- การจัดเก็บ Session ใน Redis (Session Storage)\n- การตรวจสอบสถานะ Session (Session Verification)\n- การเพิกถอน Session (Session Revocation)\n- การจัดการอายุ Session (Session Expiration)\n- การตรวจสอบสิทธิ์สำหรับบุคคลที่สาม (Third-party Auth)\n- การติดตามและรายงาน Session (Session Monitoring)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการ OAuth 2.0 Flow แบบเต็มรูปแบบ\n- การจัดการ API Keys แบบ Long-lived\n- การจัดการ Single Sign-On (SSO) ข้ามองค์กร\n- การจัดการ Webhook Authentication\n- การจัดการ Service-to-Service Authentication\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                             | Description                   | Request Body                        | Response                      |\n| ------ | ------------------------------------ | ----------------------------- | ----------------------------------- | ----------------------------- |\n| POST   | `/api/auth/sessions`                 | สร้าง Session ใหม่            | `{ userId, clientId, metadata }`    | `{ sessionToken, expiresAt }` |\n| GET    | `/api/auth/sessions/:token`          | ตรวจสอบสถานะ Session          | -                                   | `{ user, session, valid }`    |\n| DELETE | `/api/auth/sessions/:token`          | เพิกถอน Session               | -                                   | `{ success }`                 |\n| GET    | `/api/auth/sessions`                 | ดึงรายการ Session ทั้งหมด     | Query: `{ userId, clientId, page }` | `{ sessions }`                |\n| POST   | `/api/auth/sessions/verify`          | ตรวจสอบ Session Token         | `{ token }`                         | `{ valid, user, expiresAt }`  |\n| PUT    | `/api/auth/sessions/:token/extend`   | ขยายอายุ Session              | `{ days }`                          | `{ success, newExpiresAt }`   |\n| GET    | `/api/auth/sessions/:token/metadata` | ดึงข้อมูลเพิ่มเติมของ Session | -                                   | `{ metadata }`                |\n\n### 5.2 Session Token Format\n\nSession Tokens จะมีรูปแบบดังนี้:\n\n```\nVERIFIED-{random_string}\n```\n\nโดยที่:\n\n- `VERIFIED` เป็น prefix ที่ระบุว่าเป็น Session Token\n- `random_string` เป็นสตริงสุ่มความยาว 32 ตัวอักษรที่สร้างจาก cryptographic secure random generator\n\nตัวอย่าง Session Token:\n\n```\nVERIFIED-a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\n```\n\n### 5.3 Session Data Structure\n\nข้อมูล Session ที่จัดเก็บใน Redis:\n\n```json\n{\n  \"token\": \"VERIFIED-a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\",\n  \"userId\": \"user_12345\",\n  \"clientId\": \"client_67890\",\n  \"createdAt\": \"2025-10-15T10:00:00Z\",\n  \"expiresAt\": \"2025-10-22T10:00:00Z\",\n  \"lastAccessAt\": \"2025-10-15T12:30:00Z\",\n  \"metadata\": {\n    \"ip\": \"192.168.1.100\",\n    \"userAgent\": \"Mozilla/5.0...\",\n    \"integrationType\": \"third_party_app\"\n  },\n  \"revoked\": false\n}\n```\n\n### 5.4 Redis Configuration\n\nการจัดเก็บ Session ใน Redis:\n\n```\nKey: session:{token}\nValue: JSON string of session data\nTTL: 7 days (configurable)\n```\n\nRedis Keys สำหรับการจัดการเพิ่มเติม:\n\n```\nuser:{userId}:sessions - Set of session tokens for a user\nclient:{clientId}:sessions - Set of session tokens for a client\nsessions:revoked - Set of revoked session tokens\n```\n\n### 5.5 Security Requirements\n\n- Session Tokens ต้องถูกสร้างจาก Cryptographically Secure Random Generator\n- ต้องมีการตรวจสอบ Session ทุกครั้งที่มีการเรียกใช้\n- ต้องมีการเพิกถอน Session ทันทีเมื่อจำเป็น\n- ต้องมีการจำกัดจำนวน Session ต่อผู้ใช้ (default: 5 sessions)\n- ต้องมีการบันทึกการสร้างและการเพิกถอน Session\n- ต้องมีการตรวจสอบ IP Address และ User Agent สำหรับ Session\n- ต้องมีการป้องกัน Session Fixation Attacks\n\n### 5.6 Performance Requirements\n\n- การตรวจสอบ Session ต้องทำงานได้ภายใน **100ms**\n- ต้องรองรับการตรวจสอบ Session ได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n- การเพิกถอน Session ต้องทำงานภายใน **50ms**\n- ต้องมีการ Cache Session ที่ถูกเรียกใช้บ่อย\n\n### 5.7 Frontend Requirements\n\n- มีหน้าจอสำหรับจัดการ Session ของบุคคลที่สาม\n- มีตารางแสดงรายการ Session พร้อมข้อมูลที่สำคัญ\n- มีการกรองและค้นหา Session แบบ Real-time\n- มีการแจ้งเตือนเมื่อมี Session ที่น่าสงสัย\n- มีการตรวจสอบสิทธิ์ก่อนเข้าถึงข้อมูล Session\n- รองรับการแสดงข้อมูลบนอุปกรณ์พกพา\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการสร้าง Session Token\n- [ ] ทดสอบการจัดเก็บและดึงข้อมูล Session จาก Redis\n- [ ] ทดสอบการตรวจสอบสถานะ Session\n- [ ] ทดสอบการเพิกถอน Session\n- [ ] ทดสอบการจัดการอายุ Session\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับ Redis\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการทำงานร่วมกับระบบบันทึกการใช้งาน\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการสร้างและใช้ Session ผ่าน UI\n- [ ] ทดสอบการเพิกถอน Session ผ่าน UI\n- [ ] ทดสอบการแสดงรายการ Session ผ่าน UI\n- [ ] ทดสอบการกรองและค้นหา Session ผ่าน UI\n- [ ] ทดสอบการแจ้งเตือน Session ที่น่าสงสัยผ่าน UI\n\n### 6.4 Security Tests\n\n- [ ] ทดสอบความปลอดภัยของ Session Token Generation\n- [ ] ทดสอบการป้องกัน Session Fixation\n- [ ] ทดสอบการจำกัดจำนวน Session ต่อผู้ใช้\n- [ ] ทดสอบการตรวจสอบ IP Address และ User Agent\n- [ ] ทดสอบการเพิกถอน Session ทันที\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมี Redis Server สำหรับจัดเก็บ Session\n- ต้องมีระบบจัดการผู้ใช้\n- ต้องมีระบบตรวจสอบสิทธิ์หลัก\n- ต้องมีระบบบันทึกการใช้งาน\n\n### 7.2 Assumptions\n\n- Redis Server มีความน่าเชื่อถือและมีความพร้อมใช้งานสูง\n- บุคคลที่สามจะใช้ Session Token อย่างปลอดภัย\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Client ID และ Client Secret สำหรับบุคคลที่สาม\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบ Session ต้องทำงานได้ภายใน **100ms**\n- ต้องรองรับการตรวจสอบ Session ได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n- ต้องมีการ Cache Session ที่ถูกเรียกใช้บ่อย\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบ Redis Cluster สำหรับความพร้อมใช้งานสูง\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องมีการป้องกันการโจมตีทั่วไป\n- ต้องมีการบันทึกการเข้าถึง Session ทั้งหมด\n\n## 9. Acceptance Criteria\n\n- Session tokens มีความปลอดภัยทางการเข้ารหัส\n- การตรวจสอบ Session ตอบกลับภายใน 100ms\n- Session ที่หมดอายุส่งคืน 401 Unauthorized\n- Session ที่ไม่ถูกต้องส่งคืน 404 Not Found\n- สามารถเพิกถอน Session ได้ทันที\n- รองรับการจัดเก็บ Session ใน Redis พร้อมการกำหนดค่าอายุ\n- ส่งคืนข้อมูลผู้ใช้ (ID, email, name) สำหรับ Session ที่ถูกต้อง\n\n## 10. Risks และ Mitigation\n\n| Risk                     | Impact   | Probability | Mitigation Strategy               |\n| ------------------------ | -------- | ----------- | --------------------------------- |\n| Redis Server Downtime    | High     | Low         | มี Redis Cluster และ Failover     |\n| Session Token Leakage    | Critical | Low         | มีการใช้ HTTPS และการตรวจสอบ IP   |\n| Session Hijacking        | Critical | Medium      | มีการตรวจสอบ IP และ User Agent    |\n| Session Storage Overflow | Medium   | Low         | มีการจำกัดจำนวน Session ต่อผู้ใช้ |\n\n## 11. Timeline และ Milestones\n\n| Milestone                   | Target Date | Status      |\n| --------------------------- | ----------- | ----------- |\n| Session Management API      | 2025-10-16  | Not Started |\n| Redis Integration           | 2025-10-18  | Not Started |\n| Session Verification System | 2025-10-20  | Not Started |\n| Session Revocation System   | 2025-10-22  | Not Started |\n| Testing                     | 2025-10-24  | Not Started |\n| Production Deployment       | 2025-10-26  | Not Started |\n\n## 12. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.754Z",
          "updatedAt": "2025-10-15T01:51:18.754Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_05 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_05 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_auth_06",
        "title": "OAuth with Verification Codes System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# OAuth with Verification Codes System\n\n## 1. ภาพรวม (Overview)\n\nระบบ OAuth with Verification Codes เป็นส่วนขยายของระบบตรวจสอบสิทธิ์ OAuth ที่ออกแบบมาเพื่อรองรับการเชื่อมต่อกับ Custom GPT Integration โดยเฉพาะ ระบบนี้ทำงานโดยใช้ Verification Codes แทนการใช้ Authorization Code แบบดั้งเดิม ทำให้ผู้ใช้สามารถคัดลอกรหัสยืนยันและนำไปใช้ในบริการของบุคคลที่สามได้อย่างง่าย\n\nระบบนี้ออกแบบมาเพื่อแก้ไขปัญหาในการเชื่อมต่อกับ Custom GPT ที่ต้องการวิธีการตรวจสอบสิทธิ์ที่ง่ายและตรงไปตรงมา โดยยังคงรักษาความปลอดภัยและรองรับการทำงานร่วมกับระบบ OAuth แบบดั้งเดิมไว้เพื่อความเข้ากันได้แบบย้อนหลัง\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถตรวจสอบสิทธิ์สำหรับ Custom GPT Integration ได้อย่างง่าย\n- รองรับการใช้ Verification Codes แทน Authorization Codes\n- อำนวยความสะดวกในการคัดลอกและวางรหัสยืนยัน\n- รักษาความเข้ากันได้แบบย้อนหลังกับระบบ OAuth แบบดั้งเดิม\n- รองรับการส่งคืนไปยังบริการต่างๆ หลังการตรวจสอบสิทธิ์\n- ให้มีประสบการณ์ผู้ใช้ที่ดีในภาษาไทย\n- ลดความซับซ้อนในการบูรณาการกับ Custom GPT\n\n## 3. User Stories\n\n### Story 1: ผู้ใช้เชื่อมต่อกับ Custom GPT ผ่าน Verification Code\n\n**ในฐานะ** ผู้ใช้แพลตฟอร์ม  \n**ฉันต้องการ** เชื่อมต่อบัญชีของฉันกับ Custom GPT  \n**เพื่อที่จะ** ใช้บริการ AI ของ Smart AI Hub ผ่าน Custom GPT\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีหน้าจอเริ่มต้นการเชื่อมต่อที่ชัดเจน\n- [ ] ต้องมีการตรวจสอบสิทธิ์ผ่าน Google OAuth\n- [ ] ต้องมีหน้าจอแสดง Verification Code ที่เข้าใจง่าย\n- [ ] ต้องมีปุ่มคัดลอกรหัสยืนยัน\n- [ ] ต้องมีคำแนะนำในภาษาไทยที่ชัดเจน\n- [ ] ต้องมีการนำทางกลับไปยังบริการต้นทาง\n- [ ] ต้องมีการแจ้งเตือนเมื่อเชื่อมต่อสำเร็จ\n\n### Story 2: นักพัฒนาบูรณาการกับ Custom GPT\n\n**ในฐานะ** นักพัฒนา Custom GPT  \n**ฉันต้องการ** ใช้ Verification Codes เพื่อตรวจสอบสิทธิ์ผู้ใช้  \n**เพื่อที่จะ** ให้ผู้ใช้สามารถเชื่อมต่อกับบริการของฉันได้\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีวิธีการสร้าง Session ID ที่ไม่ซ้ำกัน\n- [ ] ต้องมีการส่งผู้ใช้ไปยังหน้าตรวจสอบสิทธิ์พร้อม Session ID\n- [ ] ต้องมีวิธีการตรวจสอบ Verification Code\n- [ ] ต้องมีการแสดงข้อมูลผู้ใช้สำหรับ Verification Code ที่ถูกต้อง\n- [ ] ต้องมีเอกสาร API ที่ชัดเจน\n- [ ] ต้องมีตัวอย่างโค้ดสำหรับการบูรณาการ\n- [ ] ต้องรองรับการส่งคืนไปยัง URL ต่างๆ\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การเริ่มต้น OAuth ด้วย Session Parameter (OAuth Initiation)\n- การสร้าง Verification Codes (Verification Code Generation)\n- การแสดง Verification Codes บนหน้าเว็บ (Code Display)\n- การจับคู่ Verification Codes กับ Session (Code-Session Mapping)\n- การสนับสนุนพารามิเตอร์ Return To (Return To Support)\n- การรักษาความเข้ากันได้แบบย้อนหลัง (Backward Compatibility)\n- การตรวจสอบ Verification Codes (Code Verification)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการ OAuth Scopes แบบซับซ้อน\n- การจัดการ Refresh Tokens สำหรับ Verification Codes\n- การจัดการ Webhook สำหรับการแจ้งเตือน\n- การจัดการ Multi-tenant Authentication\n- การจัดการ Device Authorization Flow\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                    | Description                     | Request Body                      | Response                   |\n| ------ | --------------------------- | ------------------------------- | --------------------------------- | -------------------------- |\n| GET    | `/auth/oauth/initiate`      | เริ่มต้น OAuth Flow             | Query: `{ session, return_to }`   | `{ redirectUrl }`          |\n| GET    | `/auth/oauth/callback`      | รับ Callback จาก OAuth Provider | Query: `{ code, state, session }` | `{ redirectUrl }`          |\n| GET    | `/auth/verify/:code`        | ตรวจสอบ Verification Code       | -                                 | `{ user, session, valid }` |\n| POST   | `/auth/verify`              | ตรวจสอบ Verification Code       | `{ code }`                        | `{ user, session, valid }` |\n| GET    | `/auth/success`             | หน้าแสดง Verification Code      | Query: `{ code }`                 | HTML Page                  |\n| GET    | `/auth/sessions/:sessionId` | ดึงข้อมูล Session               | -                                 | `{ session, code }`        |\n| DELETE | `/auth/sessions/:sessionId` | ลบ Session                      | -                                 | `{ success }`              |\n\n### 5.2 OAuth Flow with Verification Codes\n\n#### Step 1: Initiation\n\n1. Third-party service สร้าง Session ID ที่ไม่ซ้ำกัน\n2. Third-party service ส่งผู้ใช้ไปยัง:\n   ```\n   https://api.smartaihub.com/auth/google?session={sessionId}&return_to=chatgpt\n   ```\n\n#### Step 2: Authentication\n\n1. ผู้ใช้ตรวจสอบสิทธิ์กับ Google OAuth\n2. System ตรวจสอบข้อมูลผู้ใช้จาก Google\n3. System สร้างหรืออัปเดตข้อมูลผู้ใช้ในระบบ\n\n#### Step 3: Verification Code Generation\n\n1. System สร้าง Verification Code ในรูปแบบ: `VERIFIED-{random_string}`\n2. System จับคู่ Verification Code กับ Session ID\n3. System จัดเก็บข้อมูลใน Redis พร้อม TTL 7 วัน\n\n#### Step 4: Code Display\n\n1. System ส่งผู้ใช้ไปยังหน้าแสดง Verification Code\n2. หน้าเว็บแสดง Verification Code พร้อมปุ่มคัดลอก\n3. มีคำแนะนำในภาษาไทยเกี่ยวกับการใช้รหัส\n\n#### Step 5: Code Verification\n\n1. ผู้ใช้คัดลอก Verification Code\n2. ผู้ใช้วางรหัสใน Custom GPT\n3. Third-party service ส่งรหัยับไปตรวจสอบกับ API\n4. System ตรวจสอบและส่งคืนข้อมูลผู้ใช้\n\n### 5.3 Verification Code Format\n\nVerification Codes จะมีรูปแบบดังนี้:\n\n```\nVERIFIED-{random_string}\n```\n\nโดยที่:\n\n- `VERIFIED` เป็น prefix ที่ระบุว่าเป็น Verification Code\n- `random_string` เป็นสตริงสุ่มความยาว 16 ตัวอักษร (A-Z, 0-9)\n\nตัวอย่าง Verification Code:\n\n```\nVERIFIED-A1B2C3D4E5F6G7H8\n```\n\n### 5.4 Session Data Structure\n\nข้อมูล Session ที่จัดเก็บใน Redis:\n\n```json\n{\n  \"sessionId\": \"session_12345\",\n  \"verificationCode\": \"VERIFIED-A1B2C3D4E5F6G7H8\",\n  \"userId\": \"user_67890\",\n  \"clientId\": \"custom_gpt\",\n  \"returnTo\": \"chatgpt\",\n  \"createdAt\": \"2025-10-15T10:00:00Z\",\n  \"expiresAt\": \"2025-10-22T10:00:00Z\",\n  \"verifiedAt\": \"2025-10-15T10:05:00Z\",\n  \"metadata\": {\n    \"ip\": \"192.168.1.100\",\n    \"userAgent\": \"Mozilla/5.0...\",\n    \"integrationType\": \"custom_gpt\"\n  }\n}\n```\n\n### 5.5 Security Requirements\n\n- Verification Codes ต้องถูกสร้างจาก Cryptographically Secure Random Generator\n- ต้องมีการจำกัดอายุการใช้งานของ Verification Codes (default: 7 วัน)\n- ต้องมีการจำกัดจำนวนครั้งในการตรวจสอบ Verification Code\n- ต้องมีการบันทึกการสร้างและการตรวจสอบ Verification Codes\n- ต้องมีการป้องกันการเดา Verification Codes\n- ต้องมีการตรวจสอบ IP Address สำหรับ Session\n- ต้องมีการรักษาความเข้ากันได้กับ OAuth Flow แบบดั้งเดิม\n\n### 5.6 Frontend Requirements\n\n- มีหน้าแสดง Verification Code ที่ใช้งานง่าย\n- มีปุ่มคัดลอกรหัสที่ทำงานบนทุกเบราว์เซอร์\n- มีคำแนะนำในภาษาไทยที่ชัดเจน\n- มีการแสดงความคืบหน้าในการตรวจสอบสิทธิ์\n- มีการจัดการข้อผิดพลาดอย่างเหมาะสม\n- รองรับการแสดงผลบนอุปกรณ์พกพา\n\n### 5.7 Success Page Design\n\nหน้าแสดง Verification Code ต้องมี:\n\n- หัวข้อ \"การเชื่อมต่อสำเร็จ\" (ภาษาไทย)\n- กล่องแสดง Verification Code ที่ใหญ่ชัด\n- ปุ่ม \"คัดลอกรหัส\" พร้อมไอคอน\n- คำแนะนำ: \"คัดลอกรหัสนี้และวางใน Custom GPT เพื่อเริ่มใช้งาน\"\n- ปุ่ม \"กลับไปยังแอปพลิเคชัน\" ถ้ามี return_to parameter\n- ข้อมูลเพิ่มเติม: รหัสนี้จะหมดอายุใน 7 วัน\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการสร้าง Verification Codes\n- [ ] ทดสอบการจับคู่ Verification Codes กับ Session\n- [ ] ทดสอบการตรวจสอบ Verification Codes\n- [ ] ทดสอบการจัดการอายุ Verification Codes\n- [ ] ทดสอบการสร้าง Session IDs\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ OAuth Flow ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับ Google OAuth\n- [ ] ทดสอบการทำงานร่วมกับ Redis\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการเชื่อมต่อกับ Custom GPT ผ่าน UI\n- [ ] ทดสอบการคัดลอก Verification Code\n- [ ] ทดสอบการตรวจสอบ Verification Code ผ่าน API\n- [ ] ทดสอบการนำทางกลับไปยังบริการต้นทาง\n- [ ] ทดสอบความเข้ากันได้กับ OAuth Flow แบบดั้งเดิม\n\n### 6.4 Browser Compatibility Tests\n\n- [ ] ทดสอบปุ่มคัดลอกบน Google Chrome\n- [ ] ทดสอบปุ่มคัดลอกบน Mozilla Firefox\n- [ ] ทดสอบปุ่มคัดลอกบน Safari\n- [ ] ทดสอบปุ่มคัดลอกบน Microsoft Edge\n- [ ] ทดสอบการแสดงผลบนมือถือ\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมี Google OAuth 2.0 Credentials\n- ต้องมี Redis Server สำหรับจัดเก็บ Session\n- ต้องมีระบบจัดการผู้ใช้\n- ต้องมีระบบตรวจสอบสิทธิ์หลัก\n\n### 7.2 Assumptions\n\n- ผู้ใช้มีบัญชี Google ที่ถูกต้อง\n- บริการของบุคคลที่สามสามารถจัดการ Session IDs ได้\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- ผู้ใช้สามารถคัดลอกและวางข้อความได้\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การสร้าง Verification Code ต้องทำงานได้ภายใน **100ms**\n- การตรวจสอบ Verification Code ต้องทำงานได้ภายใน **100ms**\n- ต้องรองรับการตรวจสอบ Verification Code ได้อย่างน้อย **500 ครั้งต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบสำรองสำหรับ Redis\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องมีการป้องกันการโจมตีทั่วไป\n- ต้องมีการบันทึกการสร้างและการตรวจสอบ Verification Codes\n\n## 9. Acceptance Criteria\n\n- Verification Codes มีความเป็นเอกลักษณ์และปลอดภัย\n- หน้าแสดงผลสำเร็จเป็นมิตรกับผู้ใช้และใช้ภาษาไทย\n- ปุ่มคัดลอกทำงานบนเบราว์เซอร์หลักทั้งหมด\n- การจับคู่ Session ถูกสร้างอย่างถูกต้อง\n- OAuth Flow แบบดั้งเดิมยังคงทำงานได้\n- รองรับพารามิเตอร์ session ใน URL การเริ่มต้น OAuth\n- สร้าง Verification Code หลังจากตรวจสอบสิทธิ์สำเร็จ\n\n## 10. Risks และ Mitigation\n\n| Risk                  | Impact   | Probability | Mitigation Strategy                        |\n| --------------------- | -------- | ----------- | ------------------------------------------ |\n| Code Leakage          | High     | Medium      | มีการจำกัดครั้งในการตรวจสอบและการแจ้งเตือน |\n| Session Hijacking     | Critical | Low         | มีการตรวจสอบ IP และ User Agent             |\n| OAuth Provider Issues | Medium   | Low         | มีทางเลือกอื่นในการตรวจสอบสิทธิ์           |\n| Browser Compatibility | Medium   | Low         | มีการทดสอบบนเบราว์เซอร์หลักทั้งหมด         |\n\n## 11. Timeline และ Milestones\n\n| Milestone                | Target Date | Status      |\n| ------------------------ | ----------- | ----------- |\n| OAuth Initiation API     | 2025-10-16  | Not Started |\n| Verification Code System | 2025-10-18  | Not Started |\n| Success Page UI          | 2025-10-20  | Not Started |\n| Code Verification API    | 2025-10-22  | Not Started |\n| Testing                  | 2025-10-24  | Not Started |\n| Production Deployment    | 2025-10-26  | Not Started |\n\n## 12. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.754Z",
          "updatedAt": "2025-10-15T01:51:18.754Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_06 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_06 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_credit_03",
        "title": "User-Specific Credit Check API",
        "type": "api_spec",
        "category": "documentation",
        "content": "# User-Specific Credit Check API\n\n## 1. ภาพรวม (Overview)\n\nUser-Specific Credit Check API เป็นส่วนสำคัญของระบบจัดการเครดิตของแพลตฟอร์ม Smart AI Hub ที่ออกแบบมาเพื่อให้บริการแก่บุคคลที่สามในการตรวจสอบยอดเครดิตคงเหลือของผู้ใช้ ระบบนี้ทำหน้าที่ในการตรวจสอบว่าผู้ใช้มีเครดิตเพียงพอสำหรับการใช้งานบริการต่างๆ หรือไม่ ก่อนที่จะดำเนินการประมวลผลจริง\n\nระบบนี้ทำงานโดยรับข้อมูลผู้ใช้ผ่าน HTTP Header และข้อมูลบริการผ่าน Request Body จากนั้นตรวจสอบยอดเครดิตคงเหลือในระบบและส่งคืนผลลัพธ์พร้อมข้อมูลยอดเครดิตปัจจุบัน ระบบนี้ถูกออกแบบมาให้ทำงานได้รวดเร็วเพื่อไม่ให้กระทบต่อประสิทธิภาพของบริการหลัก\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้บุคคลที่สามสามารถตรวจสอบยอดเครดิตของผู้ใช้ได้\n- ป้องกันการเรียกใช้บริการเมื่อเครดิตไม่เพียงพอ\n- รับประกันความถูกต้องของการตรวจสอบยอดเครดิต\n- อำนวยความสะดวกในการจัดการเครดิตสำหรับบริการต่างๆ\n- รองรับการตรวจสอบพร้อมกันหลายคำขอ (Concurrent Requests)\n- ให้บริการที่รวดเร็วและมีประสิทธิภาพ\n- ลดความซับซ้อนในการบูรณาการระบบเครดิต\n\n## 3. User Stories\n\n### Story 1: บริการของบุคคลที่สามตรวจสอบเครดิตผู้ใช้\n\n**ในฐานะ** ผู้ให้บริการบุคคลที่สาม  \n**ฉันต้องการ** ตรวจสอบยอดเครดิตของผู้ใช้ก่อนให้บริการ  \n**เพื่อที่จะ** มั่นใจว่าผู้ใช้มีเครดิตเพียงพอสำหรับการใช้งาน\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมี API Endpoint สำหรับตรวจสอบเครดิต\n- [ ] ต้องรับ User ID ผ่าน X-User-ID Header\n- [ ] ต้องรับข้อมูลบริการและต้นทุนผ่าน Request Body\n- [ ] ต้องส่งคืนผลว่ามีเครดิตเพียงพอหรือไม่\n- [ ] ต้องส่งคืนยอดเครดิตปัจจุบัน\n- [ ] ต้องตอบกลับภายใน 200ms\n- [ ] ต้องรองรับการตรวจสอบพร้อมกันหลายคำขอ\n\n### Story 2: ผู้ดูแลระบบตรวจสอบประสิทธิภาพ API\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** ตรวจสอบประสิทธิภาพและการใช้งาน Credit Check API  \n**เพื่อที่จะ** มั่นใจในความเสถียรและประสิทธิภาพของระบบ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องมีการติดตามประสิทธิภาพของ API\n- [ ] ต้องมีการบันทึกการเรียกใช้ API ทั้งหมด\n- [ ] ต้องมีการแจ้งเตือนเมื่อ API ทำงานช้า\n- [ ] ต้องมีรายงานสถิติการใช้งาน API\n- [ ] ต้องมีการตรวจสอบข้อผิดพลาดและการจัดการ\n- [ ] ต้องมีการตรวจสอบความปลอดภัยของ API\n- [ ] ต้องมีการตรวจสอบการใช้งานพร้อมกัน (Concurrency)\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การตรวจสอบยอดเครดิต (Credit Balance Checking)\n- การตรวจสอบความเพียงพอของเครดิต (Credit Sufficiency)\n- การจัดการคำขอพร้อมกัน (Concurrent Request Handling)\n- การจัดการข้อผิดพลาด (Error Handling)\n- การบันทึกการเรียกใช้ API (API Logging)\n- การรับประกันความถูกต้องของข้อมูล (Data Integrity)\n- การปรับปรุงประสิทธิภาพ (Performance Optimization)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การหักเครดิตจริง (Credit Deduction)\n- การจัดการการโอนเครดิต (Credit Transfer)\n- การจัดการส่วนลดและโปรโมชั่น (Discount & Promotion)\n- การจัดการประวัติการใช้เครดิต (Credit History)\n- การจัดการรายงานการเงิน (Financial Reporting)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 API Endpoint\n\n```\nPOST /api/mcp/v1/credits/check\n```\n\n### 5.2 Request Specification\n\n#### Headers:\n\n```\nContent-Type: application/json\nX-User-ID: {user_id}\nX-API-Key: {api_key} (optional, for additional security)\n```\n\n#### Request Body:\n\n```json\n{\n  \"service\": \"string\",\n  \"cost\": \"number\",\n  \"metadata\": {\n    \"request_id\": \"string\",\n    \"client_id\": \"string\",\n    \"additional_info\": \"object\"\n  }\n}\n```\n\n#### Example Request:\n\n```json\n{\n  \"service\": \"gpt-4-turbo\",\n  \"cost\": 10.5,\n  \"metadata\": {\n    \"request_id\": \"req_1234567890\",\n    \"client_id\": \"custom_gpt\",\n    \"model\": \"gpt-4-turbo\",\n    \"estimated_tokens\": 1000\n  }\n}\n```\n\n### 5.3 Response Specification\n\n#### Successful Response (200 OK):\n\n```json\n{\n  \"sufficient\": true,\n  \"balance\": 150.75,\n  \"requested_cost\": 10.5,\n  \"remaining_after_cost\": 140.25,\n  \"currency\": \"credits\",\n  \"user_id\": \"user_12345\",\n  \"timestamp\": \"2025-10-15T10:30:00Z\",\n  \"request_id\": \"req_1234567890\"\n}\n```\n\n#### Insufficient Credits Response (402 Payment Required):\n\n```json\n{\n  \"error\": {\n    \"code\": \"INSUFFICIENT_CREDITS\",\n    \"message\": \"User does not have sufficient credits for this service\",\n    \"details\": {\n      \"current_balance\": 5.25,\n      \"required\": 10.5,\n      \"shortfall\": 5.25\n    },\n    \"timestamp\": \"2025-10-15T10:30:00Z\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n```\n\n#### User Not Found Response (404 Not Found):\n\n```json\n{\n  \"error\": {\n    \"code\": \"USER_NOT_FOUND\",\n    \"message\": \"User with the provided ID does not exist\",\n    \"details\": {\n      \"user_id\": \"invalid_user_id\"\n    },\n    \"timestamp\": \"2025-10-15T10:30:00Z\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n```\n\n### 5.4 Supported Service Types\n\nระบบรองรับประเภทบริการต่อไปนี้:\n\n| Service Type     | Description            | Cost Range              |\n| ---------------- | ---------------------- | ----------------------- |\n| gpt-4-turbo      | GPT-4 Turbo Model      | 8-12 credits/1K tokens  |\n| gpt-3.5-turbo    | GPT-3.5 Turbo Model    | 1-2 credits/1K tokens   |\n| claude-3-opus    | Claude 3 Opus Model    | 12-15 credits/1K tokens |\n| claude-3-sonnet  | Claude 3 Sonnet Model  | 8-10 credits/1K tokens  |\n| claude-3-haiku   | Claude 3 Haiku Model   | 2-3 credits/1K tokens   |\n| image-generation | Image Generation       | 20-50 credits/image     |\n| video-generation | Video Generation       | 100-200 credits/minute  |\n| custom-gpt       | Custom GPT Integration | Variable                |\n\n### 5.5 Security Requirements\n\n- ต้องมีการตรวจสอบ API Key สำหรับบุคคลที่สาม\n- ต้องมีการจำกัดอัตราการเรียกใช้ API (Rate Limiting)\n- ต้องมีการตรวจสอบความถูกต้องของ User ID\n- ต้องมีการบันทึกการเรียกใช้ API ทั้งหมด\n- ต้องมีการป้องกันการโจมตีแบบ Brute Force\n- ต้องมีการเข้ารหัสข้อมูลที่ละเอียดอ่อน\n- ต้องใช้ HTTPS สำหรับทุกการเรียกใช้\n\n### 5.6 Performance Requirements\n\n- API ต้องตอบกลับภายใน **200ms** สำหรับ 95% ของคำขอ\n- ต้องรองรับการเรียกใช้พร้อมกันได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n- ต้องมีการ Cache ข้อมูลยอดเครดิตที่ถูกเรียกใช้บ่อย\n- ต้องมีการจัดการ Database Connection Pool อย่างมีประสิทธิภาพ\n\n### 5.7 Concurrency Handling\n\nระบบต้องรองรับการตรวจสอบเครดิตพร้อมกันหลายคำขอสำหรับผู้ใช้เดียวกัน:\n\n- ใช้ Database Transactions ที่มีความเป็น Isolation สูง\n- ใช้ Row-level Locks สำหรับการอ่านข้อมูลเครดิต\n- ใช้ Optimistic Concurrency Control เพื่อลด Lock Contention\n- มีการ Retry Logic สำหรับการแข่งขันข้อมูล\n\n### 5.8 Error Handling\n\nระบบต้องจัดการข้อผิดพลาดต่อไปนี้:\n\n- 400 Bad Request: ข้อมูลใน Request Body ไม่ถูกต้อง\n- 401 Unauthorized: API Key ไม่ถูกต้องหรือหมดอายุ\n- 404 Not Found: ไม่พบผู้ใช้ที่ระบุ\n- 402 Payment Required: เครดิตไม่เพียงพอ\n- 429 Too Many Requests: เกินอัตราการเรียกใช้ที่กำหนด\n- 500 Internal Server Error: เกิดข้อผิดพลาดภายในเซิร์ฟเวอร์\n- 503 Service Unavailable: บริการไม่พร้อมใช้งานชั่วคราว\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการตรวจสอบยอดเครดิต\n- [ ] ทดสอบการตรวจสอบความเพียงพอของเครดิต\n- [ ] ทดสอบการจัดการข้อผิดพลาดต่างๆ\n- [ ] ทดสอบการตรวจสอบความถูกต้องของข้อมูลนำเข้า\n- [ ] ทดสอบการจัดรูปแบบข้อมูลส่งออก\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการเครดิต\n- [ ] ทดสอบการทำงานร่วมกับระบบจัดการผู้ใช้\n- [ ] ทดสอบการทำงานร่วมกับระบบฐานข้อมูล\n- [ ] ทดสอบการทำงานร่วมกับระบบ Cache\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 Performance Tests\n\n- [ ] ทดสอบประสิทธิภาพภายใต้ภาระงานปกติ\n- [ ] ทดสอบประสิทธิภาพภายใต้ภาระงานสูง\n- [ ] ทดสอบการทำงานพร้อมกัน (Concurrency)\n- [ ] ทดสอบการใช้งาน Cache\n- [ ] ทดสอบ Response Time ภายใต้สถานการณ์ต่างๆ\n\n### 6.4 Security Tests\n\n- [ ] ทดสอบการตรวจสอบ API Key\n- [ ] ทดสอบการจำกัดอัตราการเรียกใช้\n- [ ] ทดสอบการป้องกันการโจมตีแบบ Injection\n- [ ] ทดสอบการป้องกันการโจมตีแบบ Brute Force\n- [ ] ทดสอบการเข้ารหัสข้อมูล\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ต้องมีระบบจัดการเครดิต (Credit Management System)\n- ต้องมีระบบจัดการผู้ใช้ (User Management System)\n- ต้องมีระบบฐานข้อมูลที่เชื่อถือได้\n- ต้องมีระบบ Cache สำหรับประสิทธิภาพ\n\n### 7.2 Assumptions\n\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- บุคคลที่สามมี API Key ที่ถูกต้อง\n- ข้อมูลเครดิตมีความถูกต้องและเป็นปัจจุบันเสมอ\n- ระบบสามารถรองรับภาระงานที่คาดการณ์ไว้ได้\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- API ต้องตอบกลับภายใน **200ms** สำหรับ 95% ของคำขอ\n- ต้องรองรับการเรียกใช้พร้อมกันได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n- ต้องมีการ Cache ข้อมูลยอดเครดิตที่ถูกเรียกใช้บ่อย\n\n### 8.2 Availability\n\n- API ต้องมี Uptime อย่างน้อย **99.9%**\n- ต้องมีระบบ Load Balancing และ Failover\n\n### 8.3 Security\n\n- ต้องมีการตรวจสอบสิทธิ์ทุกครั้ง\n- ต้องมีการป้องกันการโจมตีทั่วไป\n- ต้องมีการบันทึกการเรียกใช้ API ทั้งหมด\n\n## 9. Acceptance Criteria\n\n- ตรวจสอบยอดเครดิตของผู้ใช้อย่างถูกต้อง\n- ส่งคืน 402 เมื่อเครดิตไม่เพียงพอ\n- ส่งคืน 404 เมื่อไม่พบผู้ใช้\n- จัดการคำขอพร้อมกันอย่างถูกต้อง\n- ตอบกลับภายใน 200ms\n- รองรับประเภทบริการและต้นทุนที่แตกต่างกัน\n- ส่งคืนยอดเครดิตปัจจุบันพร้อมข้อมูลอื่นๆ\n\n## 10. Risks และ Mitigation\n\n| Risk               | Impact   | Probability | Mitigation Strategy                    |\n| ------------------ | -------- | ----------- | -------------------------------------- |\n| Performance Issues | High     | Medium      | มีระบบ Cache และ Database Optimization |\n| Race Conditions    | High     | Medium      | มีการจัดการ Concurrency อย่างเหมาะสม   |\n| Data Inconsistency | Critical | Low         | มีการตรวจสอบความถูกต้องของข้อมูล       |\n| API Abuse          | High     | Medium      | มีระบบ Rate Limiting และ Monitoring    |\n\n## 11. Timeline และ Milestones\n\n| Milestone                | Target Date | Status      |\n| ------------------------ | ----------- | ----------- |\n| API Development          | 2025-10-16  | Not Started |\n| Database Integration     | 2025-10-18  | Not Started |\n| Security Implementation  | 2025-10-20  | Not Started |\n| Performance Optimization | 2025-10-22  | Not Started |\n| Testing                  | 2025-10-24  | Not Started |\n| Production Deployment    | 2025-10-26  | Not Started |\n\n## 12. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.755Z",
          "updatedAt": "2025-10-15T01:51:18.755Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_03 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_03 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_credit_04",
        "title": "User-Specific Credit Deduction API",
        "type": "user_story",
        "category": "documentation",
        "content": "# FR-CREDIT-04: User-Specific Credit Deduction API\n\n## 1. Overview\n\nThe User-Specific Credit Deduction API provides a secure and reliable way for third-party services to deduct credits from user balances in the Smart AI Hub platform. This API ensures atomic transactions, proper accounting, and comprehensive audit trails for all credit deductions. The system is designed to handle high-volume requests while maintaining data integrity and preventing race conditions through optimized database operations and transaction management.\n\n## 2. Objectives\n\n1. Provide a secure API endpoint for third-party services to deduct user credits\n2. Ensure atomic credit deductions to prevent race conditions and maintain data integrity\n3. Create comprehensive transaction records with detailed metadata for auditing\n4. Implement proper error handling and rollback mechanisms for failed transactions\n5. Support high-volume concurrent deduction requests with optimal performance\n6. Maintain accurate user balance updates in real-time across all platform services\n7. Provide detailed response information including new balance and transaction IDs\n\n## 3. User Stories\n\n### Story 1: Third-Party Service Credit Deduction\n\nAs a third-party service provider, I want to deduct credits from a user's balance when they use my service, so that I can receive payment for the resources consumed.\n\n**Acceptance Criteria:**\n\n1. The API must accept a valid user ID via the X-User-ID header\n2. The API must validate the user exists before processing the deduction\n3. The API must accept service name, cost, and metadata in the request body\n4. The API must validate that the cost is a positive number\n5. The API must check if the user has sufficient credits before deduction\n6. The API must return a 402 Payment Required status if credits are insufficient\n7. The API must return the new balance and transaction ID on successful deduction\n\n### Story 2: System Transaction Recording\n\nAs a system administrator, I want every credit deduction to be recorded with comprehensive details, so that I can maintain accurate financial records and audit trails.\n\n**Acceptance Criteria:**\n\n1. The system must create a transaction record for every deduction attempt\n2. The transaction record must include the user ID, service name, and amount\n3. The transaction record must include the original balance and new balance\n4. The transaction record must include a timestamp of the deduction\n5. The transaction record must include any metadata provided by the service\n6. The system must assign a unique transaction ID to every deduction\n7. The system must maintain a reference to the service that initiated the deduction\n\n### Story 3: Concurrent Deduction Handling\n\nAs a system architect, I want the credit deduction system to handle multiple concurrent requests safely, so that user balances remain accurate even under high load.\n\n**Acceptance Criteria:**\n\n1. The system must use database transactions to ensure atomic operations\n2. The system must implement row-level locking during balance updates\n3. The system must handle race conditions without data corruption\n4. The system must process deductions in the order they are received\n5. The system must reject duplicate transaction IDs to prevent double charging\n6. The system must maintain performance under concurrent load\n7. The system must provide timeout handling for long-running transactions\n\n## 4. Scope\n\n### In Scope\n\n1. Credit deduction API endpoint with authentication\n2. User balance validation and update mechanisms\n3. Transaction record creation with metadata storage\n4. Atomic transaction handling with rollback capabilities\n5. Concurrent request management with proper locking\n6. Error handling for insufficient credits and invalid requests\n7. Response formatting with new balance and transaction ID\n8. Integration with existing user credit management system\n9. Audit logging for all deduction operations\n10. Rate limiting to prevent abuse\n\n### Out of Scope\n\n1. Credit addition or top-up functionality\n2. Refund or reversal of completed transactions\n3. Credit transfer between users\n4. Subscription-based billing models\n5. Advanced reporting and analytics dashboards\n6. Multi-currency support\n7. Credit expiration management\n8. Promotion or discount code application\n9. Third-party payment gateway integration\n10. Credit balance notifications to users\n\n## 5. Technical Requirements\n\n### 5.1. API Endpoints\n\n#### POST /api/mcp/v1/credits/deduct\n\nDeducts credits from a user's balance for a specific service.\n\n**Request Headers:**\n\n- Content-Type: application/json\n- X-User-ID: string (required) - Unique identifier of the user\n- Authorization: Bearer {token} (required) - Service authentication token\n\n**Request Body:**\n\n```json\n{\n  \"service\": \"string\", // Name of the service requesting deduction\n  \"cost\": 10.5, // Amount of credits to deduct (positive number)\n  \"metadata\": {\n    // Optional additional information\n    \"request_id\": \"string\",\n    \"resource_type\": \"string\",\n    \"usage_details\": {}\n  }\n}\n```\n\n**Success Response (200 OK):**\n\n```json\n{\n  \"status\": \"ok\",\n  \"new_balance\": 89.5,\n  \"transaction_id\": \"txn_1234567890\",\n  \"deducted_amount\": 10.5,\n  \"timestamp\": \"2025-10-15T10:30:00Z\"\n}\n```\n\n**Error Responses:**\n\n- 400 Bad Request: Invalid request parameters\n- 401 Unauthorized: Invalid or missing authentication\n- 402 Payment Required: Insufficient credits\n- 404 Not Found: User not found\n- 409 Conflict: Duplicate transaction ID\n- 429 Too Many Requests: Rate limit exceeded\n- 500 Internal Server Error: System error\n\n### 5.2. Database Schema\n\n#### CreditTransaction Model\n\n```prisma\nmodel CreditTransaction {\n  id              String    @id @default(cuid())\n  userId          String\n  amount          Float\n  type            String    // \"deduction\", \"addition\", \"refund\"\n  status          String    // \"pending\", \"completed\", \"failed\", \"rolled_back\"\n  service         String\n  transactionId   String    @unique\n  previousBalance Float\n  newBalance      Float\n  metadata        Json?\n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n\n  user            User      @relation(fields: [userId], references: [id])\n\n  @@index([userId])\n  @@index([transactionId])\n  @@index([service])\n  @@index([createdAt])\n}\n```\n\n### 5.3. Security Requirements\n\n1. **Authentication**: Services must authenticate using bearer tokens\n2. **Authorization**: Services can only deduct credits for users who have authorized them\n3. **Input Validation**: All inputs must be validated and sanitized\n4. **Rate Limiting**: Implement rate limiting per service and per user\n5. **Audit Logging**: Log all deduction attempts with full details\n6. **Encryption**: Sensitive data must be encrypted at rest\n7. **CORS**: Configure proper CORS policies for API access\n\n### 5.4. Performance Requirements\n\n1. **Response Time**: API responses must be under 200ms (95th percentile)\n2. **Throughput**: Support at least 1000 requests per second\n3. **Concurrency**: Handle at least 100 concurrent deduction requests\n4. **Database Optimization**: Use proper indexing for fast queries\n5. **Caching**: Cache user balance information with proper invalidation\n6. **Connection Pooling**: Use database connection pooling for efficiency\n\n### 5.5. Integration Requirements\n\n1. **User Service**: Integration with user management for validation\n2. **Credit Service**: Integration with credit balance management\n3. **Notification Service**: Optional notifications for low balance alerts\n4. **Audit Service**: Integration with audit logging system\n5. **Monitoring Service**: Integration with system monitoring and alerting\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n\n1. Test credit deduction logic with valid inputs\n2. Test credit deduction with insufficient balance\n3. Test transaction record creation with metadata\n4. Test atomic transaction handling and rollback\n5. Test concurrent deduction handling\n6. Test input validation for all parameters\n7. Test error handling for various failure scenarios\n\n### 6.2. Integration Tests\n\n1. Test API endpoint with authentication\n2. Test database transaction integrity\n3. Test integration with user service\n4. Test integration with credit service\n5. Test rate limiting functionality\n6. Test audit logging integration\n7. Test error propagation across services\n\n### 6.3. End-to-End Tests\n\n1. Test complete deduction flow from API to database\n2. Test concurrent deduction scenarios\n3. Test system behavior under high load\n4. Test error recovery and rollback scenarios\n5. Test API response format and structure\n6. Test transaction ID uniqueness\n7. Test balance accuracy after multiple operations\n\n### 6.4. Performance Tests\n\n1. Load testing with high volume of requests\n2. Stress testing beyond expected capacity\n3. Concurrency testing with multiple simultaneous requests\n4. Database performance under heavy transaction load\n5. Memory usage testing during peak loads\n6. Response time benchmarking\n\n### 6.5. Security Tests\n\n1. Authentication bypass attempts\n2. Injection attacks on input parameters\n3. Rate limiting bypass attempts\n4. Unauthorized access to other user accounts\n5. Data tampering attempts in transit\n6. Privilege escalation testing\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n\n1. User Management Service for user validation\n2. Credit Management Service for balance operations\n3. Database Service (PostgreSQL) for transaction storage\n4. Authentication Service for API security\n5. Monitoring Service for system health\n6. Audit Logging Service for compliance\n\n### Assumptions\n\n1. User IDs are provided and validated by the authentication layer\n2. Services have valid authentication tokens\n3. Database transactions are properly configured\n4. Network connectivity between services is reliable\n5. User balances are maintained in a separate credit service\n6. Metadata structure is flexible and can accommodate various formats\n\n## 8. Non-Functional Requirements\n\n### Performance\n\n- API response time must be less than 200ms for 95% of requests\n- System must support 1000+ requests per second\n- Database queries must be optimized with proper indexing\n- Cache hit rate must be above 90% for user balance queries\n\n### Scalability\n\n- System must scale horizontally to handle increased load\n- Database must support read replicas for query optimization\n- API gateway must handle load balancing effectively\n- System must maintain performance during peak usage times\n\n### Reliability\n\n- System must maintain 99.9% uptime\n- Failed transactions must be automatically rolled back\n- System must recover gracefully from database failures\n- Backup and recovery procedures must be in place\n\n### Security\n\n- All API communications must use HTTPS\n- Sensitive data must be encrypted at rest\n- Access must be controlled through proper authentication\n- System must be compliant with data protection regulations\n\n### Maintainability\n\n- Code must be well-documented and follow coding standards\n- System must provide comprehensive logging for debugging\n- Monitoring and alerting must be in place for system health\n- Regular security audits must be conducted\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - API successfully deducts credits from user balance\n   - Transaction records are created with all required details\n   - System returns appropriate responses for all scenarios\n   - Error handling works correctly for all failure cases\n\n2. **Performance Requirements**\n   - API response time is under 200ms for 95% of requests\n   - System handles 1000+ concurrent requests without degradation\n   - Database operations complete within acceptable time limits\n\n3. **Security Requirements**\n   - API is properly secured with authentication and authorization\n   - Input validation prevents injection attacks\n   - Rate limiting prevents abuse and ensures fair usage\n\n4. **Reliability Requirements**\n   - Transactions are atomic and maintain data integrity\n   - System handles concurrent requests without data corruption\n   - Error recovery mechanisms work as expected\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n\n1. **Race Conditions**: Multiple concurrent deduction requests could lead to incorrect balances\n   - Mitigation: Implement database transactions with row-level locking\n\n2. **Performance Bottlenecks**: High volume of requests could degrade system performance\n   - Mitigation: Implement caching, database optimization, and horizontal scaling\n\n3. **Data Integrity**: System failures could leave balances in inconsistent states\n   - Mitigation: Implement atomic transactions with automatic rollback\n\n### Medium Priority Risks\n\n1. **Security Breaches**: Unauthorized access could lead to fraudulent deductions\n   - Mitigation: Implement strong authentication and authorization mechanisms\n\n2. **Service Dependencies**: Failure in dependent services could impact functionality\n   - Mitigation: Implement circuit breakers and fallback mechanisms\n\n### Low Priority Risks\n\n1. **Data Growth**: Large volume of transaction records could impact database performance\n   - Mitigation: Implement data archiving and partitioning strategies\n\n## 11. Timeline and Milestones\n\n### Phase 1: Core Development (2 weeks)\n\n- API endpoint implementation\n- Database schema creation\n- Basic authentication and authorization\n- Unit testing implementation\n\n### Phase 2: Integration and Testing (2 weeks)\n\n- Integration with dependent services\n- Comprehensive testing implementation\n- Performance optimization\n- Security testing and hardening\n\n### Phase 3: Deployment and Monitoring (1 week)\n\n- Production deployment\n- Monitoring and alerting setup\n- Documentation completion\n- User acceptance testing\n\n## 12. Sign-off\n\n**Product Owner:** ********\\_******** Date: ****\\_****\n\n**Tech Lead:** ********\\_******** Date: ****\\_****\n\n**QA Lead:** ********\\_******** Date: ****\\_****\n\n**DevOps Lead:** ********\\_******** Date: ****\\_****",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.756Z",
          "updatedAt": "2025-10-15T01:51:18.756Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_04 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_04 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "mcp_server",
        "title": "MCP Server",
        "type": "user_story",
        "category": "documentation",
        "content": "# MCP Server\n\n## 1. Overview\n\nThe MCP (Model Context Protocol) Server handles integration with various LLM providers, manages real-time communication via WebSockets, and tracks usage for billing purposes. It serves as the bridge between the Smart AI Hub platform and external AI services, providing a unified interface for accessing multiple AI models while handling provider-specific differences, implementing fault tolerance, and ensuring accurate usage tracking for billing and analytics.\n\n## 2. Objectives\n\n1. Provide seamless integration with multiple LLM providers (OpenAI, Claude, etc.)\n2. Enable real-time communication through WebSocket connections for streaming responses\n3. Implement robust provider fallback logic to ensure high availability\n4. Track token usage accurately for billing and analytics purposes\n5. Integrate with Sora2 video generation API for advanced video creation workflows\n6. Support Custom GPT integration for enhanced video generation capabilities\n7. Implement circuit breaker pattern for fault tolerance and service reliability\n8. Optimize performance through request queuing and connection pooling\n\n## 3. User Stories\n\n### Story 1: Real-time AI Model Interaction\n\nAs a platform user, I want to interact with AI models in real-time, so that I can receive immediate responses and see the generation process as it happens.\n\n**Acceptance Criteria:**\n\n1. Users must be able to connect via WebSocket for real-time communication\n2. Users must receive streaming responses for long-running generations\n3. WebSocket connections must be authenticated and authorized\n4. Users must be able to cancel ongoing requests\n5. Connection status must be clearly indicated in the UI\n6. Reconnection must be automatic for temporary network issues\n7. Multiple concurrent requests must be supported per user\n\n### Story 2: Multi-Provider AI Model Access\n\nAs a platform user, I want to access different AI models from various providers, so that I can choose the best model for my specific use case.\n\n**Acceptance Criteria:**\n\n1. Users must be able to select from multiple LLM providers\n2. Users must be able to choose different models within each provider\n3. Automatic provider switching must occur when one fails\n4. Provider-specific features must be properly abstracted\n5. Model capabilities and pricing must be clearly displayed\n6. Provider status and availability must be shown to users\n7. Fallback between providers must be transparent to users\n\n### Story 3: Video Generation with Sora2\n\nAs a content creator, I want to generate videos using the Sora2 API, so that I can create high-quality video content from text descriptions.\n\n**Acceptance Criteria:**\n\n1. Users must be able to submit video generation requests with text prompts\n2. Users must be able to specify video parameters (duration, resolution, style)\n3. Video generation progress must be trackable through status updates\n4. Completed videos must be accessible via secure URLs\n5. Video generation costs must be clearly calculated and deducted\n6. Users must be able to preview videos before finalizing\n7. Video generation requests must be queued and processed efficiently\n\n### Story 4: Enhanced Video Workflows with Custom GPT\n\nAs a video creator, I want to use Custom GPT assistance to enhance my video generation workflow, so that I can create better videos with AI-powered prompt optimization.\n\n**Acceptance Criteria:**\n\n1. Users must be able to submit video workflow requests with GPT assistance\n2. Custom GPT must analyze and enhance original prompts\n3. Enhanced prompts must be used for Sora2 video generation\n4. Users must be able to review and modify enhanced prompts\n5. Workflow progress must be tracked at each step\n6. Credit costs must include both GPT assistance and video generation\n7. Workflow results must be stored for future reference\n\n### Story 5: Usage Tracking and Billing\n\nAs a platform administrator, I want to track all AI model usage accurately, so that I can bill users correctly and analyze platform utilization.\n\n**Acceptance Criteria:**\n\n1. All API requests must be logged with detailed usage metrics\n2. Token usage must be accurately tracked for each provider\n3. Credit costs must be calculated based on actual usage\n4. Usage data must be available for billing and analytics\n5. Usage patterns must be analyzable for optimization\n6. Real-time usage monitoring must be available\n7. Usage alerts must be configurable for budget management\n\n## 4. Scope\n\n### In Scope\n\n1. WebSocket server for real-time communication\n2. Integration with multiple LLM providers (OpenAI, Claude)\n3. Provider fallback logic with circuit breaker pattern\n4. Request/response transformation between platform and provider formats\n5. Token usage tracking and credit deduction\n6. Sora2 video generation API integration\n7. Custom GPT integration for enhanced workflows\n8. Request queuing with BullMQ for load management\n9. Security features including authentication and input validation\n10. Performance optimizations and monitoring\n\n### Out of Scope\n\n1. User authentication and session management (handled by auth-service)\n2. Credit balance management (handled by core-service)\n3. Payment processing for credit purchases\n4. Advanced video editing capabilities\n5. Custom AI model training and fine-tuning\n6. Multi-modal AI capabilities beyond text and video\n7. Advanced analytics and business intelligence\n8. Content moderation and filtering\n9. API versioning beyond basic implementation\n10. Batch processing of multiple requests\n\n## 5. Technical Requirements\n\n### 5.1. Technology Stack\n\n- **Runtime**: Node.js 20 LTS\n- **Framework**: Express.js 4.x\n- **Language**: TypeScript 5.x\n- **Port**: 3003\n- **WebSocket**: ws library\n- **Queue**: BullMQ for request management\n- **Circuit Breaker**: opossum for fault tolerance\n\n### 5.2. Core Components\n\n#### WebSocket Server\n\n- Real-time bidirectional communication with clients\n- Connection management and authentication\n- Request routing and response streaming\n- Connection rate limiting and monitoring\n\n#### Provider Integration Layer\n\n- OpenAI client wrapper with authentication\n- Anthropic (Claude) client wrapper\n- Request/response transformation utilities\n- Provider-specific configuration management\n\n#### Request Management System\n\n- BullMQ for request queuing and processing\n- Priority-based request handling\n- Concurrent request limiting per user\n- Request lifecycle tracking\n\n### 5.3. WebSocket Protocol\n\n#### Client → Server\n\n```typescript\ninterface MCPRequest {\n  id: string;\n  type: 'completion' | 'chat' | 'embedding';\n  provider: 'openai' | 'claude' | 'auto';\n  model: string;\n  messages?: Message[];\n  prompt?: string;\n  stream: boolean;\n  maxTokens?: number;\n}\n```\n\n#### Server → Client (Streaming)\n\n```typescript\ninterface MCPStreamChunk {\n  id: string;\n  type: 'chunk' | 'done' | 'error';\n  data?: string;\n  usage?: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n  error?: {\n    code: string;\n    message: string;\n  };\n}\n```\n\n### 5.4. Provider Fallback Logic\n\n```typescript\nconst providerPriority = ['openai', 'claude'];\n\nasync function executeWithFallback(request: MCPRequest): Promise<MCPResponse> {\n  let lastError: Error;\n\n  for (const provider of providerPriority) {\n    try {\n      const result = await providers[provider].execute(request);\n      return result;\n    } catch (error) {\n      lastError = error;\n      logger.warn(`Provider ${provider} failed, trying next`, { error });\n\n      // If rate limited, add delay\n      if (error.code === 'RATE_LIMIT_EXCEEDED') {\n        await sleep(5000);\n      }\n    }\n  }\n\n  throw new AppError('ALL_PROVIDERS_FAILED', 'All LLM providers failed', { lastError });\n}\n```\n\n### 5.5. Sora2 Video Generation\n\n#### Video Request Structure\n\n```typescript\ninterface Sora2VideoRequest {\n  prompt: string;\n  duration: number; // seconds\n  resolution: '720p' | '1080p' | '4K';\n  style?: string;\n  aspectRatio?: string;\n  userId: string;\n  sessionId: string;\n}\n```\n\n#### API Endpoints\n\n```\nPOST /api/mcp/sora2/generate    // Generate video\nGET /api/mcp/sora2/status/:id    // Check video status\nGET /api/mcp/sora2/video/:id     // Get video URL\n```\n\n### 5.6. Custom GPT Integration\n\n#### Video Workflow Request\n\n```typescript\ninterface VideoWorkflowRequest {\n  workflow: 'text-to-video' | 'image-to-video' | 'video-enhancement';\n  input: {\n    text?: string;\n    imageUrl?: string;\n    videoUrl?: string;\n  };\n  parameters: {\n    style?: string;\n    duration?: number;\n    resolution?: string;\n    enhancementType?: string;\n  };\n  sessionId: string;\n}\n```\n\n### 5.7. Circuit Breaker Pattern\n\n```typescript\nimport CircuitBreaker from 'opossum';\n\nconst options = {\n  timeout: 30000, // 30 seconds\n  errorThresholdPercentage: 50,\n  resetTimeout: 30000, // Try again after 30s\n};\n\nconst breaker = new CircuitBreaker(callOpenAI, options);\n\nbreaker.on('open', () => {\n  logger.error('Circuit breaker opened for OpenAI');\n  // Switch to Claude\n});\n```\n\n### 5.8. Security Requirements\n\n1. **Authentication**: JWT token validation for all requests\n2. **Authorization**: Role-based access control for different features\n3. **Input Validation**: Comprehensive validation and sanitization\n4. **Rate Limiting**: Prevent abuse through rate limiting\n5. **Usage Tracking**: Monitor and log all API usage\n6. **WebSocket Security**: Secure connection establishment\n\n### 5.9. Performance Requirements\n\n1. **Response Time**: WebSocket messages under 100ms latency\n2. **Throughput**: Support at least 1000 concurrent connections\n3. **Provider Response**: Handle provider responses within 30 seconds\n4. **Queue Processing**: Process queued requests within 5 seconds\n5. **Memory Usage**: Keep memory usage under 1GB\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n\n1. Test WebSocket message handling\n2. Test provider integration and transformation\n3. Test circuit breaker functionality\n4. Test request queuing and processing\n5. Test usage tracking and logging\n6. Test error handling and recovery\n7. Test authentication and authorization\n\n### 6.2. Integration Tests\n\n1. Test end-to-end request flow from client to provider\n2. Test WebSocket connection lifecycle\n3. Test provider fallback scenarios\n4. Test Sora2 video generation integration\n5. Test Custom GPT workflow integration\n6. Test usage tracking accuracy\n7. Test circuit breaker state transitions\n\n### 6.3. Performance Tests\n\n1. Load testing with high volume of WebSocket connections\n2. Stress testing beyond expected capacity\n3. Provider response time benchmarking\n4. Queue processing performance testing\n5. Memory usage profiling under load\n6. Concurrent request handling testing\n\n### 6.4. Security Tests\n\n1. Authentication bypass attempts\n2. Authorization validation testing\n3. Input sanitization and injection prevention\n4. Rate limiting effectiveness\n5. WebSocket security validation\n6. Usage tracking manipulation attempts\n\n### 6.5. End-to-End Tests\n\n1. Complete AI model interaction workflow\n2. Video generation with Sora2 integration\n3. Custom GPT-enhanced video workflow\n4. Multi-provider fallback scenarios\n5. Real-time streaming response testing\n6. Usage tracking and billing verification\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n\n1. **OpenAI API**: For GPT model integration\n2. **Anthropic API**: For Claude model integration\n3. **Sora2 API**: For video generation capabilities\n4. **Custom GPT Service**: For enhanced workflow integration\n5. **Authentication Service**: For user validation\n6. **Core Service**: For credit management and deduction\n\n### Assumptions\n\n1. LLM provider APIs are available and properly configured\n2. Sora2 API is accessible with proper authentication\n3. Custom GPT service is available for workflow integration\n4. WebSocket connections are supported by client applications\n5. Network connectivity to external providers is reliable\n6. Rate limits from providers are understood and managed\n\n## 8. Non-Functional Requirements\n\n### Availability\n\n- Service must maintain 99.9% uptime\n- Automatic fallback when providers are unavailable\n- Graceful degradation during high load\n- Health check endpoints for monitoring\n\n### Performance\n\n- WebSocket message latency under 100ms\n- Support at least 1000 concurrent connections\n- Provider response handling within 30 seconds\n- Efficient memory usage and garbage collection\n\n### Security\n\n- All connections properly authenticated\n- Input validation prevents injection attacks\n- Rate limiting prevents abuse\n- Usage data is accurately tracked and secured\n\n### Scalability\n\n- Horizontal scaling through container orchestration\n- Efficient connection pooling to providers\n- Queue-based request handling for load management\n- Auto-scaling based on connection and request metrics\n\n### Maintainability\n\n- Clean, well-documented code following best practices\n- Comprehensive test coverage\n- Modular architecture for easy updates\n- Configuration management for different providers\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - WebSocket connections work reliably for real-time communication\n   - Multiple LLM providers are properly integrated\n   - Provider fallback ensures service availability\n   - Sora2 video generation works as specified\n   - Custom GPT integration enhances video workflows\n   - Usage tracking is accurate and comprehensive\n\n2. **Performance Requirements**\n   - WebSocket latency is under 100ms\n   - System handles expected concurrent connections\n   - Provider responses are processed efficiently\n   - Queue processing handles load effectively\n\n3. **Security Requirements**\n   - All connections are properly authenticated\n   - Input validation prevents attacks\n   - Rate limiting prevents abuse\n   - Usage data is secure and accurate\n\n4. **Reliability Requirements**\n   - Service maintains high availability\n   - Provider failures are handled gracefully\n   - Circuit breaker prevents cascading failures\n   - Monitoring provides visibility into system health\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n\n1. **Provider Outages**: External provider failures could affect service availability\n   - Mitigation: Implement multiple providers and fallback logic\n\n2. **Performance Bottlenecks**: High volume of requests could degrade performance\n   - Mitigation: Implement queuing, connection pooling, and horizontal scaling\n\n3. **Cost Overruns**: Uncontrolled usage could lead to excessive costs\n   - Mitigation: Implement strict usage tracking and credit limits\n\n### Medium Priority Risks\n\n1. **WebSocket Connection Limits**: Browser limits could affect concurrent connections\n   - Mitigation: Implement connection pooling and optimization\n\n2. **Provider API Changes**: API changes could break integration\n   - Mitigation: Implement adapter pattern and stay updated with providers\n\n### Low Priority Risks\n\n1. **Queue Overflow**: High request volume could overwhelm queues\n   - Mitigation: Implement queue monitoring and auto-scaling\n\n## 11. Timeline and Milestones\n\n### Phase 1: Core Implementation (3 weeks)\n\n- WebSocket server implementation\n- Basic provider integration (OpenAI, Claude)\n- Request/response handling\n- Basic authentication and security\n\n### Phase 2: Advanced Features (3 weeks)\n\n- Provider fallback and circuit breaker\n- Request queuing with BullMQ\n- Usage tracking and logging\n- Performance optimization\n\n### Phase 3: Video Integration (2 weeks)\n\n- Sora2 API integration\n- Video generation workflows\n- Custom GPT integration\n- Enhanced error handling\n\n### Phase 4: Testing and Deployment (2 weeks)\n\n- Comprehensive testing\n- Performance tuning\n- Production deployment\n- Monitoring and alerting setup\n\n## 12. Sign-off\n\n**Product Owner:** ********\\_******** Date: ****\\_****\n\n**Tech Lead:** ********\\_******** Date: ****\\_****\n\n**QA Lead:** ********\\_******** Date: ****\\_****\n\n**DevOps Lead:** ********\\_******** Date: ****\\_****",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.756Z",
          "updatedAt": "2025-10-15T01:51:18.756Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "mcp_server references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "mcp_server references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "permission",
        "title": "Role-Based Permission and Authorization System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Role-Based Permission and Authorization System\n\n## 1. ภาพรวม (Overview)\n\nระบบสิทธิ์และการอนุญาต (Permission and Authorization System) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับควบคุมการเข้าถึงทรัพยากรต่างๆ ภายในระบบ ระบบนี้ใช้โมเดล Role-Based Access Control (RBAC) โดยมีการเชื่อมโยงระหว่างผู้ใช้ (Users) บทบาท (Roles) และสิทธิ์ (Permissions) เพื่อให้การจัดการสิทธิ์การเข้าถึงมีความยืดหยุ่นและปลอดภัย\n\nระบบนี้ทำงานร่วมกับระบบตรวจสอบสิทธิ์ (Authentication) โดยหลังจากผู้ใช้ล็อกอินเข้าสู่ระบบแล้ว ระบบจะตรวจสอบสิทธิ์ของผู้ใช้ก่อนทำการกระทำใดๆ กับทรัพยากรในระบบ ไม่ว่าจะเป็นการอ่านข้อมูล แก้ไข ลบ หรือดำเนินการอื่นๆ\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถควบคุมการเข้าถึงทรัพยากรในระบบได้อย่างละเอียดและแม่นยำ\n- ป้องกันการเข้าถึงทรัพยากรโดยไม่ได้รับอนุญาต\n- รองรับการจัดการสิทธิ์แบบ Role-Based ที่สามารถกำหนดและแก้ไขได้ง่าย\n- อำนวยความสะดวกในการตรวจสอบสิทธิ์ผู้ใช้ก่อนการดำเนินการ\n- ลดความซับซ้อนในการจัดการสิทธิ์ผ่านการใช้ Role hierarchy และ Permission inheritance\n- รองรับการตรวจสอบและติดตามการเปลี่ยนแปลงสิทธิ์ผ่านระบบ Audit Log\n- ทำงานได้อย่างรวดเร็วผ่านการใช้งาน Cache สำหรับข้อมูลสิทธิ์\n\n## 3. User Stories\n\n### Story 1: ผู้ดูแลระบบกำหนดสิทธิ์ให้กับบทบาท\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** กำหนดสิทธิ์การเข้าถึงทรัพยากรต่างๆ ให้กับบทบาท (Role) ต่างๆ  \n**เพื่อที่จะ** ควบคุมการเข้าถึงของผู้ใช้ที่มีบทบาทต่างๆ ในระบบ\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอการจัดการบทบาทต้องมีส่วนสำหรับจัดการสิทธิ์\n- [ ] ต้องสามารถเพิ่มสิทธิ์ให้กับบทบาทได้\n- [ ] ต้องสามารถลบสิทธิ์จากบทบาทได้\n- [ ] ต้องสามารถแก้ไขรายละเอียดของสิทธิ์ได้\n- [ ] ต้องมีการแสดงรายการสิทธิ์ทั้งหมดที่บทบาทนั้นมี\n- [ ] ต้องมีการค้นหาและกรองสิทธิ์ตามทรัพยากรหรือการกระทำ\n- [ ] ต้องมีการบันทึกการเปลี่ยนแปลงสิทธิ์ในระบบ Audit Log\n\n### Story 2: ระบบตรวจสอบสิทธิ์ก่อนทำงาน\n\n**ในฐานะ** ระบบแอปพลิเคชัน  \n**ฉันต้องการ** ตรวจสอบสิทธิ์ของผู้ใช้ก่อนทำการกระทำใดๆ กับทรัพยากร  \n**เพื่อที่จะ** ป้องกันการเข้าถึงทรัพยากรโดยไม่ได้รับอนุญาต\n\n**Acceptance Criteria:**\n\n- [ ] ทุก API Endpoint ต้องมีการตรวจสอบสิทธิ์ก่อนดำเนินการ\n- [ ] ต้องมี Middleware สำหรับตรวจสอบสิทธิ์โดยอัตโนมัติ\n- [ ] ต้องรองรับการตรวจสอบสิทธิ์แบบ Resource-level\n- [ ] ต้องมีการ Cache ข้อมูลสิทธิ์เพื่อเพิ่มประสิทธิภาพ\n- [ ] ต้องส่งคืนข้อความแจ้งเตือนเมื่อไม่มีสิทธิ์เข้าถึง\n- [ ] ต้องมีการบันทึกการพยายามเข้าถึงโดยไม่ได้รับอนุญาต\n- [ ] ต้องรองรับการตรวจสอบสิทธิ์แบบ Multiple permissions สำหรับการกระทำที่ซับซ้อน\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การสร้าง อ่าน อัปเดต และลบสิทธิ์ (Permission CRUD Operations)\n- การตรวจสอบสิทธิ์ผ่าน Middleware\n- การจัดการความสัมพันธ์ระหว่างบทบาทและสิทธิ์ (Role-Permission Mapping)\n- การกำหนดสิทธิ์ในระดับทรัพยากร (Resource-level Permissions)\n- การตรวจสอบสิทธิ์แบบ Hierarchical (Permission Hierarchy)\n- การ Cache ข้อมูลสิทธิ์เพื่อประสิทธิภาพ\n- การบันทึกการเปลี่ยนแปลงสิทธิ์ (Audit Log)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การกำหนดสิทธิ์แบบไดนามิกขณะทำงาน (Dynamic Permissions at Runtime)\n- การมอบหมายสิทธิ์ (Permission Delegation)\n- สิทธิ์ที่ขึ้นอยู่กับเวลา (Time-based Permissions)\n- การจัดการสิทธิ์แบบ Attribute-Based Access Control (ABAC)\n- การจัดการสิทธิ์ผ่านการลงนามดิจิทัล (Digital Signatures)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                                       | Description             | Request Body                                     | Response                     |\n| ------ | ---------------------------------------------- | ----------------------- | ------------------------------------------------ | ---------------------------- |\n| POST   | `/api/permissions`                             | สร้างสิทธิ์ใหม่         | `{ name, description, resource, action, scope }` | `{ permission }`             |\n| GET    | `/api/permissions`                             | ดึงรายการสิทธิ์ทั้งหมด  | Query: `{ page, limit, resource, action }`       | `{ permissions, total }`     |\n| GET    | `/api/permissions/:id`                         | ดึงข้อมูลสิทธิ์ตาม ID   | -                                                | `{ permission }`             |\n| PUT    | `/api/permissions/:id`                         | อัปเดตข้อมูลสิทธิ์      | `{ name, description, resource, action, scope }` | `{ permission }`             |\n| DELETE | `/api/permissions/:id`                         | ลบสิทธิ์                | -                                                | `{ success: true }`          |\n| POST   | `/api/roles/:roleId/permissions`               | เพิ่มสิทธิ์ให้บทบาท     | `{ permissionId }`                               | `{ rolePermission }`         |\n| DELETE | `/api/roles/:roleId/permissions/:permissionId` | ลบสิทธิ์จากบทบาท        | -                                                | `{ success: true }`          |\n| GET    | `/api/roles/:roleId/permissions`               | ดึงรายการสิทธิ์ของบทบาท | -                                                | `{ permissions }`            |\n| POST   | `/api/check-permission`                        | ตรวจสอบสิทธิ์ของผู้ใช้  | `{ userId, resource, action }`                   | `{ hasPermission: boolean }` |\n\n### 5.2 Database Schema\n\n```prisma\nmodel Permission {\n  id          String   @id @default(uuid())\n  name        String   @unique\n  description String?\n  resource    String   // users, credits, services, etc.\n  action      String   // create, read, update, delete, admin\n  scope       String?  // global, resource, own\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  roles       RolePermission[]\n\n  @@unique([resource, action, scope])\n  @@map(\"permissions\")\n}\n\nmodel RolePermission {\n  id           String @id @default(uuid())\n  roleId       String\n  permissionId String\n  createdAt    DateTime @default(now())\n\n  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)\n  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)\n\n  @@unique([roleId, permissionId])\n  @@map(\"role_permissions\")\n}\n```\n\n### 5.3 Security Requirements\n\n- ทุก API Endpoint ต้องมีการตรวจสอบสิทธิ์ก่อนดำเนินการ\n- ต้องมี Middleware สำหรับตรวจสอบสิทธิ์โดยอัตโนมัติ\n- ต้องมีการ Cache ข้อมูลสิทธิ์เพื่อประสิทธิภาพ (Response Time ไม่เกิน 50ms)\n- ต้องมี Audit Log สำหรับการเปลี่ยนแปลงสิทธิ์\n- ต้องป้องกันการโจมตีแบบ Permission Escalation\n- ต้องมีการเข้ารหัสข้อมูลสำคัญในฐานข้อมูล\n\n### 5.4 Frontend Requirements\n\n- ใช้ React Context สำหรับจัดการสิทธิ์ในแอปพลิเคชัน\n- มี Higher-Order Component สำหรับป้องกันการเข้าถึง UI Components\n- มีการแสดงผล UI ตามสิทธิ์ของผู้ใช้ (Permission-based Rendering)\n- มีการตรวจสอบสิทธิ์ในระดับ Route และ Component\n- มีการแสดงข้อความแจ้งเตือนเมื่อไม่มีสิทธิ์เข้าถึง\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการสร้างสิทธิ์ (Permission Creation)\n- [ ] ทดสอบการตรวจสอบสิทธิ์ (Permission Checking Logic)\n- [ ] ทดสอบการสืบทอดสิทธิ์ (Permission Inheritance)\n- [ ] ทดสอบกลไกการ Cache (Cache Mechanism)\n- [ ] ทดสอบการจัดการสิทธิ์แบบ Resource-level\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานของ Middleware\n- [ ] ทดสอบการจัดการความสัมพันธ์ระหว่างบทบาทและสิทธิ์\n- [ ] ทดสอบการตรวจสอบสิทธิ์แบบ Multi-permission\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการกำหนดสิทธิ์ผ่าน Admin UI\n- [ ] ทดสอบการตรวจสอบสิทธิ์ในหน้า UI ต่างๆ\n- [ ] ทดสอบการแสดงผล UI ตามสิทธิ์ของผู้ใช้\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ระบบต้องการ PostgreSQL Database สำหรับจัดเก็บข้อมูลสิทธิ์\n- ต้องมีระบบ Authentication ที่ทำงานได้เต็มรูปแบบ\n- ต้องมี Redis สำหรับจัดเก็บข้อมูลสิทธิ์ที่ใช้บ่อย (Cache)\n- ต้องมีระบบ Role Management ที่เชื่อมโยงกับระบบสิทธิ์\n\n### 7.2 Assumptions\n\n- ผู้ใช้ต้องล็อกอินเข้าสู่ระบบก่อนทำการกระทำใดๆ\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- ข้อมูลสิทธิ์จะถูกโหลดเมื่อผู้ใช้ล็อกอินและ Cache ไว้\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบสิทธิ์ต้องทำงานได้ภายใน **50ms** (P95)\n- การโหลดข้อมูลสิทธิ์ต้องเสร็จภายใน **100ms**\n- รองรับการตรวจสอบสิทธิ์ได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีการ Backup ข้อมูลสิทธิ์ทุกวัน\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลสิทธิ์ที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการโจมตีแบบ Permission Escalation\n- ต้องมีการบันทึกการเปลี่ยนแปลงสิทธิ์ทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                     | Impact   | Probability | Mitigation Strategy                                             |\n| ------------------------ | -------- | ----------- | --------------------------------------------------------------- |\n| Permission Cache Stale   | High     | Medium      | ใช้ TTL สำหรับ Cache และมีกลไก Invalidate เมื่อมีการเปลี่ยนแปลง |\n| Complex Permission Logic | Medium   | High        | ใช้ Unit Tests ครอบคลุมและมีเอกสารอธิบายการทำงานอย่างละเอียด    |\n| Performance Issues       | High     | Low         | ใช้ Redis Cache และ Database Indexing อย่างเหมาะสม              |\n| Permission Escalation    | Critical | Low         | ตรวจสอบสิทธิ์ทุกครั้งก่อนดำเนินการและมี Audit Log               |\n\n## 10. Timeline และ Milestones\n\n| Milestone               | Target Date | Status      |\n| ----------------------- | ----------- | ----------- |\n| Database Schema Design  | 2025-10-16  | Not Started |\n| Backend API Development | 2025-10-18  | Not Started |\n| Permission Middleware   | 2025-10-20  | Not Started |\n| Frontend Integration    | 2025-10-22  | Not Started |\n| Testing                 | 2025-10-24  | Not Started |\n| Production Deployment   | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.757Z",
          "updatedAt": "2025-10-15T01:51:18.757Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "permission references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "permission references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "permission references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "permission references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "promo_code",
        "title": "Promo Code Management System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Promo Code Management System\n\n## 1. ภาพรวม (Overview)\n\nระบบจัดการโปรโมชั่นโค้ด (Promo Code Management System) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับสร้าง จัดการ และติดตามโปรโมชั่นโค้ดต่างๆ ที่ให้สิทธิประโยชน์แก่ผู้ใช้ ระบบนี้ทำงานร่วมกับระบบบัญชีเครดิตและระบบการใช้งานบริการต่างๆ ภายในแพลตฟอร์ม\n\nระบบนี้ทำงานโดยสร้างโปรโมชั่นโค้ดที่มีเงื่อนไขต่างๆ เช่น มูลค่าเครดิต จำนวนครั้งที่ใช้ได้ วันหมดอายุ และเงื่อนไขอื่นๆ ผู้ใช้สามารถใช้โปรโมชั่นโค้ดเหล่านี้เพื่อรับเครดิตเพิ่มหรือส่วนลดในการใช้บริการต่างๆ ภายใน Smart AI Hub\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถสร้างและจัดการโปรโมชั่นโค้ดได้อย่างง่ายดาย\n- รองรับเงื่อนไขที่หลากหลายสำหรับโปรโมชั่น\n- ป้องกันการใช้โปรโมชั่นโค้ดโดยไม่ได้รับอนุญาต\n- อำนวยความสะดวกในการติดตามการใช้งานโปรโมชั่น\n- รองรับการสร้างโปรโมชั่นสำหรับกลุ่มผู้ใช้เฉพาะ\n- ทำงานร่วมกับระบบบัญชีเครดิตอย่างมีประสิทธิภาพ\n- ลดความซับซ้อนในการจัดการโปรโมชั่น\n\n## 3. User Stories\n\n### Story 1: ผู้ดูแลระบบสร้างโปรโมชั่นโค้ด\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** สร้างโปรโมชั่นโค้ดสำหรับแจกเครดิตให้ผู้ใช้  \n**เพื่อที่จะ** ส่งเสริมการใช้งานบริการต่างๆ ภายในแพลตฟอร์ม\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอสร้างโปรโมชั่นต้องมีช่องกรอกโค้ด\n- [ ] ต้องมีช่องกำหนดมูลค่าเครดิต\n- [ ] ต้องมีตัวเลือกกำหนดจำนวนครั้งที่ใช้ได้\n- [ ] ต้องมีตัวเลือกกำหนดวันหมดอายุ\n- [ ] ต้องมีช่องกรอกรายละเอียดเพิ่มเติม\n- [ ] ต้องมีการแสดงตัวอย่างโปรโมชั่นก่อนบันทึก\n- [ ] ต้องมีการบันทึกการสร้างโปรโมชั่นในระบบ\n\n### Story 2: ผู้ใช้ใช้โปรโมชั่นโค้ด\n\n**ในฐานะ** ผู้ใช้งาน  \n**ฉันต้องการ** ใช้โปรโมชั่นโค้ดเพื่อรับเครดิตเพิ่ม  \n**เพื่อที่จะ** ใช้บริการต่างๆ ภายในแพลตฟอร์มได้มากขึ้น\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอเติมเงินต้องมีช่องใส่โปรโมชั่นโค้ด\n- [ ] ต้องมีการตรวจสอบความถูกต้องของโค้ด\n- [ ] ต้องแสดงมูลค่าเครดิตที่จะได้รับ\n- [ ] ต้องมีการตรวจสอบวันหมดอายุของโค้ด\n- [ ] ต้องมีการตรวจสอบจำนวนครั้งที่ใช้ได้\n- [ ] ต้องมีการแจ้งเตือนเมื่อใช้โค้ดสำเร็จ\n- [ ] ต้องมีการบันทึกการใช้โค้ดในระบบ\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การสร้างโปรโมชั่นโค้ด (Promo Code Creation)\n- การจัดการโปรโมชั่นโค้ด (Promo Code Management)\n- การตรวจสอบความถูกต้องของโค้ด (Promo Code Validation)\n- การใช้โปรโมชั่นโค้ด (Promo Code Redemption)\n- การติดตามการใช้งานโปรโมชั่น (Usage Tracking)\n- การจัดการเงื่อนไขโปรโมชั่น (Promo Conditions)\n- การบันทึกประวัติการใช้โปรโมชั่น (Redemption History)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การสร้างโปรโมชั่นแบบไดนามิกขณะทำงาน (Dynamic Promo Generation)\n- การจัดการโปรโมชั่นแบบมีเงื่อนไขซับซ้อน (Complex Conditional Promos)\n- การจัดการโปรโมชั่นแบบกลุ่ม (Group-based Promotions)\n- การจัดการโปรโมชั่นแบบแบ่งปัน (Referral Promotions)\n- การจัดการโปรโมชั่นแบบลำดับชั้น (Tiered Promotions)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                           | Description                   | Request Body                                         | Response                         |\n| ------ | ---------------------------------- | ----------------------------- | ---------------------------------------------------- | -------------------------------- |\n| POST   | `/api/promo-codes`                 | สร้างโปรโมชั่นโค้ดใหม่        | `{ code, credits, maxUses, expiresAt, description }` | `{ promoCode }`                  |\n| GET    | `/api/promo-codes`                 | ดึงรายการโปรโมชั่นโค้ดทั้งหมด | Query: `{ page, limit, active }`                     | `{ promoCodes, total }`          |\n| GET    | `/api/promo-codes/:id`             | ดึงข้อมูลโปรโมชั่นโค้ดตาม ID  | -                                                    | `{ promoCode }`                  |\n| PUT    | `/api/promo-codes/:id`             | อัปเดตข้อมูลโปรโมชั่นโค้ด     | `{ credits, maxUses, expiresAt, active }`            | `{ promoCode }`                  |\n| DELETE | `/api/promo-codes/:id`             | ลบโปรโมชั่นโค้ด               | -                                                    | `{ success: true }`              |\n| POST   | `/api/promo-codes/validate`        | ตรวจสอบความถูกต้องของโค้ด     | `{ code, userId }`                                   | `{ valid, promoCode, message }`  |\n| POST   | `/api/promo-codes/redeem`          | ใช้โปรโมชั่นโค้ด              | `{ code, userId }`                                   | `{ redemption, updatedBalance }` |\n| GET    | `/api/promo-codes/:id/redemptions` | ดึงประวัติการใช้โค้ด          | Query: `{ page, limit }`                             | `{ redemptions, total }`         |\n\n### 5.2 Database Schema\n\n```prisma\nmodel PromoCode {\n  id          String   @id @default(uuid())\n  code        String   @unique\n  credits     Int      // จำนวนเครดิตที่ได้รับ\n  maxUses     Int?     // จำนวนครั้งที่ใช้ได้ (null = ไม่จำกัด)\n  usedCount   Int      @default(0) // จำนวนครั้งที่ถูกใช้ไปแล้ว\n  expiresAt   DateTime? // วันหมดอายุ (null = ไม่หมดอายุ)\n  active      Boolean  @default(true)\n  description String?  // รายละเอียดโปรโมชั่น\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  redemptions PromoRedemption[]\n\n  @@index([code])\n  @@index([active])\n  @@index([expiresAt])\n  @@map(\"promo_codes\")\n}\n```\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนสร้างหรือแก้ไขโปรโมชั่น\n- ต้องมีการตรวจสอบสิทธิ์ก่อนใช้โปรโมชั่น\n- ต้องมีการบันทึกการใช้โปรโมชั่นทั้งหมดในระบบ Audit Log\n- ต้องป้องกันการใช้โปรโมชั่นโดยไม่ได้รับอนุญาต\n- ต้องมีการตรวจสอบข้อมูลก่อนสร้างโปรโมชั่น\n- ต้องมีการจำกัดจำนวนครั้งในการใช้โปรโมชั่น\n\n### 5.4 Frontend Requirements\n\n- มีหน้าจอสำหรับจัดการโปรโมชั่นโค้ด\n- มีหน้าจอสำหรับสร้างโปรโมชั่นโค้ด\n- มีช่องใส่โปรโมชั่นโค้ดในหน้าเติมเงิน\n- มีการแสดงข้อมูลโปรโมชั่นที่ใช้ได้\n- มีการตรวจสอบสิทธิ์ก่อนแสดงหน้าจอจัดการโปรโมชั่น\n- มีการแจ้งเตือนเมื่อใช้โปรโมชั่นสำเร็จ\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการสร้างโปรโมชั่นโค้ด\n- [ ] ทดสอบการตรวจสอบความถูกต้องของโค้ด\n- [ ] ทดสอบการใช้โปรโมชั่นโค้ด\n- [ ] ทดสอบการตรวจสอบวันหมดอายุ\n- [ ] ทดสอบการตรวจสอบจำนวนครั้งที่ใช้ได้\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบบัญชีเครดิต\n- [ ] ทดสอบการทำงานร่วมกับระบบผู้ใช้\n- [ ] ทดสอบการทำงานร่วมกับระบบการใช้โปรโมชั่น\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการสร้างโปรโมชั่นผ่าน Admin UI\n- [ ] ทดสอบการใช้โปรโมชั่นผ่าน UI\n- [ ] ทดสอบการตรวจสอบโปรโมชั่นที่หมดอายุ\n- [ ] ทดสอบการตรวจสอบโปรโมชั่นที่ใช้ครบแล้ว\n- [ ] ทดสอบการแสดงรายการโปรโมชั่น\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ระบบต้องการ PostgreSQL Database สำหรับจัดเก็บข้อมูลโปรโมชั่น\n- ต้องมีระบบ User Management ที่ทำงานได้เต็มรูปแบบ\n- ต้องมีระบบ Credit Account Management\n- ต้องมีระบบ Promo Redemption Management\n- ต้องมีระบบติดตามการทำรายการ\n\n### 7.2 Assumptions\n\n- ผู้ใช้ต้องล็อกอินเข้าสู่ระบบก่อนใช้โปรโมชั่น\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- การใช้โปรโมชั่นจะถูกบันทึกทั้งหมด\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบโปรโมชั่นต้องทำงานได้ภายใน **100ms** (P95)\n- การใช้โปรโมชั่นต้องเสร็จภายใน **200ms**\n- รองรับการใช้โปรโมชั่นได้อย่างน้อย **50 ครั้งต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีการ Backup ข้อมูลโปรโมชั่นทุกวัน\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการใช้โปรโมชั่นผิดกฎหมาย\n- ต้องมีการบันทึกการใช้โปรโมชั่นทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                  | Impact | Probability | Mitigation Strategy                                       |\n| --------------------- | ------ | ----------- | --------------------------------------------------------- |\n| Promo Code Abuse      | High   | Medium      | จำกัดจำนวนครั้งต่อผู้ใช้และมีระบบตรวจสอบพฤติกรรม          |\n| Duplicate Promo Codes | Medium | Low         | ใช้ Database Unique Constraint และตรวจสอบก่อนสร้าง        |\n| Performance Issues    | Medium | Low         | ใช้ Database Indexing และ Cache ข้อมูลโปรโมชั่นที่ใช้บ่อย |\n| Invalid Redemptions   | High   | Medium      | ตรวจสอบเงื่อนไขทุกครั้งก่อนอนุมัติการใช้โปรโมชั่น         |\n\n## 10. Timeline และ Milestones\n\n| Milestone               | Target Date | Status      |\n| ----------------------- | ----------- | ----------- |\n| Database Schema Design  | 2025-10-16  | Not Started |\n| Backend API Development | 2025-10-18  | Not Started |\n| Promo Validation Logic  | 2025-10-20  | Not Started |\n| Frontend Integration    | 2025-10-22  | Not Started |\n| Testing                 | 2025-10-24  | Not Started |\n| Production Deployment   | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.757Z",
          "updatedAt": "2025-10-15T01:51:18.757Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_code references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_code references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "promo_redemption",
        "title": "Promo Code Redemption System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Promo Code Redemption System\n\n## 1. ภาพรวม (Overview)\n\nระบบการใช้โปรโมชั่นโค้ด (Promo Code Redemption System) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับจัดการการใช้โปรโมชั่นโค้ดของผู้ใช้ ระบบนี้ทำงานร่วมกับระบบจัดการโปรโมชั่นโค้ดและระบบบัญชีเครดิตเพื่อให้ผู้ใช้สามารถใช้โปรโมชั่นโค้ดเพื่อรับเครดิตเพิ่มได้\n\nระบบนี้ทำงานโดยบันทึกการใช้โปรโมชั่นโค้ดของผู้ใช้แต่ละคน ตรวจสอบความถูกต้องของโค้ด และเพิ่มเครดิตเข้าบัญชีผู้ใช้เมื่อการใช้โค้ดสำเร็จ การจัดการการใช้โปรโมชั่นโค้ดเป็นส่วนสำคัญในการควบคุมสิทธิประโยชน์ที่ผู้ใช้ได้รับและป้องกันการใช้โค้ดซ้ำซ้อน\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถจัดการการใช้โปรโมชั่นโค้ดได้อย่างปลอดภัย\n- รองรับการตรวจสอบความถูกต้องของโค้ดก่อนการใช้\n- ป้องกันการใช้โปรโมชั่นโค้ดซ้ำซ้อน\n- อำนวยความสะดวกในการติดตามประวัติการใช้โปรโมชั่น\n- รองรับการบันทึกข้อมูลการใช้โปรโมชั่นที่สมบูรณ์\n- ทำงานร่วมกับระบบบัญชีเครดิตอย่างมีประสิทธิภาพ\n- ลดความซับซ้อนในการจัดการสิทธิประโยชน์ของผู้ใช้\n\n## 3. User Stories\n\n### Story 1: ผู้ใช้ใช้โปรโมชั่นโค้ดเพื่อรับเครดิต\n\n**ในฐานะ** ผู้ใช้งาน  \n**ฉันต้องการ** ใช้โปรโมชั่นโค้ดเพื่อรับเครดิตเพิ่มในบัญชีของฉัน  \n**เพื่อที่จะ** ใช้บริการต่างๆ ภายในแพลตฟอร์มได้มากขึ้น\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอเติมเงินต้องมีช่องใส่โปรโมชั่นโค้ด\n- [ ] ต้องมีการตรวจสอบความถูกต้องของโค้ดทันที\n- [ ] ต้องแสดงมูลค่าเครดิตที่จะได้รับ\n- [ ] ต้องมีการตรวจสอบว่าผู้ใช้เคยใช้โค้ดนี้แล้วหรือไม่\n- [ ] ต้องมีการแจ้งเตือนเมื่อใช้โค้ดสำเร็จ\n- [ ] ต้องมีการอัปเดตยอดเงินคงเหลือในบัญชีทันที\n- [ ] ต้องมีการบันทึกการใช้โค้ดในประวัติการทำรายการ\n\n### Story 2: ผู้ดูแลระบบตรวจสอบประวัติการใช้โปรโมชั่น\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** ตรวจสอบประวัติการใช้โปรโมชั่นโค้ดของผู้ใช้  \n**เพื่อที่จะ** ติดตามการใช้งานโปรโมชั่นและวิเคราะห์ประสิทธิภาพ\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอรายงานต้องมีส่วนสำหรับดูประวัติการใช้โปรโมชั่น\n- [ ] ต้องสามารถกรองข้อมูลตามช่วงเวลาได้\n- [ ] ต้องสามารถกรองข้อมูลตามโปรโมชั่นโค้ดได้\n- [ ] ต้องสามารถกรองข้อมูลตามผู้ใช้ได้\n- [ ] ต้องแสดงสถิติการใช้โปรโมชั่นแบบสรุป\n- [ ] ต้องสามารถส่งออกข้อมูลเป็นไฟล์ได้\n- [ ] ต้องมีการแสดงข้อมูลการใช้โปรโมชั่นที่ละเอียด\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การใช้โปรโมชั่นโค้ด (Promo Code Usage)\n- การตรวจสอบความถูกต้องของโค้ด (Code Validation)\n- การป้องกันการใช้โค้ดซ้ำ (Duplicate Prevention)\n- การบันทึกประวัติการใช้โค้ด (Usage History)\n- การเชื่อมโยงกับระบบบัญชีเครดิต (Credit Account Integration)\n- การติดตามสถิติการใช้โปรโมชั่น (Usage Analytics)\n- การจัดการข้อมูลการใช้โปรโมชั่น (Redemption Data Management)\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การสร้างโปรโมชั่นโค้ด (Promo Code Creation)\n- การจัดการเงื่อนไขโปรโมชั่น (Promo Condition Management)\n- การจัดการโปรโมชั่นแบบกลุ่ม (Group-based Promotions)\n- การจัดการโปรโมชั่นแบบแบ่งปัน (Referral Promotions)\n- การคืนค่าโปรโมชั่น (Promo Refunds)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                              | Description                        | Request Body                                 | Response                         |\n| ------ | ------------------------------------- | ---------------------------------- | -------------------------------------------- | -------------------------------- |\n| POST   | `/api/promo-redemptions`              | ใช้โปรโมชั่นโค้ด                   | `{ code, userId }`                           | `{ redemption, updatedBalance }` |\n| GET    | `/api/promo-redemptions/:id`          | ดึงข้อมูลการใช้โปรโมชั่นตาม ID     | -                                            | `{ redemption }`                 |\n| GET    | `/api/promo-redemptions/user/:userId` | ดึงประวัติการใช้โปรโมชั่นของผู้ใช้ | Query: `{ page, limit, startDate, endDate }` | `{ redemptions, total }`         |\n| GET    | `/api/promo-redemptions/code/:codeId` | ดึงประวัติการใช้โปรโมชั่นตามโค้ด   | Query: `{ page, limit }`                     | `{ redemptions, total }`         |\n| GET    | `/api/promo-redemptions/stats`        | ดึงสถิติการใช้โปรโมชั่น            | Query: `{ startDate, endDate, codeId }`      | `{ statistics }`                 |\n| GET    | `/api/promo-redemptions/export`       | ส่งออกข้อมูลการใช้โปรโมชั่น        | Query: `{ format, filters }`                 | `{ downloadUrl }`                |\n| POST   | `/api/promo-redemptions/validate`     | ตรวจสอบความถูกต้องของโค้ดก่อนใช้   | `{ code, userId }`                           | `{ valid, promoCode, message }`  |\n\n### 5.2 Database Schema\n\n```prisma\nmodel PromoRedemption {\n  id         String   @id @default(uuid())\n  userId     String\n  codeId     String\n  credits    Int      // จำนวนเครดิตที่ได้รับ\n  redeemedAt DateTime @default(now())\n  ipAddress  String?  // IP Address ที่ใช้\n  userAgent  String?  // User Agent ที่ใช้\n\n  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  code  PromoCode  @relation(fields: [codeId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, codeId]) // ป้องกันการใช้โค้ดซ้ำ\n  @@index([userId])\n  @@index([codeId])\n  @@index([redeemedAt])\n  @@map(\"promo_redemptions\")\n}\n```\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนใช้โปรโมชั่น\n- ต้องมีการตรวจสอบความถูกต้องของโค้ดก่อนการใช้\n- ต้องมีการบันทึกการใช้โปรโมชั่นทั้งหมดในระบบ Audit Log\n- ต้องป้องกันการใช้โปรโมชั่นโดยไม่ได้รับอนุญาต\n- ต้องมีการจำกัดจำนวนครั้งในการพยายามใช้โค้ด\n- ต้องมีการบันทึก IP Address และ User Agent สำหรับการตรวจสอบ\n\n### 5.4 Frontend Requirements\n\n- มีช่องใส่โปรโมชั่นโค้ดในหน้าเติมเงิน\n- มีการแสดงผลการตรวจสอบโค้ดแบบ Real-time\n- มีการแสดงประวัติการใช้โปรโมชั่น\n- มีหน้าจอรายงานสถิติการใช้โปรโมชั่นสำหรับ Admin\n- มีการตรวจสอบสิทธิ์ก่อนแสดงข้อมูล\n- มีการแจ้งเตือนเมื่อใช้โปรโมชั่นสำเร็จ\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการใช้โปรโมชั่นโค้ด\n- [ ] ทดสอบการตรวจสอบความถูกต้องของโค้ด\n- [ ] ทดสอบการป้องกันการใช้โค้ดซ้ำ\n- [ ] ทดสอบการเพิ่มเครดิตเข้าบัญชี\n- [ ] ทดสอบการดึงประวัติการใช้โปรโมชั่น\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบโปรโมชั่นโค้ด\n- [ ] ทดสอบการทำงานร่วมกับระบบบัญชีเครดิต\n- [ ] ทดสอบการทำงานร่วมกับระบบผู้ใช้\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการใช้โปรโมชั่นผ่าน UI\n- [ ] ทดสอบการตรวจสอบโค้ดที่ใช้ไปแล้ว\n- [ ] ทดสอบการใช้โค้ดที่หมดอายุ\n- [ ] ทดสอบการดูประวัติการใช้โปรโมชั่น\n- [ ] ทดสอบการดูรายงานสถิติสำหรับ Admin\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ระบบต้องการ PostgreSQL Database สำหรับจัดเก็บข้อมูลการใช้โปรโมชั่น\n- ต้องมีระบบ User Management ที่ทำงานได้เต็มรูปแบบ\n- ต้องมีระบบ Promo Code Management\n- ต้องมีระบบ Credit Account Management\n- ต้องมีระบบติดตามการทำรายการ\n\n### 7.2 Assumptions\n\n- ผู้ใช้ต้องล็อกอินเข้าสู่ระบบก่อนใช้โปรโมชั่น\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- การใช้โปรโมชั่นจะถูกบันทึกทั้งหมด\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบและใช้โปรโมชั่นต้องทำงานได้ภายใน **200ms** (P95)\n- การดึงประวัติการใช้โปรโมชั่นต้องเสร็จภายใน **300ms**\n- รองรับการใช้โปรโมชั่นได้อย่างน้อย **50 ครั้งต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีการ Backup ข้อมูลการใช้โปรโมชั่นทุกวัน\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการใช้โปรโมชั่นผิดกฎหมาย\n- ต้องมีการบันทึกการใช้โปรโมชั่นทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                    | Impact   | Probability | Mitigation Strategy                                |\n| ----------------------- | -------- | ----------- | -------------------------------------------------- |\n| Duplicate Promo Usage   | High     | Medium      | ใช้ Database Unique Constraint และตรวจสอบก่อนใช้   |\n| Invalid Code Redemption | Medium   | High        | ตรวจสอบความถูกต้องของโค้ดทุกครั้งก่อนอนุมัติ       |\n| Performance Issues      | Medium   | Low         | ใช้ Database Indexing และ Cache ข้อมูลที่ใช้บ่อย   |\n| Credit Update Failure   | Critical | Low         | ใช้ Database Transaction และมีกลไก Retry อัตโนมัติ |\n\n## 10. Timeline และ Milestones\n\n| Milestone               | Target Date | Status      |\n| ----------------------- | ----------- | ----------- |\n| Database Schema Design  | 2025-10-16  | Not Started |\n| Backend API Development | 2025-10-18  | Not Started |\n| Redemption Logic        | 2025-10-20  | Not Started |\n| Frontend Integration    | 2025-10-22  | Not Started |\n| Testing                 | 2025-10-24  | Not Started |\n| Production Deployment   | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.758Z",
          "updatedAt": "2025-10-15T01:51:18.758Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_redemption references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_redemption references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "role_permission",
        "title": "Role Permission Mapping and Management System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Role Permission Mapping and Management System\n\n## 1. ภาพรวม (Overview)\n\nระบบการจัดการการเชื่อมโยงบทบาทและสิทธิ์ (Role Permission Mapping System) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับเชื่อมโยงบทบาท (Roles) กับสิทธิ์ (Permissions) ต่างๆ ภายในระบบ ระบบนี้เป็นส่วนกลางของโมเดล Role-Based Access Control (RBAC) ที่ช่วยให้การจัดการสิทธิ์การเข้าถึงมีความยืดหยุ่นและปลอดภัย\n\nระบบนี้ทำงานโดยเชื่อมโยงบทบาทกับสิทธิ์ต่างๆ ทำให้บทบาทแต่ละบทบาทสามารถมีได้หลายสิทธิ์ และสิทธิ์แต่ละอย่างสามารถถูกกำหนดให้กับหลายบทบาทได้ การจัดการความสัมพันธ์ระหว่างบทบาทและสิทธิ์เป็นส่วนสำคัญในการควบคุมการเข้าถึงทรัพยากรต่างๆ ภายในระบบ\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถกำหนดสิทธิ์ให้กับบทบาทได้อย่างยืดหยุ่น\n- รองรับการกำหนดหลายสิทธิ์ให้กับบทบาทเดียว\n- รองรับการกำหนดสิทธิ์เดียวให้กับหลายบทบาท\n- ป้องกันการกำหนดสิทธิ์โดยไม่ได้รับอนุญาต\n- อำนวยความสะดวกในการตรวจสอบสิทธิ์ของบทบาท\n- รองรับการติดตามประวัติการกำหนดสิทธิ์\n- ทำงานร่วมกับระบบผู้ใช้และบทบาทอย่างมีประสิทธิภาพ\n\n## 3. User Stories\n\n### Story 1: ผู้ดูแลระบบกำหนดสิทธิ์ให้บทบาท\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** กำหนดสิทธิ์ต่างๆ ให้กับบทบาทในระบบ  \n**เพื่อที่จะ** ควบคุมสิทธิ์การเข้าถึงทรัพยากรของผู้ใช้ที่มีบทบาทต่างๆ\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอการจัดการบทบาทต้องมีส่วนสำหรับจัดการสิทธิ์\n- [ ] ต้องสามารถเพิ่มสิทธิ์ให้กับบทบาทได้\n- [ ] ต้องสามารถลบสิทธิ์จากบทบาทได้\n- [ ] ต้องสามารถกำหนดหลายสิทธิ์ให้บทบาทเดียวได้\n- [ ] ต้องมีการแสดงรายการสิทธิ์ทั้งหมดที่บทบาทนั้นมี\n- [ ] ต้องมีการค้นหาและกรองสิทธิ์ตามทรัพยากรหรือการกระทำ\n- [ ] ต้องมีการบันทึกการเปลี่ยนแปลงสิทธิ์ในระบบ Audit Log\n\n### Story 2: ระบบตรวจสอบสิทธิ์ของบทบาท\n\n**ในฐานะ** ระบบแอปพลิเคชัน  \n**ฉันต้องการ** ตรวจสอบสิทธิ์ที่บทบาทมีก่อนทำการกระทำใดๆ  \n**เพื่อที่จะ** ตรวจสอบสิทธิ์การเข้าถึงทรัพยากรของผู้ใช้ที่มีบทบาทต่างๆ\n\n**Acceptance Criteria:**\n\n- [ ] ต้องสามารถดึงรายการสิทธิ์ทั้งหมดของบทบาทได้\n- [ ] ต้องสามารถตรวจสอบว่าบทบาทมีสิทธิ์ที่ต้องการได้\n- [ ] ต้องรองรับการตรวจสอบหลายสิทธิ์พร้อมกัน\n- [ ] ต้องมีการ Cache ข้อมูลสิทธิ์เพื่อเพิ่มประสิทธิภาพ\n- [ ] ต้องมีการบันทึกการตรวจสอบสิทธิ์\n- [ ] ต้องส่งคืนข้อมูลสิทธิ์พร้อมรายละเอียดทรัพยากร\n- [ ] ต้องรองรับการตรวจสอบสิทธิ์แบบมีเงื่อนไข\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การกำหนดสิทธิ์ให้บทบาท (Role Permission Assignment)\n- การถอดสิทธิ์จากบทบาท (Role Permission Removal)\n- การดึงรายการสิทธิ์ของบทบาท (Role Permission Retrieval)\n- การตรวจสอบสิทธิ์ของบทบาท (Role Permission Verification)\n- การจัดการความสัมพันธ์ระหว่างบทบาทและสิทธิ์ (Role-Permission Mapping)\n- การบันทึกประวัติการกำหนดสิทธิ์ (Permission Assignment History)\n- การ Cache ข้อมูลสิทธิ์ของบทบาท\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการสิทธิ์แบบไดนามิกขณะทำงาน (Dynamic Permission Assignment)\n- การกำหนดสิทธิ์ชั่วคราว (Temporary Permission Assignment)\n- การจัดการสิทธิ์ตามเวลา (Time-based Permission Assignment)\n- การจัดการสิทธิ์แบบมีเงื่อนไข (Conditional Permission Assignment)\n- การจัดการสิทธิ์ผ่านการลงนามดิจิทัล (Digital Signatures)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                                          | Description                                   | Request Body                | Response                     |\n| ------ | ------------------------------------------------- | --------------------------------------------- | --------------------------- | ---------------------------- |\n| POST   | `/api/roles/:roleId/permissions`                  | กำหนดสิทธิ์ให้บทบาท                           | `{ permissionId }`          | `{ rolePermission }`         |\n| DELETE | `/api/roles/:roleId/permissions/:permissionId`    | ถอดสิทธิ์จากบทบาท                             | -                           | `{ success: true }`          |\n| GET    | `/api/roles/:roleId/permissions`                  | ดึงรายการสิทธิ์ของบทบาท                       | -                           | `{ permissions }`            |\n| GET    | `/api/permissions/:permissionId/roles`            | ดึงรายการบทบาทที่มีสิทธิ์นี้                  | -                           | `{ roles }`                  |\n| GET    | `/api/roles/:roleId/has-permission/:permissionId` | ตรวจสอบว่าบทบาทมีสิทธิ์นี้หรือไม่             | -                           | `{ hasPermission: boolean }` |\n| GET    | `/api/roles/:roleId/all-permissions`              | ดึงรายการสิทธิ์ทั้งหมดของบทบาทพร้อมรายละเอียด | -                           | `{ permissions }`            |\n| POST   | `/api/roles/batch-permission-assignment`          | กำหนดสิทธิ์ให้บทบาทหลายบทบาทพร้อมกัน          | `{ roleIds, permissionId }` | `{ results }`                |\n\n### 5.2 Database Schema\n\n```prisma\nmodel RolePermission {\n  id           String   @id @default(uuid())\n  roleId       String\n  permissionId String\n  assignedAt   DateTime @default(now())\n  assignedBy   String?  // ผู้ที่กำหนดสิทธิ์\n\n  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)\n  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)\n  assignedByUser User?    @relation(\"PermissionAssignment\", fields: [assignedBy], references: [id])\n\n  @@unique([roleId, permissionId])\n  @@map(\"role_permissions\")\n}\n```\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนกำหนดสิทธิ์ให้บทบาท\n- ต้องมีการตรวจสอบว่าผู้ทำการกำหนดมีสิทธิ์เพียงพอ\n- ต้องมีการบันทึกการเปลี่ยนแปลงสิทธิ์ในระบบ Audit Log\n- ต้องป้องกันการกำหนดสิทธิ์ที่สำคัญโดยไม่ได้รับอนุญาต\n- ต้องมีการ Cache ข้อมูลสิทธิ์เพื่อประสิทธิภาพ (Response Time ไม่เกิน 50ms)\n- ต้องมีการตรวจสอบข้อมูลก่อนกำหนดสิทธิ์\n\n### 5.4 Frontend Requirements\n\n- มีหน้าจอสำหรับจัดการสิทธิ์ของบทบาท\n- มีคอมโพเนนต์สำหรับเลือกและกำหนดสิทธิ์\n- มีการแสดงรายการสิทธิ์ปัจจุบันของบทบาท\n- มีการตรวจสอบสิทธิ์ก่อนแสดง UI สำหรับจัดการสิทธิ์\n- มีการแจ้งเตือนเมื่อกำหนดหรือถอดสิทธิ์สำเร็จ\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการกำหนดสิทธิ์ให้บทบาท\n- [ ] ทดสอบการถอดสิทธิ์จากบทบาท\n- [ ] ทดสอบการดึงรายการสิทธิ์ของบทบาท\n- [ ] ทดสอบการตรวจสอบสิทธิ์ของบทบาท\n- [ ] ทดสอบกลไกการ Cache ข้อมูลสิทธิ์\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบบทบาท (Role System)\n- [ ] ทดสอบการทำงานร่วมกับระบบสิทธิ์ (Permission System)\n- [ ] ทดสอบการตรวจสอบสิทธิ์ก่อนกำหนดสิทธิ์\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการกำหนดสิทธิ์ผ่าน Admin UI\n- [ ] ทดสอบการตรวจสอบสิทธิ์ในหน้า UI ต่างๆ\n- [ ] ทดสอบการแสดงผล UI ตามสิทธิ์ของบทบาท\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ระบบต้องการ PostgreSQL Database สำหรับจัดเก็บข้อมูลบทบาทและสิทธิ์\n- ต้องมีระบบ Role Management ที่ทำงานได้เต็มรูปแบบ\n- ต้องมีระบบ Permission Management ที่เชื่อมโยงกับระบบบทบาท\n- ต้องมี Redis สำหรับจัดเก็บข้อมูลสิทธิ์ที่ใช้บ่อย (Cache)\n\n### 7.2 Assumptions\n\n- ผู้ใช้ต้องล็อกอินเข้าสู่ระบบก่อนทำการกระทำใดๆ\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- ข้อมูลสิทธิ์จะถูกโหลดเมื่อผู้ใช้ล็อกอินและ Cache ไว้\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบสิทธิ์ต้องทำงานได้ภายใน **50ms** (P95)\n- การโหลดข้อมูลสิทธิ์ต้องเสร็จภายใน **100ms**\n- รองรับการตรวจสอบสิทธิ์ได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีการ Backup ข้อมูลการกำหนดสิทธิ์ทุกวัน\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการโจมตีแบบ Privilege Escalation\n- ต้องมีการบันทึกการเปลี่ยนแปลงสิทธิ์ทั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                               | Impact   | Probability | Mitigation Strategy                                             |\n| ---------------------------------- | -------- | ----------- | --------------------------------------------------------------- |\n| Permission Cache Stale             | High     | Medium      | ใช้ TTL สำหรับ Cache และมีกลไก Invalidate เมื่อมีการเปลี่ยนแปลง |\n| Unauthorized Permission Assignment | Critical | Low         | ตรวจสอบสิทธิ์ผู้ทำการกำหนดทุกครั้งและมี Audit Log               |\n| Complex Permission Hierarchy       | Medium   | High        | ใช้ Unit Tests ครอบคลุมและมีเอกสารอธิบายการทำงานอย่างละเอียด    |\n| Performance Issues                 | High     | Low         | ใช้ Redis Cache และ Database Indexing อย่างเหมาะสม              |\n\n## 10. Timeline และ Milestones\n\n| Milestone                   | Target Date | Status      |\n| --------------------------- | ----------- | ----------- |\n| Database Schema Design      | 2025-10-16  | Not Started |\n| Backend API Development     | 2025-10-18  | Not Started |\n| Permission Assignment Logic | 2025-10-20  | Not Started |\n| Frontend Integration        | 2025-10-22  | Not Started |\n| Testing                     | 2025-10-24  | Not Started |\n| Production Deployment       | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.758Z",
          "updatedAt": "2025-10-15T01:51:18.758Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "role_permission references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "role_permission references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "role_permission references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "role_permission references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "usage_log",
        "title": "Usage Log Data Model",
        "type": "user_story",
        "category": "documentation",
        "content": "# Usage Log Data Model\n\n## 1. Overview\n\nThe Usage Log data model is designed to track and record all API usage across the Smart AI Hub platform. It captures detailed information about user interactions with various AI services, including token consumption, credit costs, and metadata for analytics and billing purposes. This model serves as the foundation for usage analytics, billing calculations, and platform optimization strategies.\n\n## 2. Objectives\n\n1. Provide comprehensive tracking of all AI service usage across the platform\n2. Enable accurate billing calculations based on token consumption and credit costs\n3. Support detailed analytics for usage patterns and optimization opportunities\n4. Maintain audit trails for all user interactions with AI services\n5. Facilitate troubleshooting and performance monitoring through detailed logs\n6. Enable data-driven decisions for service capacity planning\n7. Support compliance requirements through detailed usage records\n8. Provide foundation for usage-based pricing and cost allocation\n\n## 3. User Stories\n\n### Story 1: Usage Tracking for Billing\nAs a platform administrator, I want to track all user usage of AI services with accurate token counts and credit costs, so that I can generate accurate bills and ensure fair pricing.\n\n**Acceptance Criteria:**\n1. All API calls must be logged with user identification\n2. Token consumption must be accurately recorded for each request\n3. Credit costs must be calculated and associated with each usage record\n4. Usage records must include service and model information\n5. Timestamps must be precise for billing period calculations\n6. Metadata must capture additional context for billing verification\n7. Usage records must be immutable once created\n\n### Story 2: Usage Analytics and Reporting\nAs a product manager, I want to analyze usage patterns across different services and user segments, so that I can make data-driven decisions about feature development and pricing strategies.\n\n**Acceptance Criteria:**\n1. Usage data must be queryable by user, service, and time period\n2. Analytics must support aggregation by various dimensions\n3. Reports must visualize usage trends and patterns\n4. Usage data must support comparative analysis between periods\n5. Analytics must identify heavy users and popular services\n6. Reports must be exportable for further analysis\n7. Usage metrics must support custom dashboards\n\n### Story 3: Performance Monitoring\nAs a DevOps engineer, I want to monitor API usage patterns to identify performance issues and optimization opportunities, so that I can ensure optimal service performance and resource allocation.\n\n**Acceptance Criteria:**\n1. Usage logs must include response time metrics\n2. Error rates must be trackable through usage data\n3. Peak usage periods must be identifiable\n4. Service-specific performance metrics must be available\n5. Usage patterns must support capacity planning\n6. Anomalies in usage must be detectable\n7. Performance alerts must be configurable based on usage metrics\n\n### Story 4: User Usage Visibility\nAs a platform user, I want to view my own usage history and credit consumption, so that I can monitor my spending and understand how I'm using the platform services.\n\n**Acceptance Criteria:**\n1. Users must be able to view their usage history\n2. Usage details must include service and model information\n3. Credit costs must be clearly displayed for each usage\n4. Usage data must be filterable by date range\n5. Users must be able to export their usage data\n6. Current usage limits and remaining credits must be visible\n7. Usage patterns must be visualized for user understanding\n\n## 4. Scope\n\n### In Scope\n1. Data model definition for usage tracking\n2. Database schema with proper indexing\n3. API endpoints for usage data retrieval\n4. Integration with AI service providers for usage tracking\n5. Analytics and reporting capabilities\n6. Data retention and archiving policies\n7. Privacy controls for usage data access\n8. Performance optimization for high-volume logging\n9. Error handling and data consistency\n10. Audit trail functionality\n\n### Out of Scope\n1. Real-time usage monitoring dashboards\n2. Advanced machine learning for usage prediction\n3. Automated billing and invoicing systems\n4. User notification systems for usage alerts\n5. Third-party analytics integrations\n6. Data visualization UI components\n7. Custom report builder interfaces\n8. Usage quota management and enforcement\n9. Cost optimization recommendations\n10. Multi-tenant usage isolation\n\n## 5. Technical Requirements\n\n### 5.1. Data Model Schema\n\n#### Prisma Model Definition\n```typescript\nmodel UsageLog {\n  id         String   @id @default(uuid())\n  userId     String\n  service    String   // openai, claude, sora2\n  model      String   // gpt-4, claude-3, sora2-video\n  tokens     Int      // Total tokens consumed\n  credits    Int      // Credits deducted\n  metadata   Json?    // Additional request/response data\n  createdAt  DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id])\n\n  @@index([userId, createdAt])\n  @@index([service, createdAt])\n  @@index([model, createdAt])\n  @@index([userId, service])\n  @@map(\"usage_logs\")\n}\n```\n\n#### Metadata Schema\n```typescript\ninterface UsageMetadata {\n  request?: {\n    endpoint: string;\n    method: string;\n    parameters: Record<string, any>;\n  };\n  response?: {\n    statusCode: number;\n    responseTime: number; // milliseconds\n    size: number; // bytes\n  };\n  billing?: {\n    ratePerToken: number;\n    totalCost: number;\n    currency: string;\n  };\n  session?: {\n    sessionId: string;\n    conversationId?: string;\n  };\n  system?: {\n    instanceId: string;\n    region: string;\n    version: string;\n  };\n}\n```\n\n### 5.2. Database Requirements\n\n1. **Indexes**: Optimized indexes for common query patterns\n2. **Partitioning**: Time-based partitioning for large datasets\n3. **Retention**: Configurable data retention policies\n4. **Archiving**: Automated archiving of historical data\n5. **Compression**: Data compression for storage optimization\n6. **Backup**: Regular backup procedures for usage data\n\n### 5.3. API Endpoints\n\n#### Usage Retrieval Endpoints\n```\nGET /api/usage/logs              // Get usage logs with filtering\nGET /api/usage/summary           // Get aggregated usage summary\nGET /api/usage/analytics         // Get usage analytics data\nGET /api/usage/export            // Export usage data\nGET /api/usage/users/:id/logs    // Get usage for specific user\n```\n\n#### Request Parameters\n```\nGET /api/usage/logs?\n  userId=string&\n  service=string&\n  model=string&\n  startDate=date&\n  endDate=date&\n  limit=number&\n  offset=number&\n  aggregate=boolean\n```\n\n### 5.4. Integration Requirements\n\n1. **MCP Server Integration**: Automatic logging of all AI service calls\n2. **Core Service Integration**: Credit deduction correlation\n3. **Authentication Service**: User identification and validation\n4. **Analytics Service**: Data aggregation and reporting\n5. **Monitoring Service**: Real-time usage metrics\n\n### 5.5. Performance Requirements\n\n1. **Write Performance**: Handle 10,000+ usage records per second\n2. **Query Performance**: Retrieve aggregated data under 500ms\n3. **Storage Efficiency**: Compress historical data to reduce storage\n4. **Index Optimization**: Maintain query performance with large datasets\n5. **Caching Strategy**: Cache frequently accessed aggregated data\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n1. Test data model validation and constraints\n2. Test metadata serialization and deserialization\n3. Test index performance with various query patterns\n4. Test data retention and archiving functionality\n5. Test aggregation and calculation logic\n6. Test error handling for invalid data\n7. Test privacy controls and access restrictions\n\n### 6.2. Integration Tests\n1. Test integration with MCP server for automatic logging\n2. Test credit deduction correlation with core service\n3. Test user identification with authentication service\n4. Test data flow to analytics service\n5. Test API endpoint functionality with various parameters\n6. Test concurrent write operations\n7. Test data consistency across services\n\n### 6.3. Performance Tests\n1. Load testing with high volume of usage records\n2. Stress testing beyond expected capacity\n3. Query performance testing with large datasets\n4. Index performance validation\n5. Concurrent read/write operation testing\n6. Memory usage profiling under load\n\n### 6.4. Security Tests\n1. Test access controls for usage data\n2. Test data privacy and anonymization\n3. Test audit trail functionality\n4. Test unauthorized access prevention\n5. Test data integrity and tamper resistance\n6. Test secure API endpoint access\n\n### 6.5. End-to-End Tests\n1. Complete usage tracking workflow from API call to storage\n2. Usage analytics and reporting verification\n3. User access to their own usage data\n4. Billing calculation accuracy verification\n5. Data retention and archiving workflow\n6. Cross-service data consistency validation\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n1. **PostgreSQL**: Primary database for usage data storage\n2. **Prisma ORM**: Database access and schema management\n3. **MCP Server**: Source of usage data from AI services\n4. **Core Service**: Credit deduction and user management\n5. **Authentication Service**: User identification and validation\n6. **Analytics Service**: Data processing and reporting\n\n### Assumptions\n1. All AI service calls can be intercepted for logging\n2. Token counting is accurate and consistent across providers\n3. Credit calculation rates are properly configured\n4. User identification is available for all API calls\n5. Database capacity can handle expected usage volume\n6. Network connectivity between services is reliable\n\n## 8. Non-Functional Requirements\n\n### Availability\n- Usage logging must not impact API response times\n- System must maintain 99.9% uptime for logging operations\n- Graceful degradation when logging service is unavailable\n- Automatic recovery from logging failures\n\n### Performance\n- Logging overhead must be under 10ms per request\n- Support at least 10,000 log writes per second\n- Query responses under 500ms for aggregated data\n- Efficient storage utilization through compression\n\n### Security\n- Usage data access restricted to authorized users\n- Sensitive metadata properly protected\n- Audit trail for all data access\n- Compliance with data protection regulations\n\n### Scalability\n- Horizontal scaling through database partitioning\n- Efficient handling of growing data volumes\n- Performance maintained with increasing usage\n- Automated archiving of historical data\n\n### Maintainability\n- Clear documentation of data model and relationships\n- Automated testing for data integrity\n- Monitoring and alerting for logging issues\n- Regular maintenance for database optimization\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - All AI service usage is accurately logged\n   - Token consumption and credit costs are correctly recorded\n   - Usage data is retrievable through API endpoints\n   - Analytics and reporting functions work correctly\n   - User access controls are properly enforced\n\n2. **Performance Requirements**\n   - Logging overhead is minimal and doesn't impact API performance\n   - System handles expected usage volume without degradation\n   - Query responses are fast even with large datasets\n   - Storage utilization is optimized through compression\n\n3. **Security Requirements**\n   - Usage data is properly protected and access-controlled\n   - Audit trails are maintained for all data access\n   - Privacy requirements are met for user data\n   - Data integrity is preserved\n\n4. **Reliability Requirements**\n   - Logging is consistent and reliable\n   - Data loss is prevented through proper backup\n   - System recovers gracefully from failures\n   - Data accuracy is maintained\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n1. **Performance Impact**: Logging could slow down API responses\n   - Mitigation: Implement asynchronous logging and optimized writes\n\n2. **Data Volume**: High usage volume could overwhelm storage\n   - Mitigation: Implement data partitioning and archiving strategies\n\n3. **Accuracy Issues**: Inaccurate token counting could lead to billing errors\n   - Mitigation: Implement validation and reconciliation processes\n\n### Medium Priority Risks\n1. **Privacy Concerns**: Usage data could contain sensitive information\n   - Mitigation: Implement proper data anonymization and access controls\n\n2. **Integration Failures**: Service integration issues could cause data loss\n   - Mitigation: Implement retry mechanisms and error handling\n\n### Low Priority Risks\n1. **Query Performance**: Complex analytics queries could be slow\n   - Mitigation: Implement proper indexing and query optimization\n\n## 11. Timeline and Milestones\n\n### Phase 1: Data Model Implementation (1 week)\n- Define and implement Prisma schema\n- Create database migrations\n- Implement basic API endpoints\n- Set up integration with MCP server\n\n### Phase 2: Analytics and Reporting (2 weeks)\n- Implement aggregation and calculation logic\n- Create analytics API endpoints\n- Develop reporting functionality\n- Implement data export features\n\n### Phase 3: Performance Optimization (1 week)\n- Optimize database queries and indexes\n- Implement caching strategies\n- Set up data archiving\n- Performance testing and tuning\n\n### Phase 4: Security and Compliance (1 week)\n- Implement access controls and privacy features\n- Set up audit logging\n- Security testing and validation\n- Documentation completion\n\n## 12. Sign-off\n\n**Product Owner:** _________________ Date: _________\n\n**Tech Lead:** _________________ Date: _________\n\n**QA Lead:** _________________ Date: _________\n\n**DevOps Lead:** _________________ Date: _________",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.759Z",
          "updatedAt": "2025-10-15T01:51:18.759Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "usage_log references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "usage_log references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "user",
        "title": "User Data Model",
        "type": "user_story",
        "category": "documentation",
        "content": "# User Data Model\n\n## 1. Overview\n\nThe User data model is the core entity of the Smart AI Hub platform, representing all individuals who interact with the system. It manages user authentication, authorization, profile information, and relationships with other platform entities such as roles, credits, and usage logs. This model serves as the foundation for user management, security, and personalization features throughout the platform.\n\n## 2. Objectives\n\n1. Provide secure user authentication and authorization mechanisms\n2. Support multiple authentication methods (email/password and OAuth)\n3. Maintain comprehensive user profile information\n4. Enable role-based access control through user-role relationships\n5. Track user activity and usage patterns\n6. Support user account lifecycle management\n7. Ensure data privacy and compliance with regulations\n8. Facilitate seamless integration with external services\n\n## 3. User Stories\n\n### Story 1: User Registration and Authentication\nAs a new user, I want to create an account using my email address and password, so that I can access the Smart AI Hub platform and its services.\n\n**Acceptance Criteria:**\n1. Users must be able to register with a unique email address and password\n2. Passwords must be securely hashed and stored\n3. Email verification must be required before account activation\n4. Users must receive a verification email upon registration\n5. Users must be able to log in with their credentials after verification\n6. Password reset functionality must be available for forgotten passwords\n7. Account must be locked after multiple failed login attempts\n\n### Story 2: OAuth Integration\nAs a user, I want to sign in using my Google account, so that I can access the platform quickly without remembering another password.\n\n**Acceptance Criteria:**\n1. Users must be able to authenticate using Google OAuth\n2. Google account information must be securely linked to user profile\n3. Existing users must be able to connect Google accounts to their profiles\n4. New users must be able to create accounts through Google OAuth\n5. User profile must be populated with available Google account data\n6. Users must be able to disconnect Google accounts if desired\n7. OAuth authentication must be secure and follow best practices\n\n### Story 3: Profile Management\nAs a registered user, I want to view and update my profile information, so that I can keep my account details current and personalize my experience.\n\n**Acceptance Criteria:**\n1. Users must be able to view their profile information\n2. Users must be able to update non-sensitive profile fields\n3. Email changes must require verification\n4. Password changes must require current password confirmation\n5. Profile updates must be immediately reflected across the platform\n6. Users must be able to view their account creation and update dates\n7. Profile changes must be logged for audit purposes\n\n### Story 4: User Management for Administrators\nAs a platform administrator, I want to manage user accounts, so that I can maintain platform security and assist users with account issues.\n\n**Acceptance Criteria:**\n1. Administrators must be able to view all user accounts\n2. Administrators must be able to search and filter users by various criteria\n3. Administrators must be able to view user account status and activity\n4. Administrators must be able to manually verify user accounts\n5. Administrators must be able to disable/enable user accounts\n6. Administrators must be able to reset user passwords\n7. All administrative actions must be logged for audit purposes\n\n## 4. Scope\n\n### In Scope\n1. User authentication and authorization\n2. Email/password and OAuth authentication methods\n3. User profile management\n4. Email verification workflow\n5. Password reset functionality\n6. Account security features\n7. User-role relationship management\n8. User activity tracking\n9. Integration with credit and usage systems\n10. Administrative user management tools\n\n### Out of Scope\n1. Advanced user profile customization\n2. Social media integrations beyond Google OAuth\n3. User-to-user messaging systems\n4. Advanced user analytics and reporting\n5. User segmentation and targeting\n6. Automated user onboarding workflows\n7. User subscription management\n8. Multi-tenant user isolation\n9. User behavior analysis\n10. Advanced user permission management beyond roles\n\n## 5. Technical Requirements\n\n### 5.1. Data Model Schema\n\n#### Prisma Model Definition\n```typescript\nmodel User {\n  id            String   @id @default(uuid())\n  email         String   @unique\n  passwordHash  String?\n  verified      Boolean  @default(false)\n  googleId      String?  @unique\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  roles         UserRole[]\n  creditAccount CreditAccount?\n  usageLogs     UsageLog[]\n\n  @@index([email])\n  @@index([googleId])\n  @@index([verified])\n  @@index([createdAt])\n  @@map(\"users\")\n}\n```\n\n#### Extended User Profile Schema\n```typescript\ninterface UserProfile {\n  id: string;\n  email: string;\n  passwordHash?: string;\n  verified: boolean;\n  googleId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  \n  // Additional profile fields (future enhancement)\n  firstName?: string;\n  lastName?: string;\n  avatar?: string;\n  timezone?: string;\n  language?: string;\n  preferences?: UserPreferences;\n}\n\ninterface UserPreferences {\n  theme: 'light' | 'dark' | 'auto';\n  notifications: NotificationPreferences;\n  privacy: PrivacyPreferences;\n}\n\ninterface NotificationPreferences {\n  email: boolean;\n  push: boolean;\n  marketing: boolean;\n  security: boolean;\n}\n\ninterface PrivacyPreferences {\n  profileVisibility: 'public' | 'private';\n  activitySharing: boolean;\n  analyticsTracking: boolean;\n}\n```\n\n### 5.2. Database Requirements\n\n1. **Indexes**: Optimized indexes for email, Google ID, verification status, and creation date\n2. **Constraints**: Unique constraints on email and Google ID fields\n3. **Security**: Secure password hashing using bcrypt or similar\n4. **Audit Trail**: Track changes to user accounts\n5. **Data Retention**: Configurable retention policies for inactive accounts\n6. **Backup**: Regular backup procedures for user data\n\n### 5.3. API Endpoints\n\n#### Authentication Endpoints\n```\nPOST /api/auth/register          // User registration\nPOST /api/auth/login             // User login\nPOST /api/auth/logout            // User logout\nPOST /api/auth/verify-email      // Email verification\nPOST /api/auth/forgot-password   // Password reset request\nPOST /api/auth/reset-password    // Password reset confirmation\nGET  /api/auth/google            // Google OAuth initiation\nGET  /api/auth/google/callback   // Google OAuth callback\n```\n\n#### User Management Endpoints\n```\nGET    /api/users/profile        // Get current user profile\nPUT    /api/users/profile        // Update user profile\nPUT    /api/users/password       // Change password\nPUT    /api/users/email          // Update email (requires verification)\nDELETE /api/users/account        // Delete user account\n```\n\n#### Administrative Endpoints\n```\nGET    /api/admin/users          // List all users (admin)\nGET    /api/admin/users/:id      // Get specific user (admin)\nPUT    /api/admin/users/:id      // Update user (admin)\nPOST   /api/admin/users/:id/verify // Verify user (admin)\nPOST   /api/admin/users/:id/disable // Disable user (admin)\nPOST   /api/admin/users/:id/reset-password // Reset password (admin)\n```\n\n### 5.4. Security Requirements\n\n1. **Password Security**: Strong password hashing with salt\n2. **Session Management**: Secure session handling with expiration\n3. **Rate Limiting**: Login attempt rate limiting to prevent brute force\n4. **Input Validation**: Comprehensive input validation and sanitization\n5. **CSRF Protection**: Cross-site request forgery protection\n6. **XSS Prevention**: Cross-site scripting prevention measures\n7. **Secure Headers**: Implementation of security headers\n\n### 5.5. Integration Requirements\n\n1. **Authentication Service**: User authentication and session management\n2. **Email Service**: Verification emails and password reset notifications\n3. **OAuth Provider**: Google OAuth integration\n4. **Role Service**: User-role relationship management\n5. **Credit Service**: User credit account association\n6. **Usage Service**: User activity and usage tracking\n7. **Monitoring Service**: User authentication event tracking\n\n## 6. Testing Criteria\n\n### 6.1. Unit Tests\n1. Test user creation with valid and invalid data\n2. Test password hashing and verification\n3. Test email validation logic\n4. Test Google ID uniqueness constraints\n5. Test user profile update functionality\n6. Test user account verification status changes\n7. Test user relationship operations (roles, credits, usage)\n\n### 6.2. Integration Tests\n1. Test user registration workflow end-to-end\n2. Test email verification process\n3. Test password reset workflow\n4. Test Google OAuth integration\n5. Test user login and session management\n6. Test user profile updates across services\n7. Test administrative user management operations\n\n### 6.3. Security Tests\n1. Test password strength requirements\n2. Test brute force login protection\n3. Test session security and expiration\n4. Test OAuth security implementation\n5. Test input validation against injection attacks\n6. Test CSRF protection mechanisms\n7. Test unauthorized access prevention\n\n### 6.4. Performance Tests\n1. Load testing with concurrent user registrations\n2. Login performance under high load\n3. Database query performance with large user base\n4. Session management performance\n5. Password hashing performance impact\n6. Index performance for user lookups\n7. Cache effectiveness for user data\n\n### 6.5. End-to-End Tests\n1. Complete user registration and email verification\n2. User login with email/password\n3. User login with Google OAuth\n4. Password reset workflow\n5. Profile update and verification\n6. Account deletion and data cleanup\n7. Administrative user management workflows\n\n## 7. Dependencies and Assumptions\n\n### Dependencies\n1. **PostgreSQL**: Primary database for user data storage\n2. **Prisma ORM**: Database access and schema management\n3. **Authentication Service**: User authentication and session management\n4. **Email Service**: Transactional email delivery\n5. **Google OAuth API**: External authentication provider\n6. **Redis**: Session storage and caching\n7. ** bcrypt**: Password hashing library\n\n### Assumptions\n1. Email delivery is reliable for verification and password reset\n2. Google OAuth API is available and stable\n3. Users have valid email addresses for registration\n4. Network connectivity is reliable for API calls\n5. Database capacity can handle expected user volume\n6. Security libraries are properly maintained and updated\n\n## 8. Non-Functional Requirements\n\n### Availability\n- User authentication must be highly available (99.9% uptime)\n- Graceful degradation when OAuth provider is unavailable\n- Account recovery options when primary authentication fails\n- Backup authentication methods for critical operations\n\n### Performance\n- User registration must complete within 2 seconds\n- Login response time under 500ms\n- Profile updates must be reflected immediately\n- Password hashing must complete within acceptable time limits\n- Database queries must be optimized for performance\n\n### Security\n- User data must be encrypted at rest\n- Sensitive operations must require re-authentication\n- Password requirements must enforce strong security\n- User data access must be properly audited\n- Compliance with data protection regulations (GDPR, CCPA)\n\n### Scalability\n- System must handle 100,000+ concurrent users\n- Horizontal scaling through load distribution\n- Database partitioning for large user bases\n- Efficient session management at scale\n- Performance maintained with increasing user load\n\n### Usability\n- Registration process must be simple and intuitive\n- Error messages must be clear and helpful\n- Password reset process must be straightforward\n- Profile management interface must be user-friendly\n- OAuth integration must be seamless\n\n## 9. Acceptance Criteria\n\n1. **Functional Requirements**\n   - Users can register with email/password or Google OAuth\n   - Email verification is required for account activation\n   - Users can securely log in and out of the platform\n   - Password reset functionality works correctly\n   - User profile information can be viewed and updated\n   - Administrative user management functions properly\n\n2. **Security Requirements**\n   - Passwords are securely hashed and stored\n   - Authentication sessions are properly managed\n   - Rate limiting prevents brute force attacks\n   - Input validation prevents injection attacks\n   - OAuth integration follows security best practices\n\n3. **Performance Requirements**\n   - Registration and login operations complete quickly\n   - System handles expected concurrent user load\n   - Database queries remain efficient with growth\n   - Profile updates are reflected immediately\n\n4. **Integration Requirements**\n   - User authentication integrates with all platform services\n   - Email service integration works for verification and reset\n   - OAuth provider integration functions correctly\n   - User relationships with other entities work properly\n\n## 10. Risks and Mitigation\n\n### High Priority Risks\n1. **Security Breaches**: Unauthorized access to user accounts\n   - Mitigation: Implement multi-factor authentication, monitor for suspicious activity\n\n2. **Data Loss**: Loss of user account information\n   - Mitigation: Regular backups, redundant storage, disaster recovery procedures\n\n3. **OAuth Provider Dependency**: Reliance on Google OAuth\n   - Mitigation: Multiple authentication providers, manual account recovery options\n\n### Medium Priority Risks\n1. **Email Delivery Issues**: Verification emails not delivered\n   - Mitigation: Multiple email providers, retry mechanisms, alternative verification methods\n\n2. **Password Security**: Weak passwords or compromised credentials\n   - Mitigation: Strong password requirements, password hashing, breach detection\n\n### Low Priority Risks\n1. **User Experience**: Complex registration or login process\n   - Mitigation: User testing, streamlined workflows, clear documentation\n\n2. **Scalability Issues**: Performance degradation with user growth\n   - Mitigation: Performance monitoring, horizontal scaling, database optimization\n\n## 11. Timeline and Milestones\n\n### Phase 1: Core User Model (1 week)\n- Define and implement Prisma schema\n- Create basic user CRUD operations\n- Implement email/password authentication\n- Set up database indexes and constraints\n\n### Phase 2: Email Verification and Security (1 week)\n- Implement email verification workflow\n- Add password reset functionality\n- Implement account security features\n- Add rate limiting and brute force protection\n\n### Phase 3: OAuth Integration (1 week)\n- Implement Google OAuth integration\n- Connect OAuth accounts to user profiles\n- Test OAuth security implementation\n- Handle OAuth edge cases and errors\n\n### Phase 4: Profile Management (1 week)\n- Implement user profile management\n- Add profile update functionality\n- Create administrative user management\n- Implement audit logging for user actions\n\n## 12. Sign-off\n\n**Product Owner:** _________________ Date: _________\n\n**Tech Lead:** _________________ Date: _________\n\n**QA Lead:** _________________ Date: _________\n\n**DevOps Lead:** _________________ Date: _________",
        "metadata": {
          "author": "Development Team",
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.759Z",
          "updatedAt": "2025-10-15T01:51:18.759Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 63.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 83.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "user references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "user references permission",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "user_role",
        "title": "User Role Assignment and Management System",
        "type": "api_spec",
        "category": "documentation",
        "content": "# User Role Assignment and Management System\n\n## 1. ภาพรวม (Overview)\n\nระบบการจัดการบทบาทผู้ใช้ (User Role Management System) เป็นส่วนสำคัญของแพลตฟอร์ม Smart AI Hub ที่ใช้สำหรับเชื่อมโยงผู้ใช้กับบทบาทต่างๆ ภายในระบบ ระบบนี้เป็นส่วนหนึ่งของโมเดล Role-Based Access Control (RBAC) ที่ช่วยให้การจัดการสิทธิ์การเข้าถึงของผู้ใช้ในระบบมีความยืดหยุ่นและปลอดภัย\n\nระบบนี้ทำงานโดยเชื่อมโยงผู้ใช้ (Users) กับบทบาท (Roles) ทำให้ผู้ใช้สามารถมีได้หลายบทบาทพร้อมกัน และสืบทอดสิทธิ์จากบทบาททั้งหมดที่ได้รับมอบหมาย การจัดการบทบาทผู้ใช้เป็นส่วนสำคัญในการควบคุมการเข้าถึงทรัพยากรต่างๆ ภายในระบบ\n\n## 2. วัตถุประสงค์ (Objectives)\n\nระบบนี้ถูกออกแบบมาเพื่อ:\n\n- ให้สามารถกำหนดบทบาทให้กับผู้ใช้ได้อย่างยืดหยุ่น\n- รองรับการมอบหมายหลายบทบาทให้กับผู้ใช้คนเดียว\n- ป้องกันการมอบหมายบทบาทโดยไม่ได้รับอนุญาต\n- อำนวยความสะดวกในการตรวจสอบบทบาทของผู้ใช้\n- รองรับการติดตามประวัติการมอบหมายบทบาท\n- ทำงานร่วมกับระบบสิทธิ์ (Permission System) อย่างมีประสิทธิภาพ\n- ลดความซับซ้อนในการจัดการสิทธิ์ผ่านบทบาท\n\n## 3. User Stories\n\n### Story 1: ผู้ดูแลระบบมอบหมายบทบาทให้ผู้ใช้\n\n**ในฐานะ** ผู้ดูแลระบบ  \n**ฉันต้องการ** มอบหมายบทบาทต่างๆ ให้กับผู้ใช้ในระบบ  \n**เพื่อที่จะ** ควบคุมสิทธิ์การเข้าถึงทรัพยากรของผู้ใช้แต่ละคน\n\n**Acceptance Criteria:**\n\n- [ ] หน้าจอการจัดการผู้ใช้ต้องมีส่วนสำหรับจัดการบทบาท\n- [ ] ต้องสามารถมอบหมายบทบาทให้กับผู้ใช้ได้\n- [ ] ต้องสามารถถอดบทบาทจากผู้ใช้ได้\n- [ ] ต้องสามารถมอบหมายหลายบทบาทให้ผู้ใช้คนเดียวได้\n- [ ] ต้องมีการแสดงรายการบทบาททั้งหมดที่ผู้ใช้มี\n- [ ] ต้องมีการค้นหาและกรองผู้ใช้ตามบทบาท\n- [ ] ต้องมีการบันทึกการเปลี่ยนแปลงบทบาทในระบบ Audit Log\n\n### Story 2: ระบบตรวจสอบบทบาทของผู้ใช้\n\n**ในฐานะ** ระบบแอปพลิเคชัน  \n**ฉันต้องการ** ตรวจสอบบทบาทของผู้ใช้ก่อนทำการกระทำใดๆ  \n**เพื่อที่จะ** ตรวจสอบสิทธิ์การเข้าถึงทรัพยากรของผู้ใช้\n\n**Acceptance Criteria:**\n\n- [ ] ต้องสามารถดึงรายการบทบาททั้งหมดของผู้ใช้ได้\n- [ ] ต้องสามารถตรวจสอบว่าผู้ใช้มีบทบาทที่ต้องการได้\n- [ ] ต้องรองรับการตรวจสอบหลายบทบาทพร้อมกัน\n- [ ] ต้องมีการ Cache ข้อมูลบทบาทเพื่อเพิ่มประสิทธิภาพ\n- [ ] ต้องมีการบันทึกการตรวจสอบบทบาท\n- [ ] ต้องส่งคืนข้อมูลบทบาทพร้อมสิทธิ์ที่เกี่ยวข้อง\n- [ ] ต้องรองรับการตรวจสอบบทบาทแบบมีเงื่อนไข\n\n## 4. ขอบเขตงาน (Scope)\n\n### 4.1 ในขอบเขตงาน (In Scope)\n\n- การมอบหมายบทบาทให้ผู้ใช้ (User Role Assignment)\n- การถอดบทบาทจากผู้ใช้ (User Role Removal)\n- การดึงรายการบทบาทของผู้ใช้ (User Role Retrieval)\n- การตรวจสอบบทบาทของผู้ใช้ (User Role Verification)\n- การจัดการความสัมพันธ์ระหว่างผู้ใช้และบทบาท (User-Role Mapping)\n- การบันทึกประวัติการมอบหมายบทบาท (Role Assignment History)\n- การ Cache ข้อมูลบทบาทของผู้ใช้\n\n### 4.2 นอกขอบเขตงาน (Out of Scope)\n\n- การจัดการบทบาทแบบไดนามิกขณะทำงาน (Dynamic Role Assignment)\n- การมอบหมายบทบาชั่วคราว (Temporary Role Assignment)\n- การจัดการบทบาทตามเวลา (Time-based Role Assignment)\n- การจัดการบทบาทแบบมีเงื่อนไข (Conditional Role Assignment)\n- การจัดการบทบาทผ่านการลงนามดิจิทัล (Digital Signatures)\n\n## 5. ข้อกำหนดทางเทคนิค (Technical Requirements)\n\n### 5.1 Backend API Endpoints\n\n| Method | Endpoint                              | Description                               | Request Body          | Response                             |\n| ------ | ------------------------------------- | ----------------------------------------- | --------------------- | ------------------------------------ |\n| POST   | `/api/users/:userId/roles`            | มอบหมายบทบาทให้ผู้ใช้                     | `{ roleId }`          | `{ userRole }`                       |\n| DELETE | `/api/users/:userId/roles/:roleId`    | ถอดบทบาทจากผู้ใช้                         | -                     | `{ success: true }`                  |\n| GET    | `/api/users/:userId/roles`            | ดึงรายการบทบาทของผู้ใช้                   | -                     | `{ roles }`                          |\n| GET    | `/api/roles/:roleId/users`            | ดึงรายการผู้ใช้ที่มีบทบาทนี้              | -                     | `{ users }`                          |\n| GET    | `/api/users/:userId/has-role/:roleId` | ตรวจสอบว่าผู้ใช้มีบทบาทนี้หรือไม่         | -                     | `{ hasRole: boolean }`               |\n| GET    | `/api/users/:userId/all-roles`        | ดึงรายการบทบาททั้งหมดของผู้ใช้พร้อมสิทธิ์ | -                     | `{ roles: [{ role, permissions }] }` |\n| POST   | `/api/users/batch-role-assignment`    | มอบหมายบทบาทให้ผู้ใช้หลายคนพร้อมกัน       | `{ userIds, roleId }` | `{ results }`                        |\n\n### 5.2 Database Schema\n\n```prisma\nmodel UserRole {\n  userId      String   @default(uuid())\n  roleId      String   @default(uuid())\n  assignedAt  DateTime @default(now())\n  assignedBy  String?  // ผู้ที่มอบหมายบทบาท\n\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)\n  assignedByUser User? @relation(\"RoleAssignment\", fields: [assignedBy], references: [id])\n\n  @@id([userId, roleId])\n  @@map(\"user_roles\")\n}\n```\n\n### 5.3 Security Requirements\n\n- ต้องมีการตรวจสอบสิทธิ์ก่อนมอบหมายบทบาทให้ผู้ใช้\n- ต้องมีการตรวจสอบว่าผู้ทำการมอบหมายมีสิทธิ์เพียงพอ\n- ต้องมีการบันทึกการเปลี่ยนแปลงบทบาทในระบบ Audit Log\n- ต้องป้องกันการมอบหมายบทบาทที่สำคัญโดยไม่ได้รับอนุญาต\n- ต้องมีการ Cache ข้อมูลบทบาทเพื่อประสิทธิภาพ (Response Time ไม่เกิน 50ms)\n- ต้องมีการตรวจสอบข้อมูลก่อนมอบหมายบทบาท\n\n### 5.4 Frontend Requirements\n\n- มีหน้าจอสำหรับจัดการบทบาทของผู้ใช้\n- มีคอมโพเนนต์สำหรับเลือกและมอบหมายบทบาท\n- มีการแสดงรายการบทบาทปัจจุบันของผู้ใช้\n- มีการตรวจสอบสิทธิ์ก่อนแสดง UI สำหรับจัดการบทบาท\n- มีการแจ้งเตือนเมื่อมอบหมายหรือถอดบทบาทสำเร็จ\n\n## 6. การทดสอบ (Testing Criteria)\n\n### 6.1 Unit Tests\n\n- [ ] ทดสอบการมอบหมายบทบาทให้ผู้ใช้\n- [ ] ทดสอบการถอดบทบาทจากผู้ใช้\n- [ ] ทดสอบการดึงรายการบทบาทของผู้ใช้\n- [ ] ทดสอบการตรวจสอบบทบาทของผู้ใช้\n- [ ] ทดสอบกลไกการ Cache ข้อมูลบทบาท\n\n### 6.2 Integration Tests\n\n- [ ] ทดสอบ API Endpoints ทั้งหมด\n- [ ] ทดสอบการทำงานร่วมกับระบบสิทธิ์ (Permission System)\n- [ ] ทดสอบการจัดการความสัมพันธ์ระหว่างผู้ใช้และบทบาท\n- [ ] ทดสอบการตรวจสอบสิทธิ์ก่อนมอบหมายบทบาท\n- [ ] ทดสอบการบันทึก Audit Log\n\n### 6.3 E2E Tests\n\n- [ ] ทดสอบการมอบหมายบทบาทผ่าน Admin UI\n- [ ] ทดสอบการตรวจสอบบทบาทในหน้า UI ต่างๆ\n- [ ] ทดสอบการแสดงผล UI ตามบทบาทของผู้ใช้\n\n## 7. Dependencies และ Assumptions\n\n### 7.1 Dependencies\n\n- ระบบต้องการ PostgreSQL Database สำหรับจัดเก็บข้อมูลผู้ใช้และบทบาท\n- ต้องมีระบบ User Management ที่ทำงานได้เต็มรูปแบบ\n- ต้องมีระบบ Role Management ที่เชื่อมโยงกับระบบผู้ใช้\n- ต้องมี Redis สำหรับจัดเก็บข้อมูลบทบาทที่ใช้บ่อย (Cache)\n\n### 7.2 Assumptions\n\n- ผู้ใช้ต้องล็อกอินเข้าสู่ระบบก่อนทำการกระทำใดๆ\n- ระบบจะทำงานบน HTTPS ในสภาพแวดล้อม Production\n- มีการจัดการ Session และ Token อย่างปลอดภัย\n- ข้อมูลบทบาทจะถูกโหลดเมื่อผู้ใช้ล็อกอินและ Cache ไว้\n\n## 8. Non-Functional Requirements\n\n### 8.1 Performance\n\n- การตรวจสอบบทบาทต้องทำงานได้ภายใน **50ms** (P95)\n- การโหลดข้อมูลบทบาทต้องเสร็จภายใน **100ms**\n- รองรับการตรวจสอบบทบาทได้อย่างน้อย **1,000 ครั้งต่อวินาที**\n\n### 8.2 Availability\n\n- ระบบต้องมี Uptime อย่างน้อย **99.5%**\n- ต้องมีการ Backup ข้อมูลการมอบหมายบทบาททุกวัน\n\n### 8.3 Security\n\n- ต้องมีการเข้ารหัสข้อมูลที่สำคัญ\n- ต้องมีการตรวจสอบและป้องกันการโจมตีแบบ Privilege Escalation\n- ต้องมีการบันทึกการเปลี่ยนแปลงบทบาททั้งหมด\n\n## 9. Risks และ Mitigation\n\n| Risk                         | Impact   | Probability | Mitigation Strategy                                             |\n| ---------------------------- | -------- | ----------- | --------------------------------------------------------------- |\n| Role Assignment Cache Stale  | High     | Medium      | ใช้ TTL สำหรับ Cache และมีกลไก Invalidate เมื่อมีการเปลี่ยนแปลง |\n| Unauthorized Role Assignment | Critical | Low         | ตรวจสอบสิทธิ์ผู้ทำการมอบหมายทุกครั้งและมี Audit Log             |\n| Complex Role Hierarchy       | Medium   | High        | ใช้ Unit Tests ครอบคลุมและมีเอกสารอธิบายการทำงานอย่างละเอียด    |\n| Performance Issues           | High     | Low         | ใช้ Redis Cache และ Database Indexing อย่างเหมาะสม              |\n\n## 10. Timeline และ Milestones\n\n| Milestone               | Target Date | Status      |\n| ----------------------- | ----------- | ----------- |\n| Database Schema Design  | 2025-10-16  | Not Started |\n| Backend API Development | 2025-10-18  | Not Started |\n| Role Assignment Logic   | 2025-10-20  | Not Started |\n| Frontend Integration    | 2025-10-22  | Not Started |\n| Testing                 | 2025-10-24  | Not Started |\n| Production Deployment   | 2025-10-26  | Not Started |\n\n## 11. Sign-off\n\n| Role          | Name | Date | Signature |\n| ------------- | ---- | ---- | --------- |\n| Product Owner | -    | -    | Pending   |\n| Tech Lead     | -    | -    | Pending   |\n| QA Lead       | -    | -    | Pending   |\n\n---\n\n**หมายเหตุ:** เอกสารนี้เป็น Living Document และจะถูกอัปเดตตามความจำเป็น การเปลี่ยนแปลงใดๆ ต้องผ่านการอนุมัติจาก Product Owner และ Tech Lead",
        "metadata": {
          "author": "Development Team",
          "version": "1.0",
          "createdAt": "2025-10-15T01:51:18.759Z",
          "updatedAt": "2025-10-15T01:51:18.759Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          },
          {
            "type": "pattern_mismatch",
            "message": "Version must follow semantic versioning (x.y.z)",
            "severity": "error"
          }
        ],
        "warnings": [],
        "score": 38.33333333333333,
        "metrics": {
          "completeness": 100,
          "clarity": 100,
          "consistency": 80,
          "traceability": 33.33333333333333,
          "overall": 78.33333333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "user_role references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "user_role references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "user_role references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "user_role references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "TRACEABILITY",
        "title": "Project Traceability Matrix",
        "type": "user_story",
        "category": "documentation",
        "content": "# Project Traceability Matrix\r\n\r\nThis document provides a high-level view of the project's traceability, linking user stories to their implemented requirements and associated epics.\r\n\r\n## User Story Traceability\r\n\r\n| User Story ID & Title | Implements Requirement | Part of Epic |\r\n|----------------------|----------------------|--------------|\r\n| [US-1: User Registration with Email](specs/01_requirements/user_stories/us_1.md) | [FR-1](specs/01_requirements/functional/fr_1.md) | [Epic 2](specs/03_backlog/epics/epic_2.md) |\r\n| [US-2: Google OAuth Registration](specs/01_requirements/user_stories/us_2.md) | [FR-1](specs/01_requirements/functional/fr_1.md) | [Epic 2](specs/03_backlog/epics/epic_2.md) |\r\n| [US-3: Role Assignment](specs/01_requirements/user_stories/us_3.md) | [FR-2](specs/01_requirements/functional/fr_2.md) | [Epic 2](specs/03_backlog/epics/epic_2.md) |\r\n| [US-4: View Credit Balance](specs/01_requirements/user_stories/us_4.md) | [FR-3](specs/01_requirements/functional/fr_3.md) | [Epic 3](specs/03_backlog/epics/epic_3.md) |\r\n| [US-5: Purchase Credits](specs/01_requirements/user_stories/us_5.md) | [FR-3](specs/01_requirements/functional/fr_3.md) | [Epic 3](specs/03_backlog/epics/epic_3.md) |\r\n| [US-6: Promotional Code Redemption](specs/01_requirements/user_stories/us_6.md) | [FR-3](specs/01_requirements/functional/fr_3.md) | [Epic 3](specs/03_backlog/epics/epic_3.md) |\r\n| [US-7: Access GPT via API](specs/01_requirements/user_stories/us_7.md) | [FR-4](specs/01_requirements/functional/fr_4.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-8: Monitor Usage](specs/01_requirements/user_stories/us_8.md) | [FR-5](specs/01_requirements/functional/fr_5.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-9: Sora2 Video Generator Integration](specs/01_requirements/user_stories/us_9.md) | [FR-AUTH-06](specs/01_requirements/functional/fr_auth_06.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-10: Session-Based Authentication for External Services](specs/01_requirements/user_stories/us_10.md) | [FR-AUTH-05](specs/01_requirements/functional/fr_auth_05.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-11: Credit Management APIs for External Services](specs/01_requirements/user_stories/us_11.md) | [FR-CREDIT-03](specs/01_requirements/functional/fr_credit_03.md), [FR-CREDIT-04](specs/01_requirements/functional/fr_credit_04.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n\r\n## Summary\r\n\r\n- **Total User Stories**: 11\r\n- **Total Requirements**: 10 (some user stories implement multiple requirements)\r\n- **Total Epics**: 3 (Epic 2, Epic 3, and Epic 4)\r\n\r\n### Breakdown by Epic:\r\n\r\n**Epic 2 - User Management & Authentication**\r\n- US-1: User Registration with Email\r\n- US-2: Google OAuth Registration\r\n- US-3: Role Assignment\r\n\r\n**Epic 3 - Credit System**\r\n- US-4: View Credit Balance\r\n- US-5: Purchase Credits\r\n- US-6: Promotional Code Redemption\r\n\r\n**Epic 4 - API Integration & External Services**\r\n- US-7: Access GPT via API\r\n- US-8: Monitor Usage\r\n- US-9: Sora2 Video Generator Integration\r\n- US-10: Session-Based Authentication for External Services\r\n- US-11: Credit Management APIs for External Services\r\n\r\nThis traceability matrix helps ensure that all user stories are properly linked to their requirements and epics, providing clear visibility into the project structure and dependencies.",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-15T01:51:18.760Z",
          "updatedAt": "2025-10-15T01:51:18.760Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "User story should follow format: \"As a [user], I want to [action], so that [benefit]\"",
            "suggestion": "Consider updating content to match pattern: User story should follow format: \"As a [user], I want to [action], so that [benefit]\""
          },
          {
            "type": "incomplete_content",
            "message": "User story should include acceptance criteria",
            "suggestion": "Consider updating content to match pattern: User story should include acceptance criteria"
          },
          {
            "type": "unclear_requirement",
            "message": "User story should follow the standard format: \"As a [user], I want to [action], so that [benefit]\"",
            "suggestion": "Restructure the user story to follow the standard format"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 25.20833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 40,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 65.20833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "fr_1",
          "description": "TRACEABILITY references fr_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_2",
          "description": "TRACEABILITY references fr_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_3",
          "description": "TRACEABILITY references fr_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_4",
          "description": "TRACEABILITY references fr_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_5",
          "description": "TRACEABILITY references fr_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_05",
          "description": "TRACEABILITY references fr_auth_05",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_06",
          "description": "TRACEABILITY references fr_auth_06",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_03",
          "description": "TRACEABILITY references fr_credit_03",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_04",
          "description": "TRACEABILITY references fr_credit_04",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-1",
          "description": "TRACEABILITY references US-1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-10",
          "description": "TRACEABILITY references US-10",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-11",
          "description": "TRACEABILITY references US-11",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-2",
          "description": "TRACEABILITY references US-2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-3",
          "description": "TRACEABILITY references US-3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-4",
          "description": "TRACEABILITY references US-4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-5",
          "description": "TRACEABILITY references US-5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-6",
          "description": "TRACEABILITY references US-6",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-7",
          "description": "TRACEABILITY references US-7",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-8",
          "description": "TRACEABILITY references US-8",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-9",
          "description": "TRACEABILITY references US-9",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "TRACEABILITY references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_2",
          "description": "TRACEABILITY references epic_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_3",
          "description": "TRACEABILITY references epic_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_4",
          "description": "TRACEABILITY references epic_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_1",
          "description": "TRACEABILITY references fr_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_2",
          "description": "TRACEABILITY references fr_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_3",
          "description": "TRACEABILITY references fr_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_4",
          "description": "TRACEABILITY references fr_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_5",
          "description": "TRACEABILITY references fr_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_05",
          "description": "TRACEABILITY references fr_auth_05",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_06",
          "description": "TRACEABILITY references fr_auth_06",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_03",
          "description": "TRACEABILITY references fr_credit_03",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_04",
          "description": "TRACEABILITY references fr_credit_04",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "TRACEABILITY references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    }
  ],
  "summary": {
    "totalSpecifications": 66,
    "validSpecifications": 0,
    "invalidSpecifications": 66,
    "averageScore": 45.757575757575786,
    "criticalIssues": 81,
    "warnings": 74
  },
  "recommendations": [
    {
      "type": "improve_clarity",
      "priority": "high",
      "description": "Improve clarity and completeness of 66 specifications with low scores",
      "targetSpecifications": [
        "fr_1",
        "fr_2",
        "fr_3",
        "fr_4",
        "fr_5",
        "fr_6",
        "fr_auth_05",
        "fr_auth_06",
        "fr_credit_03",
        "fr_credit_04",
        "README",
        "US-1",
        "US-10",
        "US-11",
        "US-2",
        "US-3",
        "US-4",
        "US-5",
        "US-6",
        "US-7",
        "US-8",
        "US-9",
        "credit_account",
        "permission",
        "promo_code",
        "promo_redemption",
        "role_permission",
        "usage_log",
        "user",
        "user_role",
        "README",
        "api_gateway",
        "auth_service",
        "core_service",
        "mcp_server",
        "epic_1",
        "epic_2",
        "epic_3",
        "epic_4",
        "epic_5",
        "epic_6",
        "README",
        "README",
        "api_gateway",
        "auth_service",
        "core_service",
        "credit_account",
        "fr_1",
        "fr_2",
        "fr_3",
        "fr_4",
        "fr_5",
        "fr_6",
        "fr_auth_05",
        "fr_auth_06",
        "fr_credit_03",
        "fr_credit_04",
        "mcp_server",
        "permission",
        "promo_code",
        "promo_redemption",
        "role_permission",
        "usage_log",
        "user",
        "user_role",
        "TRACEABILITY"
      ],
      "effort": 132,
      "impact": "Improved specification quality and reduced ambiguity"
    },
    {
      "type": "add_dependencies",
      "priority": "medium",
      "description": "Review and add dependencies for 66 specifications",
      "targetSpecifications": [
        "fr_1",
        "fr_2",
        "fr_3",
        "fr_4",
        "fr_5",
        "fr_6",
        "fr_auth_05",
        "fr_auth_06",
        "fr_credit_03",
        "fr_credit_04",
        "README",
        "US-1",
        "US-10",
        "US-11",
        "US-2",
        "US-3",
        "US-4",
        "US-5",
        "US-6",
        "US-7",
        "US-8",
        "US-9",
        "credit_account",
        "permission",
        "promo_code",
        "promo_redemption",
        "role_permission",
        "usage_log",
        "user",
        "user_role",
        "README",
        "api_gateway",
        "auth_service",
        "core_service",
        "mcp_server",
        "epic_1",
        "epic_2",
        "epic_3",
        "epic_4",
        "epic_5",
        "epic_6",
        "README",
        "README",
        "api_gateway",
        "auth_service",
        "core_service",
        "credit_account",
        "fr_1",
        "fr_2",
        "fr_3",
        "fr_4",
        "fr_5",
        "fr_6",
        "fr_auth_05",
        "fr_auth_06",
        "fr_credit_03",
        "fr_credit_04",
        "mcp_server",
        "permission",
        "promo_code",
        "promo_redemption",
        "role_permission",
        "usage_log",
        "user",
        "user_role",
        "TRACEABILITY"
      ],
      "effort": 33,
      "impact": "Better traceability and impact analysis"
    }
  ],
  "metrics": {
    "qualityScore": 75.9090909090909,
    "completenessScore": 91.66666666666667,
    "consistencyScore": 95.45454545454545,
    "maintainabilityIndex": 68.38383838383838,
    "technicalDebt": 24.090909090909093
  }
}