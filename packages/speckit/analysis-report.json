{
  "id": "d14f99be-dbfe-4444-81eb-529d94d4e1db",
  "timestamp": "2025-10-14T13:01:08.388Z",
  "specifications": [
    {
      "specification": {
        "id": "fr_1",
        "title": "FR-1: Multi-method Authentication",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-1: Multi-method Authentication\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Requirements\r\n- Google OAuth 2.0 integration\r\n- Email/password with BCRYPT (cost factor: 12)\r\n- Email verification (6-digit OTP, 15-min expiry)\r\n- Password reset with secure token\r\n- JWT token-based sessions (access: 15min, refresh: 7 days)\r\n- MFA support (TOTP) - Phase 2\r\n\r\n## Acceptance Criteria\r\n- Registration completion rate > 70%\r\n- Login success rate > 99%\r\n- Email verification within 5 minutes\r\n- Password reset flow < 3 minutes",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.360Z",
          "updatedAt": "2025-10-14T13:01:08.360Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_2",
        "title": "FR-2: Role-Based Access Control (RBAC)",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-2: Role-Based Access Control (RBAC)\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Role Hierarchy\r\n```\r\nSuper Admin > Admin > Manager > User > Guest\r\n```\r\n\r\n## Default Permissions\r\n\r\n| Role        | View Dashboard | Use AI Services | Manage Users | Adjust Credits | System Config |\r\n| ----------- | -------------- | --------------- | ------------ | -------------- | ------------- |\r\n| Super Admin | ✓              | ✓               | ✓            | ✓              | ✓             |\r\n| Admin       | ✓              | ✓               | ✓            | ✓              | -             |\r\n| Manager     | ✓              | ✓               | Team only    | Team only      | -             |\r\n| User        | ✓              | ✓               | -            | -              | -             |\r\n| Guest       | ✓              | Limited         | -            | -              | -             |",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.360Z",
          "updatedAt": "2025-10-14T13:01:08.360Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "fr_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "fr_2 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_2 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_3",
        "title": "FR-3: Credit Management System",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-3: Credit Management System\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Features\r\n- Real-time credit balance tracking\r\n- Transaction history (immutable ledger)\r\n- Automated low-balance alerts (< 10 credits)\r\n- Credit expiration (optional, configurable)\r\n- Refund processing (admin only)\r\n\r\n## Credit Deduction Rules\r\n\r\n```yaml\r\nGPT-4: 10 credits per 1000 tokens\r\nGPT-3.5: 1 credit per 1000 tokens\r\nClaude-3: 8 credits per 1000 tokens\r\nImage Generation: 50 credits per image\r\nVideo Generation: 200 credits per minute\r\nSora2 Video Generation: 30 credits per video",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.360Z",
          "updatedAt": "2025-10-14T13:01:08.360Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_4",
        "title": "FR-4: MCP Server Implementation",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-4: MCP Server Implementation\r\n\r\n## Priority\r\nP0 (Critical)\r\n\r\n## Supported Providers\r\n- OpenAI (GPT-3.5, GPT-4, GPT-4-turbo)\r\n- Anthropic (Claude-3 Opus, Sonnet, Haiku)\r\n- Google (Gemini Pro) - Phase 2\r\n\r\n## Features\r\n- Unified request/response format\r\n- Automatic retry with exponential backoff (3 retries, 1s → 2s → 4s)\r\n- Request/response logging (retention: 30 days)\r\n- Streaming support for real-time responses\r\n- Context window management",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_5",
        "title": "FR-5: Usage Analytics",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-5: Usage Analytics\r\n\r\n## Priority\r\nP1 (High)\r\n\r\n## Metrics\r\n- Requests per user/day/month\r\n- Token usage by model\r\n- Average response time\r\n- Error rate by provider\r\n- Cost per request\r\n\r\n## Reporting\r\n- Real-time dashboard\r\n- Daily email summary\r\n- Monthly billing report\r\n- CSV export functionality",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_5 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_6",
        "title": "FR-6: API Standards",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-6: API Standards\r\n\r\n## Versioning\r\nURL-based (e.g., `/api/v1/...`)\r\n\r\n## Authentication\r\nBearer token (JWT)\r\n\r\n## Rate Limiting\r\n```\r\nGuest: 10 requests/minute\r\nUser: 60 requests/minute\r\nManager: 120 requests/minute\r\nAdmin: No limit\r\n```\r\n\r\n## Error Response Format\r\n```json\r\n{\r\n  \"error\": {\r\n    \"code\": \"INVALID_CREDENTIALS\",\r\n    \"message\": \"Email or password is incorrect\",\r\n    \"details\": {\r\n      \"field\": \"password\",\r\n      \"attempts_remaining\": 3\r\n    },\r\n    \"timestamp\": \"2025-10-03T10:30:00Z\",\r\n    \"request_id\": \"req_1234567890\"\r\n  }\r\n}\r\n```\r\n\r\n## Success Response Format\r\n```json\r\n{\r\n  \"data\": { ... },\r\n  \"meta\": {\r\n    \"timestamp\": \"2025-10-03T10:30:00Z\",\r\n    \"request_id\": \"req_1234567890\"\r\n  }\r\n}\r\n```\r\n\r\n## Pagination Standard\r\n```json\r\n{\r\n  \"data\": [...],\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"per_page\": 20,\r\n    \"total\": 100,\r\n    \"total_pages\": 5\r\n  }\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_6 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_7",
        "title": "FR-7: Webhook System",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-7: Webhook System\r\n\r\n## Priority\r\nPhase 2\r\n\r\n## Event Types\r\n- `user.created`\r\n- `credit.depleted`\r\n- `service.completed`\r\n\r\n## Features\r\n- Retry policy: 3 attempts with exponential backoff\r\n- Signature verification (HMAC-SHA256)",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_7 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_auth_05",
        "title": "FR-AUTH-05: Session-Based Authentication",
        "type": "api_spec",
        "category": "documentation",
        "content": "# FR-AUTH-05: Session-Based Authentication\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nSupport session-based authentication for third-party integrations\r\n\r\n## Requirements\r\n- Generate secure session tokens (format: VERIFIED-{random_string})\r\n- Store sessions in Redis with configurable expiration (default: 7 days)\r\n- Provide API endpoint to verify session tokens\r\n- Return user identity (ID, email, name) for valid sessions\r\n- Support session revocation\r\n- Handle session expiration gracefully\r\n\r\n## Acceptance Criteria\r\n- Session tokens are cryptographically secure\r\n- Session verification responds within 100ms\r\n- Expired sessions return 401 Unauthorized\r\n- Invalid sessions return 404 Not Found",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_05 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_auth_06",
        "title": "FR-AUTH-06: OAuth with Verification Codes",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-AUTH-06: OAuth with Verification Codes\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nSupport OAuth flow with verification codes for Custom GPT integration\r\n\r\n## Requirements\r\n- Accept session parameter in OAuth initiation URL\r\n- Generate verification code on successful authentication\r\n- Display verification code on success page\r\n- Map verification code to user session\r\n- Support \"return_to\" parameter for different integration types\r\n- Maintain backward compatibility with traditional OAuth flow\r\n\r\n## Flow\r\n1. Third-party service generates unique session ID\r\n2. User is redirected to /auth/google?session={id}&return_to=chatgpt\r\n3. User authenticates with Google\r\n4. System generates verification code (VERIFIED-{random})\r\n5. Success page displays verification code with copy button\r\n6. User copies code and provides to third-party service\r\n7. Third-party service uses code as session token\r\n\r\n## Acceptance Criteria\r\n- Verification codes are unique and secure\r\n- Success page is user-friendly with Thai language\r\n- Copy button works on all major browsers\r\n- Session mapping is created correctly\r\n- Traditional OAuth flow still works",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_auth_06 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_credit_03",
        "title": "FR-CREDIT-03: User-Specific Credit Check API",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-CREDIT-03: User-Specific Credit Check API\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nProvide API for third-party services to check user credit balance\r\n\r\n## Requirements\r\n- Accept user ID via X-User-ID header\r\n- Accept service name and cost in request body\r\n- Return whether user has sufficient credits\r\n- Return current credit balance\r\n- Support different service types and costs\r\n- Respond within 200ms\r\n\r\n## API Specification\r\n```\r\nPOST /api/mcp/v1/credits/check\r\nHeaders: X-User-ID: {user_id}\r\nBody: { service: string, cost: number }\r\nResponse: { sufficient: boolean, balance: number }\r\n```\r\n\r\n## Acceptance Criteria\r\n- Accurately checks user credit balance\r\n- Returns 402 if insufficient credits\r\n- Returns 404 if user not found\r\n- Handles concurrent requests correctly",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_03 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "fr_credit_04",
        "title": "FR-CREDIT-04: User-Specific Credit Deduction API",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# FR-CREDIT-04: User-Specific Credit Deduction API\r\n\r\n## Priority\r\nHigh\r\n\r\n## Description\r\nProvide API for third-party services to deduct credits from user balance\r\n\r\n## Requirements\r\n- Accept user ID via X-User-ID header\r\n- Accept service name, cost, and metadata in request body\r\n- Atomically deduct credits from user balance\r\n- Create transaction record with metadata\r\n- Return new balance and transaction ID\r\n- Support rollback on failure\r\n\r\n## API Specification\r\n```\r\nPOST /api/mcp/v1/credits/deduct\r\nHeaders: X-User-ID: {user_id}\r\nBody: { service: string, cost: number, metadata: object }\r\nResponse: { status: \"ok\", new_balance: number, transaction_id: string }\r\n```\r\n\r\n## Acceptance Criteria\r\n- Deduction is atomic (no race conditions)\r\n- Transaction record is created\r\n- Returns 402 if insufficient credits\r\n- Supports concurrent deductions safely",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "fr_credit_04 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Requirements Specification",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# Requirements Specification\r\n\r\nThis directory contains the requirements specification for the Smart AI Hub project. It includes functional requirements, non-functional requirements, and user stories that define what the system should do and how it should perform.\r\n\r\n## Contents\r\n\r\n### Functional Requirements\r\nThe functional requirements define specific behaviors and functions of the system.\r\n\r\n- [fr_1.md](functional/fr_1.md) - User Registration and Authentication\r\n- [fr_2.md](functional/fr_2.md) - User Profile Management\r\n- [fr_3.md](functional/fr_3.md) - Credit System Management\r\n- [fr_4.md](functional/fr_4.md) - API Integration\r\n- [fr_5.md](functional/fr_5.md) - Usage Tracking\r\n- [fr_6.md](functional/fr_6.md) - Admin Dashboard\r\n- [fr_7.md](functional/fr_7.md) - Notification System\r\n- [fr_auth_05.md](functional/fr_auth_05.md) - Authentication Security Requirements\r\n- [fr_auth_06.md](functional/fr_auth_06.md) - OAuth Integration\r\n- [fr_credit_03.md](functional/fr_credit_03.md) - Credit Purchase System\r\n- [fr_credit_04.md](functional/fr_credit_04.md) - Credit Usage Monitoring\r\n\r\n### Non-Functional Requirements\r\nThe non-functional requirements define system qualities and constraints.\r\n\r\n- [non_functional/](non_functional/) - Performance, Security, and Reliability Requirements\r\n\r\n### User Stories\r\nUser stories describe features from an end-user perspective.\r\n\r\n- [us_1.md](user_stories/us_1.md) - User Registration\r\n- [us_2.md](user_stories/us_2.md) - User Login\r\n- [us_3.md](user_stories/us_3.md) - Profile Management\r\n- [us_4.md](user_stories/us_4.md) - Credit Purchase\r\n- [us_5.md](user_stories/us_5.md) - Credit Usage\r\n- [us_6.md](user_stories/us_6.md) - API Integration\r\n- [us_7.md](user_stories/us_7.md) - Usage Analytics\r\n- [us_8.md](user_stories/us_8.md) - Admin Functions\r\n- [us_9.md](user_stories/us_9.md) - Notification Management\r\n- [us_10.md](user_stories/us_10.md) - Security Settings\r\n- [us_11.md](user_stories/us_11.md) - Account Management",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.361Z",
          "updatedAt": "2025-10-14T13:01:08.361Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "fr_1",
          "description": "README references fr_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_2",
          "description": "README references fr_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_3",
          "description": "README references fr_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_4",
          "description": "README references fr_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_5",
          "description": "README references fr_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_6",
          "description": "README references fr_6",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_7",
          "description": "README references fr_7",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_05",
          "description": "README references fr_auth_05",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_06",
          "description": "README references fr_auth_06",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_03",
          "description": "README references fr_credit_03",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_04",
          "description": "README references fr_credit_04",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-1",
        "title": "User Registration with Email",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-1: User Registration with Email\r\n\r\n## User Story\r\nAs a new user\r\nI want to register with my email and password\r\nSo that I can access the platform\r\n\r\n## Acceptance Criteria\r\n- Email validation (RFC 5322)\r\n- Password strength: min 8 chars, 1 uppercase, 1 number\r\n- Email verification within 15 minutes\r\n- Automatic 10 free credits upon verification\r\n- Registration completion time < 2 minutes",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.367Z",
          "updatedAt": "2025-10-14T13:01:08.367Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-1 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-10",
        "title": "Session-Based Authentication for External Services",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-10: Session-Based Authentication for External Services\r\n\r\n## User Story\r\nAs a third-party AI service provider\r\nI want to integrate with Smart AI Hub authentication\r\nSo that my users can authenticate without managing separate credentials\r\n\r\n## Acceptance Criteria\r\n- Session token generation (VERIFIED-{code} format)\r\n- Session verification API endpoint\r\n- 7-day session expiration\r\n- Redis-based session storage\r\n- Session revocation capability",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.368Z",
          "updatedAt": "2025-10-14T13:01:08.368Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "US-1",
          "description": "US-10 references US-1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-10 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-11",
        "title": "Credit Management APIs for External Services",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-11: Credit Management APIs for External Services\r\n\r\n## User Story\r\nAs a third-party AI service provider\r\nI want to check and deduct user credits via API\r\nSo that I can charge for service usage through Smart AI Hub\r\n\r\n## Acceptance Criteria\r\n- Credit check API with user ID and service cost\r\n- Credit deduction API with transaction metadata\r\n- Atomic transactions to prevent race conditions\r\n- Insufficient credit handling\r\n- Transaction record creation for audit trail",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.369Z",
          "updatedAt": "2025-10-14T13:01:08.369Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "US-1",
          "description": "US-11 references US-1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-11 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-2",
        "title": "Google OAuth Registration",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-2: Google OAuth Registration\r\n\r\n## User Story\r\nAs a new user\r\nI want to register using my Google account\r\nSo that I can quickly access without creating password\r\n\r\n## Acceptance Criteria\r\n- OAuth flow completes within 30 seconds\r\n- Profile data auto-populated from Google\r\n- Automatic account creation or linking\r\n- Same free credits as email registration",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.371Z",
          "updatedAt": "2025-10-14T13:01:08.371Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-2 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-3",
        "title": "Role Assignment",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-3: Role Assignment\r\n\r\n## User Story\r\nAs an admin\r\nI want to assign roles to users\r\nSo that I can control access levels\r\n\r\n## Acceptance Criteria\r\n- Role change takes effect immediately\r\n- Audit log entry created\r\n- User notified via email\r\n- Previous permissions revoked",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.371Z",
          "updatedAt": "2025-10-14T13:01:08.371Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "User story should follow format: \"As a [user], I want to [action], so that [benefit]\"",
            "suggestion": "Consider updating content to match pattern: User story should follow format: \"As a [user], I want to [action], so that [benefit]\""
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 42.70833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 70,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 72.70833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "US-3 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "US-3 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "US-3 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-4",
        "title": "View Credit Balance",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-4: View Credit Balance\r\n\r\n## User Story\r\nAs a user\r\nI want to view my current credit balance\r\nSo that I can plan my usage\r\n\r\n## Acceptance Criteria\r\n- Real-time balance display\r\n- Transaction history (last 100)\r\n- Usage forecast based on past 30 days\r\n- Low balance warning when < 10 credits",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.371Z",
          "updatedAt": "2025-10-14T13:01:08.371Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-4 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-5",
        "title": "Purchase Credits",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-5: Purchase Credits\r\n\r\n## User Story\r\nAs a user\r\nI want to purchase additional credits\r\nSo that I can continue using services\r\n\r\n## Acceptance Criteria\r\n- Secure payment via Stripe\r\n- Credits added within 1 minute of payment\r\n- Email receipt sent\r\n- Transaction recorded in history",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.372Z",
          "updatedAt": "2025-10-14T13:01:08.372Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-5 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-6",
        "title": "Promotional Code Redemption",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-6: Promotional Code Redemption\r\n\r\n## User Story\r\nAs a user\r\nI want to redeem promotional codes\r\nSo that I can get bonus credits\r\n\r\n## Acceptance Criteria\r\n- Code validation (exists, not expired, not used)\r\n- One-time use per user\r\n- Credits added immediately\r\n- Success notification",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.372Z",
          "updatedAt": "2025-10-14T13:01:08.372Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-6 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-7",
        "title": "Access GPT via API",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-7: Access GPT via API\r\n\r\n## User Story\r\nAs a developer\r\nI want to call GPT models via API\r\nSo that I can integrate AI into my application\r\n\r\n## Acceptance Criteria\r\n- API key generation\r\n- Multiple models available\r\n- Response time < 2 seconds (excluding model time)\r\n- Credits auto-deducted\r\n- Usage logged",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.373Z",
          "updatedAt": "2025-10-14T13:01:08.373Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-7 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-8",
        "title": "Monitor Usage",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-8: Monitor Usage\r\n\r\n## User Story\r\nAs a user\r\nI want to see my API usage statistics\r\nSo that I can optimize costs\r\n\r\n## Acceptance Criteria\r\n- Request count by model\r\n- Token usage breakdown\r\n- Cost analysis\r\n- Exportable reports (CSV)",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.373Z",
          "updatedAt": "2025-10-14T13:01:08.373Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-8 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "US-9",
        "title": "Sora2 Video Generator Integration",
        "type": "user_story",
        "category": "documentation",
        "content": "# US-9: Sora2 Video Generator Integration\r\n\r\n## User Story\r\nAs a user of Custom GPT\r\nI want to authenticate with Smart AI Hub to use Sora2 Video Generator\r\nSo that I can generate videos using my centralized credit account\r\n\r\n## Acceptance Criteria\r\n- OAuth authentication with Google account\r\n- Verification code generation for session-based access\r\n- Credit balance checking before video generation\r\n- Automatic credit deduction after video generation\r\n- Transaction logging for audit purposes",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "US-9 references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "credit_account",
        "title": "credit_account",
        "type": "data_model",
        "category": "documentation",
        "content": "model CreditAccount {\r\n  id        String   @id @default(uuid())\r\n  userId    String   @unique\r\n  balance   Int      @default(0)\r\n  createdAt DateTime @default(now())\r\n  updatedAt DateTime @updatedAt\r\n\r\n  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n  transactions CreditTransaction[]\r\n\r\n  @@index([userId])\r\n  @@map(\"credit_accounts\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "credit_account references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "credit_transaction",
        "title": "credit_transaction",
        "type": "data_model",
        "category": "documentation",
        "content": "model CreditTransaction {\r\n  id          String   @id @default(uuid())\r\n  accountId   String\r\n  amount      Int\r\n  type        String   // debit, credit\r\n  reason      String   // purchase, usage, refund, promo\r\n  metadata    Json?\r\n  createdAt   DateTime @default(now())\r\n\r\n  account CreditAccount @relation(fields: [accountId], references: [id])\r\n\r\n  @@index([accountId, createdAt])\r\n  @@map(\"credit_transactions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "permission",
        "title": "permission",
        "type": "data_model",
        "category": "documentation",
        "content": "model Permission {\r\n  id          String   @id @default(uuid())\r\n  name        String   @unique\r\n  resource    String   // users, credits, services\r\n  action      String   // create, read, update, delete\r\n\r\n  roles       RolePermission[]\r\n\r\n  @@unique([resource, action])\r\n  @@map(\"permissions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "role",
          "description": "permission references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "permission references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "promo_code",
        "title": "promo_code",
        "type": "data_model",
        "category": "documentation",
        "content": "model PromoCode {\r\n  id          String   @id @default(uuid())\r\n  code        String   @unique\r\n  credits     Int\r\n  maxUses     Int?\r\n  usedCount   Int      @default(0)\r\n  expiresAt   DateTime?\r\n  active      Boolean  @default(true)\r\n  createdAt   DateTime @default(now())\r\n\r\n  redemptions PromoRedemption[]\r\n\r\n  @@index([code])\r\n  @@map(\"promo_codes\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "promo_redemption",
        "title": "promo_redemption",
        "type": "data_model",
        "category": "documentation",
        "content": "model PromoRedemption {\r\n  id        String   @id @default(uuid())\r\n  userId    String\r\n  codeId    String\r\n  credits   Int\r\n  redeemedAt DateTime @default(now())\r\n\r\n  code PromoCode @relation(fields: [codeId], references: [id])\r\n\r\n  @@unique([userId, codeId])\r\n  @@index([userId])\r\n  @@map(\"promo_redemptions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "promo_redemption references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "role",
        "title": "role",
        "type": "data_model",
        "category": "documentation",
        "content": "model Role {\r\n  id          String   @id @default(uuid())\r\n  name        String   @unique // admin, manager, user, guest\r\n  description String?\r\n\r\n  users       UserRole[]\r\n  permissions RolePermission[]\r\n\r\n  @@map(\"roles\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "role references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "role references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "role_permission",
        "title": "role_permission",
        "type": "data_model",
        "category": "documentation",
        "content": "model RolePermission {\r\n  roleId       String\r\n  permissionId String\r\n\r\n  role       Role @relation(fields: [roleId], references: [id], onDelete: Cascade)\r\n  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)\r\n\r\n  @@id([roleId, permissionId])\r\n  @@map(\"role_permissions\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "role_permission references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "role_permission references role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "usage_log",
        "title": "usage_log",
        "type": "data_model",
        "category": "documentation",
        "content": "model UsageLog {\r\n  id         String   @id @default(uuid())\r\n  userId     String\r\n  service    String   // openai, claude\r\n  model      String   // gpt-4, claude-3\r\n  tokens     Int\r\n  credits    Int\r\n  metadata   Json?\r\n  createdAt  DateTime @default(now())\r\n\r\n  user User @relation(fields: [userId], references: [id])\r\n\r\n  @@index([userId, createdAt])\r\n  @@index([service, createdAt])\r\n  @@map(\"usage_logs\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "usage_log references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "user",
        "title": "user",
        "type": "data_model",
        "category": "documentation",
        "content": "model User {\r\n  id            String   @id @default(uuid())\r\n  email         String   @unique\r\n  passwordHash  String?\r\n  verified      Boolean  @default(false)\r\n  googleId      String?  @unique\r\n  createdAt     DateTime @default(now())\r\n  updatedAt     DateTime @updatedAt\r\n\r\n  roles         UserRole[]\r\n  creditAccount CreditAccount?\r\n  usageLogs     UsageLog[]\r\n\r\n  @@index([email])\r\n  @@map(\"users\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.374Z",
          "updatedAt": "2025-10-14T13:01:08.374Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Consider updating content to match pattern: Data model should define fields/properties"
          },
          {
            "type": "incomplete_content",
            "message": "Data model should define fields/properties",
            "suggestion": "Add field definitions with names and types"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "role",
          "description": "user references role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "user_role",
        "title": "user_role",
        "type": "data_model",
        "category": "documentation",
        "content": "model UserRole {\r\n  userId    String\r\n  roleId    String\r\n  assignedAt DateTime @default(now())\r\n\r\n  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n  role      Role @relation(fields: [roleId], references: [id], onDelete: Cascade)\r\n\r\n  @@id([userId, roleId])\r\n  @@map(\"user_roles\")\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "role",
          "description": "user_role references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "user_role references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Architecture Specification",
        "type": "api_spec",
        "category": "documentation",
        "content": "# Architecture Specification\r\n\r\nThis directory contains the architecture specification for the Smart AI Hub project. It includes data models, service definitions, API specifications, and architectural diagrams that define how the system is structured and how components interact.\r\n\r\n## Contents\r\n\r\n### Data Models\r\nThe data models define the structure and relationships of data in the system.\r\n\r\n- [user.md](data_models/user.md) - User entity model\r\n- [role.md](data_models/role.md) - Role entity model\r\n- [permission.md](data_models/permission.md) - Permission entity model\r\n- [user_role.md](data_models/user_role.md) - User-Role relationship model\r\n- [role_permission.md](data_models/role_permission.md) - Role-Permission relationship model\r\n- [credit_account.md](data_models/credit_account.md) - Credit Account entity model\r\n- [credit_transaction.md](data_models/credit_transaction.md) - Credit Transaction entity model\r\n- [promo_code.md](data_models/promo_code.md) - Promo Code entity model\r\n- [promo_redemption.md](data_models/promo_redemption.md) - Promo Redemption entity model\r\n- [usage_log.md](data_models/usage_log.md) - Usage Log entity model\r\n\r\n### Services\r\nThe services define the microservice architecture of the system.\r\n\r\n- [api_gateway.md](services/api_gateway.md) - API Gateway service specification\r\n- [auth_service.md](services/auth_service.md) - Authentication service specification\r\n- [core_service.md](services/core_service.md) - Core service specification\r\n- [mcp_server.md](services/mcp_server.md) - MCP Server service specification\r\n\r\n### API Definitions\r\nThe API definitions specify the endpoints and contracts for system APIs.\r\n\r\n- [api_definitions/](api_definitions/) - API endpoint specifications and contracts\r\n\r\n### C4 Model\r\nThe C4 model provides a visual representation of the software architecture.\r\n\r\n- [c4_model/](c4_model/) - Context, Container, Component, and Code diagrams",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "README references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_transaction",
          "description": "README references credit_transaction",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "README references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "README references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "README references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "README references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "README references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "README references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "README references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "README references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "README references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "README references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "README references mcp_server",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "api_gateway",
        "title": "API Gateway Service",
        "type": "service_spec",
        "category": "documentation",
        "content": "# API Gateway Service\r\n\r\n## Overview\r\n\r\nThe API Gateway serves as the central entry point for all API requests to the Smart AI Hub platform. It handles request routing, authentication verification, rate limiting, and other cross-cutting concerns.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3000\r\n- **Language**: TypeScript 5.x\r\n\r\n## Components\r\n\r\n- **Express.js HTTP Server**: Core web server handling incoming requests\r\n- **http-proxy-middleware**: Service routing and proxying to backend services\r\n- **Rate Limiter**: Redis-backed rate limiting implementation\r\n- **JWT Validation Middleware**: Authentication token verification\r\n- **CORS Handler**: Cross-origin resource sharing management\r\n- **Request Logger**: Winston-based request/response logging\r\n- **Health Check Endpoint**: Service health monitoring\r\n\r\n## Responsibilities\r\n\r\n1. **Request Routing**: Direct incoming requests to appropriate backend services\r\n2. **Authentication Verification**: Validate JWT tokens on protected routes\r\n3. **Rate Limiting**: Enforce request rate limits based on user roles\r\n4. **CORS Handling**: Manage cross-origin requests\r\n5. **Request/Response Logging**: Log all API requests for monitoring and debugging\r\n6. **Load Balancing**: Distribute load across service instances\r\n7. **Health Checks**: Monitor service health and availability\r\n\r\n## Routing Rules\r\n\r\n```\r\n/api/auth/*     → auth-service:3001\r\n/api/users/*    → core-service:3002\r\n/api/credits/*  → core-service:3002\r\n/api/mcp/*      → mcp-server:3003\r\n/api/ws/*       → mcp-server:3003 (WebSocket upgrade)\r\n```\r\n\r\n## Rate Limiting Configuration\r\n\r\nThe API Gateway implements role-based rate limiting:\r\n\r\n```typescript\r\nconst rateLimiter = rateLimit({\r\n  store: new RedisStore({\r\n    client: redisClient,\r\n    prefix: 'rl:',\r\n  }),\r\n  windowMs: 60 * 1000, // 1 minute\r\n  max: async (req) => {\r\n    const user = req.user;\r\n    if (!user) return 10; // Guest\r\n\r\n    switch (user.role) {\r\n      case 'admin':\r\n        return Number.POSITIVE_INFINITY;\r\n      case 'manager':\r\n        return 120;\r\n      case 'user':\r\n        return 60;\r\n      default:\r\n        return 10;\r\n    }\r\n  },\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n  message: {\r\n    code: 'RATE_LIMIT_EXCEEDED',\r\n    message: 'Too many requests, please try again later',\r\n  },\r\n});\r\n```\r\n\r\n## Proxy Configuration\r\n\r\n```typescript\r\nconst proxyConfig = {\r\n  '/api/auth': {\r\n    target: 'http://auth-service:3001',\r\n    changeOrigin: true,\r\n    pathRewrite: { '^/api/auth': '' },\r\n  },\r\n  '/api/users': {\r\n    target: 'http://core-service:3002',\r\n    changeOrigin: true,\r\n  },\r\n  '/api/mcp': {\r\n    target: 'http://mcp-server:3003',\r\n    changeOrigin: true,\r\n    ws: true, // WebSocket support\r\n  },\r\n};\r\n```\r\n\r\n## Security Features\r\n\r\n- JWT token validation for all protected routes\r\n- Token blacklist checking via Redis\r\n- Request size limits\r\n- IP-based blocking for abusive clients\r\n- Security headers implementation\r\n\r\n## Monitoring\r\n\r\n- Request/response logging with unique request IDs\r\n- Performance metrics collection\r\n- Error tracking and reporting\r\n- Health check endpoints for monitoring systems",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "role",
          "description": "api_gateway references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "api_gateway references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "auth_service",
        "title": "Authentication Service",
        "type": "service_spec",
        "category": "documentation",
        "content": "# Authentication Service\r\n\r\n## Overview\r\n\r\nThe Authentication Service handles all user authentication, authorization, and identity management functions for the Smart AI Hub platform. It supports traditional email/password authentication as well as OAuth integration with external providers.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3001\r\n- **Language**: TypeScript 5.x\r\n- **Authentication**: Passport.js + JWT\r\n- **Database**: PostgreSQL 15+\r\n- **Cache**: Redis 7+\r\n\r\n## Responsibilities\r\n\r\n1. **User Registration & Login**: Handle new user registration and authentication\r\n2. **JWT Token Management**: Generate and validate access and refresh tokens\r\n3. **OAuth 2.0 Integration**: Support for Google and Sora2 OAuth providers\r\n4. **Password Security**: Secure password hashing with bcrypt\r\n5. **Email Verification**: Verify user email addresses\r\n6. **Password Reset**: Secure password recovery functionality\r\n7. **Session Management**: Track and invalidate user sessions\r\n\r\n## Database Tables\r\n\r\n### Users Table\r\n```sql\r\nusers (id, email, password_hash, verified, google_id, created_at, updated_at)\r\n```\r\n\r\n### Refresh Tokens Table\r\n```sql\r\nrefresh_tokens (token, user_id, expires_at)\r\n```\r\n\r\n### Verification Tokens Table\r\n```sql\r\nverification_tokens (token, user_id, type, expires_at)\r\n```\r\n\r\n## External Dependencies\r\n\r\n- **PostgreSQL**: Store user data and authentication records\r\n- **Redis**: Token blacklist, rate limiting, and session storage\r\n- **SendGrid**: Email service for verification and password reset\r\n- **Google OAuth 2.0**: Third-party authentication provider\r\n- **Sora2 Video API**: OAuth integration for video generation services\r\n\r\n## API Endpoints\r\n\r\n```\r\nPOST /register          // User registration\r\nPOST /login             // User login\r\nPOST /logout            // User logout (blacklist token)\r\nPOST /refresh           // Refresh access token\r\nPOST /verify-email      // Email verification\r\nPOST /forgot-password   // Request password reset\r\nPOST /reset-password    // Reset password\r\nGET /me                 // Current user info\r\nGET /oauth/google       // Google OAuth initiate\r\nGET /oauth/google/callback // Google OAuth callback\r\nGET /oauth/sora2        // Sora2 OAuth initiate\r\nGET /oauth/sora2/callback // Sora2 OAuth callback\r\nPOST /oauth/session/verify // Verify session code\r\nPOST /oauth/session/confirm // Confirm session with parameters\r\n```\r\n\r\n## JWT Configuration\r\n\r\n```typescript\r\nconst jwtConfig = {\r\n  accessToken: {\r\n    secret: process.env.JWT_SECRET,\r\n    expiresIn: '15m',\r\n    algorithm: 'HS256',\r\n  },\r\n  refreshToken: {\r\n    secret: process.env.JWT_REFRESH_SECRET,\r\n    expiresIn: '7d',\r\n    algorithm: 'HS256',\r\n  },\r\n};\r\n\r\n// Token Payload Structure\r\ninterface JWTPayload {\r\n  sub: string; // User ID\r\n  email: string;\r\n  role: string;\r\n  iat: number; // Issued at\r\n  exp: number; // Expiration\r\n  jti: string; // JWT ID (for revocation)\r\n}\r\n```\r\n\r\n## Password Policy\r\n\r\n- Minimum 8 characters\r\n- At least 1 uppercase letter\r\n- At least 1 number\r\n- At least 1 special character\r\n- Bcrypt cost factor: 12\r\n\r\n## OAuth Integration\r\n\r\n### Google OAuth Flow\r\n1. User initiates OAuth via `/oauth/google`\r\n2. Redirect to Google's authorization page\r\n3. Google redirects to callback with authorization code\r\n4. Exchange code for access token and user profile\r\n5. Create or update user account\r\n6. Generate JWT tokens for the user\r\n\r\n### Sora2 OAuth Flow\r\n1. User initiates OAuth via `/oauth/sora2`\r\n2. Create session with verification code\r\n3. Send verification code via email\r\n4. User verifies code via `/oauth/session/verify`\r\n5. Complete OAuth flow with `/oauth/session/confirm`\r\n6. Generate JWT tokens for the user\r\n\r\n## Security Features\r\n\r\n- Password hashing with bcrypt (cost factor: 12)\r\n- JWT token blacklisting for logout\r\n- Rate limiting on authentication endpoints\r\n- Email verification for new accounts\r\n- Secure password reset with time-limited tokens\r\n- CSRF protection\r\n- Session management with Redis\r\n\r\n## Token Management\r\n\r\n- Access tokens: 15-minute expiration\r\n- Refresh tokens: 7-day expiration\r\n- Token blacklist for revoked tokens\r\n- Automatic token refresh mechanism\r\n- Secure token storage recommendations\r\n\r\n## Email Services\r\n\r\n- Welcome emails for new registrations\r\n- Email verification notifications\r\n- Password reset emails\r\n- OAuth verification codes\r\n- Security alerts for suspicious activities",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "role",
          "description": "auth_service references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "auth_service references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "core_service",
        "title": "Core Service",
        "type": "service_spec",
        "category": "documentation",
        "content": "# Core Service\r\n\r\n## Overview\r\n\r\nThe Core Service handles the primary business logic of the Smart AI Hub platform, including user management, role-based access control, credit accounting, and usage analytics. It serves as the central hub for managing platform resources and user interactions.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3002\r\n- **Language**: TypeScript 5.x\r\n- **Database**: PostgreSQL 15+ with Prisma ORM\r\n- **Cache**: Redis 7+\r\n\r\n## Responsibilities\r\n\r\n1. **User Management**: CRUD operations for user accounts\r\n2. **Role & Permission Management**: RBAC implementation\r\n3. **Credit Account Management**: Track and manage user credits\r\n4. **Transaction Processing**: Handle credit transactions\r\n5. **Usage Analytics**: Track and analyze service usage\r\n6. **Promotional Code System**: Manage promo codes and redemptions\r\n7. **Sora2 Video Generator Integration**: Session-based authentication for video generation\r\n\r\n## Database Tables\r\n\r\n### Roles and Permissions\r\n```sql\r\nroles, permissions, user_roles, role_permissions\r\n```\r\n\r\n### Credit Management\r\n```sql\r\ncredit_accounts, credit_transactions\r\n```\r\n\r\n### Promotional System\r\n```sql\r\npromo_codes, promo_redemptions\r\n```\r\n\r\n### Usage Tracking\r\n```sql\r\nusage_logs\r\n```\r\n\r\n## Business Logic\r\n\r\n### Credit Deduction with Atomic Transactions\r\nThe service ensures atomic credit deduction operations:\r\n\r\n```typescript\r\nasync function deductCredits(\r\n  userId: string,\r\n  amount: number,\r\n  reason: string,\r\n  metadata?: any\r\n): Promise<void> {\r\n  await prisma.$transaction(async (tx) => {\r\n    // 1. Lock the credit account\r\n    const account = await tx.creditAccount.findUnique({\r\n      where: { userId },\r\n      select: { id: true, balance: true },\r\n    });\r\n\r\n    if (!account) {\r\n      throw new AppError('ACCOUNT_NOT_FOUND', 'Credit account not found');\r\n    }\r\n\r\n    if (account.balance < amount) {\r\n      throw new AppError('INSUFFICIENT_CREDITS', 'Not enough credits');\r\n    }\r\n\r\n    // 2. Update balance\r\n    await tx.creditAccount.update({\r\n      where: { id: account.id },\r\n      data: { balance: { decrement: amount } },\r\n    });\r\n\r\n    // 3. Create transaction record\r\n    await tx.creditTransaction.create({\r\n      data: {\r\n        accountId: account.id,\r\n        amount: -amount,\r\n        type: 'debit',\r\n        reason,\r\n        metadata,\r\n      },\r\n    });\r\n  });\r\n}\r\n```\r\n\r\n### Usage Calculation & Billing\r\n- Track token usage for each LLM provider\r\n- Calculate credit costs based on usage\r\n- Generate billing reports\r\n- Handle usage limits and quotas\r\n\r\n### Role Hierarchy Enforcement\r\n- Implement role-based access control\r\n- Enforce role hierarchy (admin > manager > user > guest)\r\n- Cache permissions for performance\r\n- Support dynamic permission assignments\r\n\r\n## Credit Management APIs\r\n\r\n### Check Credit Balance\r\n```\r\nGET /api/credits/balance\r\nResponse: {\r\n  \"userId\": \"uuid\",\r\n  \"balance\": 1000,\r\n  \"currency\": \"credits\",\r\n  \"lastUpdated\": \"2025-01-01T00:00:00Z\"\r\n}\r\n```\r\n\r\n### Deduct Credits for Video Generation\r\n```\r\nPOST /api/credits/deduct\r\nRequest: {\r\n  \"userId\": \"uuid\",\r\n  \"amount\": 100,\r\n  \"reason\": \"sora2_video_generation\",\r\n  \"metadata\": {\r\n    \"videoId\": \"uuid\",\r\n    \"duration\": 30,\r\n    \"resolution\": \"1080p\"\r\n  }\r\n}\r\nResponse: {\r\n  \"success\": true,\r\n  \"newBalance\": 900,\r\n  \"transactionId\": \"uuid\"\r\n}\r\n```\r\n\r\n### Get Credit Transaction History\r\n```\r\nGET /api/credits/transactions?userId=uuid&limit=10&offset=0\r\nResponse: {\r\n  \"transactions\": [\r\n    {\r\n      \"id\": \"uuid\",\r\n      \"amount\": -100,\r\n      \"type\": \"debit\",\r\n      \"reason\": \"sora2_video_generation\",\r\n      \"createdAt\": \"2025-01-01T00:00:00Z\",\r\n      \"metadata\": {\r\n        \"videoId\": \"uuid\",\r\n        \"duration\": 30\r\n      }\r\n    }\r\n  ],\r\n  \"total\": 25,\r\n  \"hasMore\": true\r\n}\r\n```\r\n\r\n## Database Schema (Key Models)\r\n\r\n### User Model\r\n```typescript\r\nmodel User {\r\n  id            String   @id @default(uuid())\r\n  email         String   @unique\r\n  passwordHash  String?\r\n  verified      Boolean  @default(false)\r\n  googleId      String?  @unique\r\n  createdAt     DateTime @default(now())\r\n  updatedAt     DateTime @updatedAt\r\n\r\n  roles         UserRole[]\r\n  creditAccount CreditAccount?\r\n  usageLogs     UsageLog[]\r\n\r\n  @@index([email])\r\n  @@map(\"users\")\r\n}\r\n```\r\n\r\n### Credit Account Model\r\n```typescript\r\nmodel CreditAccount {\r\n  id        String   @id @default(uuid())\r\n  userId    String   @unique\r\n  balance   Int      @default(0)\r\n  createdAt DateTime @default(now())\r\n  updatedAt DateTime @updatedAt\r\n\r\n  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n  transactions CreditTransaction[]\r\n\r\n  @@index([userId])\r\n  @@map(\"credit_accounts\")\r\n}\r\n```\r\n\r\n### Credit Transaction Model\r\n```typescript\r\nmodel CreditTransaction {\r\n  id          String   @id @default(uuid())\r\n  accountId   String\r\n  amount      Int\r\n  type        String   // debit, credit\r\n  reason      String   // purchase, usage, refund, promo\r\n  metadata    Json?\r\n  createdAt   DateTime @default(now())\r\n\r\n  account CreditAccount @relation(fields: [accountId], references: [id])\r\n\r\n  @@index([accountId, createdAt])\r\n  @@map(\"credit_transactions\")\r\n}\r\n```\r\n\r\n## Security Features\r\n\r\n- RBAC middleware for endpoint protection\r\n- Audit logging for all data changes\r\n- Input validation and sanitization\r\n- SQL injection prevention via Prisma ORM\r\n- Rate limiting on sensitive operations\r\n\r\n## Performance Optimizations\r\n\r\n- Database connection pooling\r\n- Redis caching for frequently accessed data\r\n- Database query optimization\r\n- Pagination for large result sets\r\n- Background job processing for heavy operations\r\n\r\n## Integration Points\r\n\r\n- **Authentication Service**: User verification and role lookup\r\n- **MCP Server**: Credit deduction for usage\r\n- **Payment System**: Credit purchases and refunds\r\n- **Notification Service**: Low balance alerts\r\n- **Analytics Service**: Usage metrics and reporting",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "core_service references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_transaction",
          "description": "core_service references credit_transaction",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "core_service references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "core_service references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "core_service references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "core_service references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "core_service references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "core_service references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "core_service references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "core_service references user_role",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "mcp_server",
        "title": "MCP Server",
        "type": "service_spec",
        "category": "documentation",
        "content": "# MCP Server\r\n\r\n## Overview\r\n\r\nThe MCP (Model Context Protocol) Server handles integration with various LLM providers, manages real-time communication via WebSockets, and tracks usage for billing purposes. It serves as the bridge between the Smart AI Hub platform and external AI services.\r\n\r\n## Technology Stack\r\n\r\n- **Runtime**: Node.js 20 LTS\r\n- **Framework**: Express.js 4.x\r\n- **Port**: 3003\r\n- **Language**: TypeScript 5.x\r\n- **WebSocket**: ws library\r\n- **Queue**: BullMQ for request management\r\n- **Circuit Breaker**: opossum for fault tolerance\r\n\r\n## Responsibilities\r\n\r\n1. **LLM Provider Integration**: Connect with OpenAI, Claude, and other providers\r\n2. **WebSocket Real-time Communication**: Handle streaming responses\r\n3. **Request/Response Transformation**: Convert between platform and provider formats\r\n4. **Token Usage Tracking**: Monitor and log usage for billing\r\n5. **Provider Fallback Logic**: Switch providers when one fails\r\n6. **Sora2 Video Generator API Integration**: Handle video generation requests\r\n7. **Custom GPT Integration**: Enhanced video generation workflows\r\n\r\n## Components\r\n\r\n- **WebSocket Server**: Real-time bidirectional communication\r\n- **OpenAI Client Wrapper**: OpenAI API integration\r\n- **Anthropic Client Wrapper**: Claude API integration\r\n- **Request Queue**: BullMQ for managing request processing\r\n- **Circuit Breaker**: Fault tolerance for provider failures\r\n\r\n## Workflow\r\n\r\n1. Validate JWT & check credits\r\n2. Route to appropriate LLM provider\r\n3. Transform request to provider format\r\n4. Send request with retry logic\r\n5. Stream response via WebSocket\r\n6. Log usage & deduct credits\r\n\r\n## WebSocket Protocol\r\n\r\n### Client → Server\r\n```typescript\r\ninterface MCPRequest {\r\n  id: string;\r\n  type: 'completion' | 'chat' | 'embedding';\r\n  provider: 'openai' | 'claude' | 'auto';\r\n  model: string;\r\n  messages?: Message[];\r\n  prompt?: string;\r\n  stream: boolean;\r\n  maxTokens?: number;\r\n}\r\n```\r\n\r\n### Server → Client (Streaming)\r\n```typescript\r\ninterface MCPStreamChunk {\r\n  id: string;\r\n  type: 'chunk' | 'done' | 'error';\r\n  data?: string;\r\n  usage?: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  };\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n  };\r\n}\r\n```\r\n\r\n### Server → Client (Non-streaming)\r\n```typescript\r\ninterface MCPResponse {\r\n  id: string;\r\n  type: 'completion';\r\n  data: string;\r\n  usage: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n    credits: number;\r\n  };\r\n  metadata: {\r\n    model: string;\r\n    provider: string;\r\n    latency: number;\r\n  };\r\n}\r\n```\r\n\r\n## Provider Fallback Logic\r\n\r\n```typescript\r\nconst providerPriority = ['openai', 'claude'];\r\n\r\nasync function executeWithFallback(request: MCPRequest): Promise<MCPResponse> {\r\n  let lastError: Error;\r\n\r\n  for (const provider of providerPriority) {\r\n    try {\r\n      const result = await providers[provider].execute(request);\r\n      return result;\r\n    } catch (error) {\r\n      lastError = error;\r\n      logger.warn(`Provider ${provider} failed, trying next`, { error });\r\n\r\n      // If rate limited, add delay\r\n      if (error.code === 'RATE_LIMIT_EXCEEDED') {\r\n        await sleep(5000);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new AppError('ALL_PROVIDERS_FAILED', 'All LLM providers failed', { lastError });\r\n}\r\n```\r\n\r\n## Sora2 Video Generator Integration\r\n\r\n### Video Request Structure\r\n```typescript\r\ninterface Sora2VideoRequest {\r\n  prompt: string;\r\n  duration: number; // seconds\r\n  resolution: '720p' | '1080p' | '4K';\r\n  style?: string;\r\n  aspectRatio?: string;\r\n  userId: string;\r\n  sessionId: string;\r\n}\r\n```\r\n\r\n### Video Response Structure\r\n```typescript\r\ninterface Sora2VideoResponse {\r\n  videoId: string;\r\n  status: 'processing' | 'completed' | 'failed';\r\n  url?: string;\r\n  thumbnailUrl?: string;\r\n  duration: number;\r\n  creditsUsed: number;\r\n  createdAt: string;\r\n  completedAt?: string;\r\n}\r\n```\r\n\r\n### Sora2 API Endpoints\r\n\r\n#### Generate Video\r\n```\r\nPOST /api/mcp/sora2/generate\r\nRequest: {\r\n  prompt: string,\r\n  duration: number,\r\n  resolution: string,\r\n  style?: string,\r\n  aspectRatio?: string\r\n}\r\nResponse: {\r\n  videoId: string,\r\n  status: 'processing',\r\n  creditsUsed: number,\r\n  estimatedTime: number\r\n}\r\n```\r\n\r\n#### Check Video Status\r\n```\r\nGET /api/mcp/sora2/status/:videoId\r\nResponse: {\r\n  videoId: string,\r\n  status: 'processing' | 'completed' | 'failed',\r\n  url?: string,\r\n  thumbnailUrl?: string,\r\n  progress: number,\r\n  createdAt: string\r\n}\r\n```\r\n\r\n## Custom GPT Integration for Video Workflows\r\n\r\n### Video Workflow Request\r\n```typescript\r\ninterface VideoWorkflowRequest {\r\n  workflow: 'text-to-video' | 'image-to-video' | 'video-enhancement';\r\n  input: {\r\n    text?: string;\r\n    imageUrl?: string;\r\n    videoUrl?: string;\r\n  };\r\n  parameters: {\r\n    style?: string;\r\n    duration?: number;\r\n    resolution?: string;\r\n    enhancementType?: string;\r\n  };\r\n  sessionId: string;\r\n}\r\n```\r\n\r\n### GPT-Assisted Video Generation\r\n```typescript\r\napp.post('/api/mcp/gpt/video-workflow', authenticate, async (req, res) => {\r\n  const { workflow, input, parameters, sessionId } = req.body;\r\n  \r\n  // Step 1: Use Custom GPT to analyze and enhance the request\r\n  const enhancedPrompt = await gptService.enhanceVideoPrompt({\r\n    originalPrompt: input.text,\r\n    workflow,\r\n    parameters,\r\n    sessionId\r\n  });\r\n  \r\n  // Step 2: Generate video with Sora2 using enhanced prompt\r\n  const videoRequest = await sora2Service.createVideoRequest({\r\n    prompt: enhancedPrompt,\r\n    duration: parameters.duration || 30,\r\n    resolution: parameters.resolution || '1080p',\r\n    style: parameters.style,\r\n    userId: req.user.id,\r\n    sessionId\r\n  });\r\n  \r\n  res.json({\r\n    workflowId: generateId(),\r\n    videoId: videoRequest.id,\r\n    enhancedPrompt,\r\n    status: 'processing'\r\n  });\r\n});\r\n```\r\n\r\n## Circuit Breaker Pattern\r\n\r\n```typescript\r\nimport CircuitBreaker from 'opossum';\r\n\r\nconst options = {\r\n  timeout: 30000, // 30 seconds\r\n  errorThresholdPercentage: 50,\r\n  resetTimeout: 30000, // Try again after 30s\r\n};\r\n\r\nconst breaker = new CircuitBreaker(callOpenAI, options);\r\n\r\nbreaker.on('open', () => {\r\n  logger.error('Circuit breaker opened for OpenAI');\r\n  // Switch to Claude\r\n});\r\n\r\nbreaker.on('halfOpen', () => {\r\n  logger.info('Circuit breaker half-open, testing OpenAI');\r\n});\r\n```\r\n\r\n## Security Features\r\n\r\n- JWT authentication for all requests\r\n- Credit balance verification before processing\r\n- Request size limits\r\n- Input validation and sanitization\r\n- WebSocket connection rate limiting\r\n- Usage tracking and audit logging\r\n\r\n## Performance Optimizations\r\n\r\n- Request queuing with BullMQ\r\n- Connection pooling for LLM providers\r\n- Response streaming for large outputs\r\n- Provider response caching where appropriate\r\n- Automatic retry with exponential backoff\r\n\r\n## Monitoring\r\n\r\n- Request/response logging\r\n- Provider performance metrics\r\n- Error rate tracking\r\n- Usage analytics\r\n- Circuit breaker state monitoring",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "mcp_server references user",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_1",
        "title": "Epic 1: Project Setup & Infrastructure (Sprint 1)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 1: Project Setup & Infrastructure (Sprint 1)\r\n\r\n## E1.1: Development Environment Setup\r\n\r\n**Story Points**: 8\r\n**Priority**: P0 (Critical)\r\n**Status**: In Progress\r\n**Dependencies**: None\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Ubuntu VPS server setup and configuration ✅ DONE\r\n- [x] Docker and Docker Compose installation ✅ DONE\r\n- [x] Nginx reverse proxy configuration ✅ DONE\r\n- [ ] SSL certificate setup (Let's Encrypt) with auto-renewal\r\n- [ ] Basic monitoring setup (PM2 with cluster mode)\r\n- [ ] Server security hardening (firewall, fail2ban, SSH keys only)\r\n\r\n**Technical Details**:\r\n\r\n```bash\r\n# SSL Certificate Setup\r\nsudo apt install certbot python3-certbot-nginx\r\nsudo certbot --nginx -d api.smartaihub.com -d www.smartaihub.com\r\nsudo certbot renew --dry-run  # Test auto-renewal\r\n\r\n# PM2 Setup\r\nnpm install -g pm2\r\npm2 startup systemd\r\npm2 save\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Configure UFW firewall (allow 22, 80, 443)\r\n- [ ] Setup fail2ban for SSH protection\r\n- [ ] Install and configure PM2 with ecosystem.config.js\r\n- [ ] Setup automated SSL renewal cron job\r\n- [ ] Create deployment user with limited permissions\r\n- [ ] Configure log rotation\r\n- [ ] Setup automated backups\r\n\r\n**Technical Debt**: Manual SSL setup initially, automate in Sprint 2\r\n\r\n---\r\n\r\n## E1.2: Database Setup\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-02\r\n- **links_to_architecture**:\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/user_role.md`, `../../02_architecture/data_models/role_permission.md`, `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/promo_code.md`, `../../02_architecture/data_models/promo_redemption.md`, `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] PostgreSQL database installation and configuration ✅\r\n- [x] Redis cache server setup ✅\r\n- [x] Database schema initialization ✅\r\n- [x] Database migration system setup ✅\r\n- [x] Connection pooling configuration ✅\r\n\r\n**Completion Notes**:\r\n\r\n- PostgreSQL 15 configured with optimized settings\r\n- Redis 7 configured for caching and sessions\r\n- Prisma migrations working correctly\r\n- All tables created and indexed\r\n- Connection pool: max 100, min 10 connections\r\n\r\n**Lessons Learned**:\r\n\r\n- Schema alignment between Prisma and migrations requires careful review\r\n- Initial credit balance (1 credit) working as expected\r\n\r\n---\r\n\r\n## E1.3: Project Structure Creation\r\n\r\n**Story Points**: 3\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-02\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Monorepo structure with microservices ✅\r\n- [x] TypeScript configuration for all services ✅\r\n- [x] Docker containers for each service ✅\r\n- [x] Environment configuration management ✅\r\n- [ ] Code quality tools setup (ESLint, Prettier)\r\n\r\n**Remaining Tasks**:\r\n\r\n- [ ] Setup ESLint with shared config\r\n- [ ] Setup Prettier with pre-commit hooks\r\n- [ ] Configure Husky for git hooks\r\n- [ ] Add commitlint for conventional commits\r\n\r\n**Technical Debt**: Code quality tools postponed to Sprint 2\r\n\r\n---\r\n\r\n## NEW: E1.4: CI/CD Pipeline Setup\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E1.3\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] GitHub Actions workflow for automated testing\r\n- [ ] Automated linting and type checking\r\n- [ ] Docker image building and pushing\r\n- [ ] Automated deployment to staging\r\n- [ ] Build status badges in README\r\n\r\n**Pipeline Stages**:\r\n\r\n```yaml\r\n1. Lint & Type Check\r\n2. Unit Tests (with coverage report)\r\n3. Integration Tests\r\n4. Build Docker Images\r\n5. Push to Registry\r\n6. Deploy to Staging (on main branch)\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Create .github/workflows/ci.yml\r\n- [ ] Setup Docker Hub or GitHub Container Registry\r\n- [ ] Configure secrets in GitHub\r\n- [ ] Setup staging environment\r\n- [ ] Add deployment scripts\r\n\r\n---\r\n\r\n## NEW: E1.5: Logging Infrastructure\r\n\r\n**Story Points**: 3\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E1.3\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Winston logger configured in all services\r\n- [ ] Structured JSON logging format\r\n- [ ] Log levels properly configured (dev: debug, prod: info)\r\n- [ ] Request ID correlation across services\r\n- [ ] Error stack traces captured\r\n- [ ] Sensitive data masking in logs\r\n\r\n**Implementation**:\r\n\r\n```typescript\r\n// Shared logger configuration\r\nimport winston from 'winston';\r\n\r\nconst logger = winston.createLogger({\r\n  level: process.env.LOG_LEVEL || 'info',\r\n  format: winston.format.combine(\r\n    winston.format.timestamp(),\r\n    winston.format.errors({ stack: true }),\r\n    winston.format.json()\r\n  ),\r\n  defaultMeta: {\r\n    service: process.env.SERVICE_NAME,\r\n  },\r\n});",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_1 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_transaction",
          "description": "epic_1 references credit_transaction",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_1 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "epic_1 references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "epic_1 references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "epic_1 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "epic_1 references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_1 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_1 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "epic_1 references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_1 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_1 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_1 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_1 references mcp_server",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "README",
          "description": "epic_1 references README",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_2",
        "title": "Epic 2: Authentication System (Sprint 1-2)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 2: Authentication System (Sprint 1-2)\r\n\r\n## E2.1: Basic Authentication API\r\n\r\n**Story Points**: 8\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E1.2 (completed), E1.3 (completed)\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] User registration with email/password ✅ DONE\r\n- [x] User login with JWT token generation ✅ DONE\r\n- [x] Password hashing with bcrypt (cost: 12) ✅ DONE\r\n- [ ] Email verification system (6-digit OTP)\r\n- [ ] Password reset functionality\r\n- [x] JWT token validation middleware ✅ DONE\r\n- [x] Refresh token mechanism ✅ DONE\r\n- [x] Token blacklist (logout functionality) ✅ DONE\r\n\r\n**Completion Notes**:\r\n\r\n- Login endpoint fully implemented with credential validation\r\n- JWT middleware created for protected routes with blacklist checking\r\n- Refresh token mechanism with rotation implemented\r\n- Token blacklist functionality working for logout\r\n- Failed login attempt logging implemented\r\n- Comprehensive test coverage for login and refresh flows\r\n\r\n**Tests Completed**:\r\n\r\n- [x] Login success/failure scenarios\r\n- [x] JWT generation and validation\r\n- [x] Refresh token rotation\r\n- [x] Token blacklist functionality\r\n- [x] Validation error handling\r\n\r\n**Detailed Tasks**:\r\n\r\n**Day 1: Login Implementation**\r\n\r\n```typescript\r\n// POST /login endpoint\r\n- [ ] Validate email and password format\r\n- [ ] Query user from database\r\n- [ ] Verify password with bcrypt.compare\r\n- [ ] Generate access token (15min expiry)\r\n- [ ] Generate refresh token (7 days expiry)\r\n- [ ] Store refresh token in Redis\r\n- [ ] Track failed login attempts (max 5 per 15min)\r\n- [ ] Create audit log entry\r\n- [ ] Return tokens in response\r\n```\r\n\r\n**Day 2: JWT Middleware & Email Verification**\r\n\r\n```typescript\r\n// JWT Middleware\r\n- [ ] Extract token from Authorization header\r\n- [ ] Validate token signature\r\n- [ ] Check token expiration\r\n- [ ] Verify token not in blacklist (Redis)\r\n- [ ] Attach user to request object\r\n- [ ] Handle token errors gracefully\r\n\r\n// Email Verification\r\n- [ ] Generate 6-digit OTP\r\n- [ ] Store OTP in Redis (15min TTL)\r\n- [ ] Send verification email via SendGrid\r\n- [ ] Create /verify-email endpoint\r\n- [ ] Mark user as verified in database\r\n- [ ] Rate limit verification attempts\r\n```\r\n\r\n**Day 3-4: Password Reset & Refresh Token**\r\n\r\n```typescript\r\n// Password Reset\r\n- [ ] POST /forgot-password - Generate reset token\r\n- [ ] Send reset email with link\r\n- [ ] Store token in Redis (1 hour TTL)\r\n- [ ] POST /reset-password - Validate token\r\n- [ ] Update password hash\r\n- [ ] Invalidate all user sessions\r\n\r\n// Refresh Token\r\n- [ ] POST /refresh endpoint\r\n- [ ] Validate refresh token\r\n- [ ] Generate new access token\r\n- [ ] Rotate refresh token (optional)\r\n```\r\n\r\n**Unit Tests Required**:\r\n\r\n- [ ] Registration validation tests\r\n- [ ] Login success/failure scenarios\r\n- [ ] JWT generation and validation\r\n- [ ] Password hashing verification\r\n- [ ] Token expiration handling\r\n- [ ] Blacklist functionality\r\n\r\n**Integration Tests Required**:\r\n\r\n- [ ] Full registration flow\r\n- [ ] Login → Protected route → Logout\r\n- [ ] Email verification flow\r\n- [ ] Password reset flow\r\n\r\n**Blockers**:\r\n\r\n- Need SendGrid API key for email verification\r\n- Need to decide on OTP vs magic link for verification\r\n\r\n**Technical Debt**:\r\n\r\n- TODO: Implement rate limiting per IP/user\r\n- TODO: Add account lockout after failed attempts\r\n- TODO: Implement 2FA (Phase 2)\r\n\r\n---\r\n\r\n## E2.4: Email Verification System\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1 (completed)\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] 6-digit OTP generation ✅\r\n- [x] OTP email delivery via SendGrid ✅\r\n- [x] OTP verification endpoint ✅\r\n- [x] OTP expiry (15 minutes) ✅\r\n- [x] Rate limiting for verification attempts ✅\r\n- [x] Account status update after verification ✅\r\n- [x] Resend OTP functionality ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Email verification system fully implemented with 6-digit OTP\r\n- SendGrid integration configured and working\r\n- OTP verification endpoint with proper validation\r\n- Rate limiting implemented (max 5 attempts per 15 minutes)\r\n- Account status updates working correctly\r\n- Resend OTP functionality implemented\r\n- Comprehensive test coverage for verification flow\r\n\r\n**Implementation Details**:\r\n\r\n```typescript\r\n// OTP Generation\r\n- Generate cryptographically secure 6-digit code\r\n- Store in Redis with 15-minute TTL\r\n- Include user ID and timestamp in Redis key\r\n\r\n// Email Template\r\n- Professional HTML email template\r\n- Clear instructions for users\r\n- Company branding\r\n- Expiration time notice\r\n\r\n// Verification Endpoint\r\nPOST /api/auth/verify-email\r\n{\r\n  \"email\": \"user@example.com\",\r\n  \"otp\": \"123456\"\r\n}\r\n\r\n// Resend Endpoint\r\nPOST /api/auth/resend-verification\r\n{\r\n  \"email\": \"user@example.com\"\r\n}\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Configure SendGrid API integration\r\n- [ ] Create OTP generation utility\r\n- [ ] Design email template\r\n- [ ] Implement verification endpoint\r\n- [ ] Add rate limiting (max 5 attempts per 15 min)\r\n- [ ] Create resend OTP endpoint\r\n- [ ] Add verification status to user model\r\n- [ ] Update registration flow to require verification\r\n\r\n**Security Measures**:\r\n\r\n- [ ] Constant-time OTP comparison\r\n- [ ] Secure OTP generation using crypto.randomBytes()\r\n- [ ] Rate limiting per IP and email\r\n- [ ] OTP attempt logging\r\n- [ ] Automatic cleanup of expired OTPs\r\n\r\n**Tests Required**:\r\n\r\n- [ ] OTP generation and storage\r\n- [ ] Email sending functionality\r\n- [ ] Successful verification flow\r\n- [ ] Expired OTP handling\r\n- [ ] Invalid OTP attempts\r\n- [ ] Rate limiting enforcement\r\n- [ ] Resend OTP functionality\r\n\r\n---\r\n\r\n## E2.5: Password Reset Flow\r\n\r\n**Story Points**: 3\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.4 (Email Verification)\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Password reset request endpoint ✅\r\n- [x] Secure reset token generation ✅\r\n- [x] Reset email delivery ✅\r\n- [x] Password reset confirmation endpoint ✅\r\n- [x] Token expiry (1 hour) ✅\r\n- [x] Session invalidation after reset ✅\r\n- [x] Password strength validation ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Password reset flow fully implemented\r\n- Secure reset token generation with crypto\r\n- Reset email delivery working with SendGrid\r\n- Password reset confirmation endpoint implemented\r\n- Token expiry set to 1 hour\r\n- All user sessions invalidated after password reset\r\n- Password strength validation implemented\r\n- Comprehensive test coverage for password reset flow\r\n\r\n**Implementation Details**:\r\n\r\n```typescript\r\n// Reset Request\r\nPOST /api/auth/forgot-password\r\n{\r\n  \"email\": \"user@example.com\"\r\n}\r\n\r\n// Reset Confirmation\r\nPOST /api/auth/reset-password\r\n{\r\n  \"token\": \"secure-reset-token\",\r\n  \"newPassword\": \"newStrongPassword123!\"\r\n}\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Create secure reset token generator\r\n- [ ] Store reset tokens in Redis with 1-hour TTL\r\n- [ ] Design password reset email template\r\n- [ ] Implement forgot-password endpoint\r\n- [ ] Implement reset-password endpoint\r\n- [ ] Invalidate all user sessions after reset\r\n- [ ] Add password strength validation\r\n- [ ] Log password reset events\r\n\r\n**Security Measures**:\r\n\r\n- [ ] Cryptographically secure reset tokens\r\n- [ ] Single-use tokens (deleted after use)\r\n- [ ] Rate limiting for reset requests\r\n- [ ] Verify token existence before allowing reset\r\n- [ ] Audit trail for password changes\r\n\r\n**Tests Required**:\r\n\r\n- [ ] Reset request flow\r\n- [ ] Token validation\r\n- [ ] Password update success\r\n- [ ] Invalid token handling\r\n- [ ] Expired token handling\r\n- [ ] Session invalidation verification\r\n\r\n---\r\n\r\n## E2.2: Google OAuth Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1\r\n**Risk Level**: Medium\r\n**Blocks**: None\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Google OAuth 2.0 configuration ✅\r\n- [x] OAuth callback handling ✅\r\n- [x] User account creation from Google profile ✅\r\n- [x] Account linking (existing email) ✅\r\n- [x] OAuth error handling ✅\r\n- [x] CSRF protection in OAuth flow ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Google OAuth 2.0 fully configured with Passport.js\r\n- OAuth callback handler implemented\r\n- User account creation from Google profile working\r\n- Account linking for existing emails implemented\r\n- Comprehensive OAuth error handling\r\n- CSRF protection implemented with state parameter\r\n- OAuth endpoints tested and working\r\n\r\n**Prerequisites**:\r\n\r\n- [ ] Create Google Cloud Console project\r\n- [ ] Configure OAuth 2.0 credentials\r\n- [ ] Add authorized redirect URIs\r\n- [ ] Obtain client ID and secret\r\n\r\n**Implementation Tasks**:\r\n\r\n```typescript\r\n// Passport Google Strategy\r\n- [ ] Install passport-google-oauth20\r\n- [ ] Configure strategy with client ID/secret\r\n- [ ] Define callback URL\r\n- [ ] Handle user profile mapping\r\n- [ ] Check if user exists (by email or googleId)\r\n- [ ] Create new user or update existing\r\n- [ ] Issue JWT tokens\r\n- [ ] Handle OAuth errors\r\n```\r\n\r\n**Endpoints**:\r\n\r\n```\r\nGET  /auth/google           - Initiate OAuth flow\r\nGET  /auth/google/callback  - OAuth callback handler\r\n```\r\n\r\n**Security Considerations**:\r\n\r\n- [ ] Validate state parameter (CSRF)\r\n- [ ] Verify token with Google\r\n- [ ] Rate limit OAuth endpoints\r\n- [ ] Log OAuth events for audit\r\n\r\n**Testing**:\r\n\r\n- [ ] Mock Google OAuth responses\r\n- [ ] Test account creation flow\r\n- [ ] Test account linking flow\r\n- [ ] Test error scenarios\r\n\r\n---\r\n\r\n## E2.3: Role-Based Access Control (RBAC)\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`, `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/user_role.md`, `../../02_architecture/data_models/role_permission.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Role system implementation (SuperAdmin, Admin, Manager, User, Guest) ✅\r\n- [x] Permission system with resource-action pairs ✅\r\n- [x] Role assignment functionality ✅\r\n- [x] Permission checking middleware ✅\r\n- [x] Default role assignment (User) for new registrations ✅\r\n- [x] Role hierarchy enforcement ✅\r\n\r\n**Database Changes**:\r\n\r\n```prisma\r\n// Already defined in schema\r\n- roles table ✅\r\n- permissions table ✅\r\n- user_roles junction table ✅\r\n- role_permissions junction table ✅\r\n```\r\n\r\n**Default Roles & Permissions**:\r\n\r\n```typescript\r\nSuperAdmin:\r\n  - ALL permissions on ALL resources ✅\r\n\r\nAdmin:\r\n  - users: create, read, update, delete ✅\r\n  - credits: read, update, adjust ✅\r\n  - roles: read, assign ✅\r\n  - services: read, configure ✅\r\n\r\nManager:\r\n  - users: read (team only) ✅\r\n  - credits: read (team only), adjust (team only) ✅\r\n  - services: read ✅\r\n\r\nUser:\r\n  - users: read (self only), update (self only) ✅\r\n  - credits: read (self only) ✅\r\n  - services: use ✅\r\n\r\nGuest:\r\n  - users: read (self only) ✅\r\n  - credits: read (self only) ✅\r\n  - services: limited use ✅\r\n```\r\n\r\n**Implementation Tasks**:\r\n\r\n- [x] Create seed data for default roles/permissions ✅\r\n- [x] Implement role assignment service ✅\r\n- [x] Create RBAC middleware ✅\r\n- [x] Add role-based route protection ✅\r\n- [x] Implement permission caching (Redis) ✅\r\n\r\n**Middleware Usage**:\r\n\r\n```typescript\r\n// Protect routes by permission\r\nrouter.delete('/users/:id', requirePermission('users', 'delete'), deleteUser);\r\n\r\n// Protect routes by role\r\nrouter.get('/admin/dashboard', requireRole(['admin', 'superadmin']), getAdminDashboard);\r\n```\r\n\r\n**Completion Notes**:\r\n\r\n- Complete RBAC system implemented with 5 default roles (SuperAdmin, Admin, Manager, User, Guest)\r\n- Permission-based access control with resource-action pairs\r\n- Redis caching for permission checks (1 hour TTL)\r\n- Comprehensive test coverage for all RBAC middleware functions\r\n- Role assignment/removal endpoints with proper authorization\r\n- Seed script creates all default roles and permissions\r\n- Permission invalidation cache when roles are changed",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_2 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "epic_2 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role_permission",
          "description": "epic_2 references role_permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_2 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user_role",
          "description": "epic_2 references user_role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_2 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_2 references core_service",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_3",
        "title": "Epic 3: Credit Management System (Sprint 2-3)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 3: Credit Management System (Sprint 2-3)\r\n\r\n## E3.1: Credit Account System\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Credit account creation for new users ✅\r\n- [x] Initial balance (1 credit) ✅\r\n- [x] Credit balance tracking API ✅\r\n- [x] Credit transaction logging ✅\r\n- [x] Credit usage calculation ✅\r\n- [x] Credit history API endpoints ✅\r\n\r\n**Completion Notes**:\r\n\r\n- Auto-creation on user registration\r\n- Database schema implemented\r\n- Initial balance setup\r\n- Credit balance endpoint with Redis caching (60s TTL)\r\n- Transaction history with pagination (page/limit)\r\n- Admin credit adjustment endpoints\r\n- Promo code redemption system\r\n- Comprehensive error handling and validation\r\n\r\n**API Endpoints Implemented**:\r\n\r\n```typescript\r\nGET    /credits/balance        - Get current balance (with caching)\r\nGET    /credits/history        - Transaction history (paginated)\r\nPOST   /credits/redeem         - Redeem promo codes\r\nPOST   /admin/credits/adjust   - Admin credit adjustments\r\nGET    /admin/credits/:userId  - Get user credit info (admin)\r\n```\r\n\r\n---\r\n\r\n## E3.2: Credit Top-up System\r\n\r\n**Story Points**: 8\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E3.1, Stripe Account Setup\r\n**Risk Level**: High (Payment integration)\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Credit package configuration\r\n- [ ] Stripe payment integration\r\n- [ ] Checkout page (hosted or embedded)\r\n- [ ] Payment webhook handling\r\n- [ ] Transaction security (idempotency)\r\n- [ ] Purchase confirmation email\r\n- [ ] Refund processing\r\n\r\n**Credit Packages**:\r\n\r\n```typescript\r\n{\r\n  starter: { credits: 100, price: 10, perCredit: 0.10 },\r\n  pro: { credits: 1000, price: 80, perCredit: 0.08 },\r\n  business: { credits: 10000, price: 600, perCredit: 0.06 },\r\n  enterprise: { custom: true }\r\n}\r\n```\r\n\r\n**Implementation Steps**:\r\n\r\n1. **Stripe Setup** (1 day)\r\n   - [ ] Create Stripe account\r\n   - [ ] Configure products and prices\r\n   - [ ] Setup webhook endpoint\r\n   - [ ] Add Stripe SDK\r\n\r\n2. **Purchase Flow** (2 days)\r\n   - [ ] Create checkout session endpoint\r\n   - [ ] Redirect to Stripe checkout\r\n   - [ ] Handle success/cancel callbacks\r\n   - [ ] Store pending transactions\r\n\r\n3. **Webhook Processing** (2 days)\r\n   - [ ] Verify webhook signatures\r\n   - [ ] Handle checkout.session.completed\r\n   - [ ] Handle payment_intent.succeeded\r\n   - [ ] Handle payment_intent.failed\r\n   - [ ] Implement idempotency (prevent duplicate credits)\r\n   - [ ] Update credit balance atomically\r\n\r\n4. **Email Notifications** (1 day)\r\n   - [ ] Purchase confirmation email\r\n   - [ ] Receipt with transaction details\r\n   - [ ] Failed payment notification\r\n\r\n**Security Measures**:\r\n\r\n- [ ] Webhook signature verification\r\n- [ ] Idempotency keys for all operations\r\n- [ ] Transaction audit logging\r\n- [ ] PCI compliance (Stripe handles card data)\r\n\r\n**Testing**:\r\n\r\n- [ ] Use Stripe test mode\r\n- [ ] Test successful payment\r\n- [ ] Test failed payment\r\n- [ ] Test webhook retry mechanism\r\n- [ ] Test duplicate webhook prevention\r\n\r\n---\r\n\r\n## E3.3: Admin Credit Management\r\n\r\n**Story Points**: 3\r\n**Priority**: P2 (Medium)\r\n**Status**: Not Started\r\n**Dependencies**: E3.1, E2.3 (RBAC)\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Admin interface for credit adjustments\r\n- [ ] Manual credit addition/deduction\r\n- [ ] Bulk credit operations\r\n- [ ] Credit audit trail\r\n- [ ] Credit usage reports\r\n\r\n**Admin Endpoints**:\r\n\r\n```typescript\r\nPOST   /admin/credits/adjust       - Adjust user credits\r\nPOST   /admin/credits/bulk         - Bulk operations\r\nGET    /admin/credits/report       - Usage reports\r\nGET    /admin/credits/audit        - Audit trail\r\n```\r\n\r\n**Tasks**:\r\n\r\n- [ ] Create admin credit adjustment service\r\n- [ ] Add reason field for manual adjustments\r\n- [ ] Implement bulk operations (CSV import)\r\n- [ ] Create audit trail queries\r\n- [ ] Build usage report generator\r\n\r\n---\r\n\r\n## E3.4: Promotional Code System\r\n\r\n**Story Points**: 5\r\n**Priority**: P2 (Medium)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E3.1\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/promo_code.md`, `../../02_architecture/data_models/promo_redemption.md`, `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Promo code creation (admin only) ✅\r\n- [x] Code redemption functionality ✅\r\n- [x] Validation (exists, not expired, not used) ✅\r\n- [x] One-time use per user enforcement ✅\r\n- [x] Credit bonus application ✅\r\n- [x] Redemption tracking ✅\r\n\r\n**Promo Code Properties**:\r\n\r\n```typescript\r\ninterface PromoCode {\r\n  code: string; // e.g., \"WELCOME10\"\r\n  credits: number; // Bonus credits\r\n  maxUses?: number; // Global limit (null = unlimited)\r\n  expiresAt?: Date; // Expiration date (null = never)\r\n  active: boolean; // Can be deactivated\r\n}\r\n```\r\n\r\n**Endpoints Implemented**:\r\n\r\n```typescript\r\nPOST   /credits/redeem         - Redeem code (user)\r\n// Admin endpoints for promo management will be in Phase 2\r\n```\r\n\r\n**Validation Rules Implemented**:\r\n\r\n- [x] Code must exist and be active\r\n- [x] Code must not be expired\r\n- [x] User must not have redeemed this code before\r\n- [x] Global max uses not exceeded (if set)\r\n\r\n**Completion Notes**:\r\n\r\n- Atomic transaction implementation for redemption\r\n- Redis cache invalidation on credit updates\r\n- Comprehensive error handling for all validation cases\r\n- Usage tracking with promo_code_usage table\r\n- Admin management UI planned for Phase 2",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_3 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_transaction",
          "description": "epic_3 references credit_transaction",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_3 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_code",
          "description": "epic_3 references promo_code",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "promo_redemption",
          "description": "epic_3 references promo_redemption",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "epic_3 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_3 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_3 references core_service",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_4",
        "title": "Epic 4: MCP Server Development (Sprint 3-4)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 4: MCP Server Development (Sprint 3-4)\r\n\r\n## E4.1: MCP Server Foundation\r\n\r\n**Story Points**: 8\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-03\r\n**Dependencies**: E2.1 (JWT middleware), E3.1 (Credit system)\r\n**Risk Level**: High\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`, `../../02_architecture/services/api_gateway.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] MCP protocol implementation ✅\r\n- [x] WebSocket server with authentication ✅\r\n- [x] Request/response message format ✅\r\n- [x] Connection lifecycle management ✅\r\n- [x] Error handling and logging ✅\r\n- [x] Heartbeat/ping-pong mechanism ✅\r\n\r\n**WebSocket Server Setup**:\r\n\r\n```typescript\r\nimport WebSocket from 'ws';\r\n\r\nconst wss = new WebSocket.Server({\r\n  port: 3003,\r\n  verifyClient: async (info, callback) => {\r\n    // Verify JWT from query param or header\r\n    try {\r\n      const token = extractToken(info.req);\r\n      const user = await verifyToken(token);\r\n      info.req.user = user;\r\n      callback(true);\r\n    } catch (error) {\r\n      callback(false, 401, 'Unauthorized');\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n**Message Protocol**:\r\n\r\n```typescript\r\n// Client → Server\r\ninterface MCPRequest {\r\n  id: string; // Unique request ID\r\n  type: 'completion' | 'chat'; // Request type\r\n  provider?: 'openai' | 'claude' | 'auto';\r\n  model: string;\r\n  messages: Message[];\r\n  stream: boolean;\r\n  maxTokens?: number;\r\n  temperature?: number;\r\n}\r\n\r\n// Server → Client\r\ninterface MCPResponse {\r\n  id: string; // Matches request ID\r\n  type: 'chunk' | 'done' | 'error';\r\n  data?: string; // Content chunk\r\n  usage?: TokenUsage; // Final usage stats\r\n  error?: ErrorDetails;\r\n}\r\n```\r\n\r\n**Connection Management**:\r\n\r\n- [x] Handle client connect ✅\r\n- [x] Authenticate with JWT ✅\r\n- [x] Track active connections (Map) ✅\r\n- [x] Handle client disconnect ✅\r\n- [x] Clean up resources ✅\r\n- [x] Implement reconnection logic ✅\r\n\r\n**Heartbeat**:\r\n\r\n```typescript\r\n// Ping every 30 seconds\r\nsetInterval(() => {\r\n  wss.clients.forEach((ws) => {\r\n    if (!ws.isAlive) {\r\n      ws.terminate();\r\n      return;\r\n    }\r\n    ws.isAlive = false;\r\n    ws.ping();\r\n  });\r\n}, 30000);\r\n```\r\n\r\n**Completion Notes**:\r\n\r\n- Full WebSocket server implementation with authentication\r\n- Connection service for managing active connections\r\n- Credit service integration for pre-request validation\r\n- Logging service for request tracking and analytics\r\n- Health check and stats endpoints for monitoring\r\n- Comprehensive error handling and structured logging\r\n- Mock LLM processing (placeholder for actual AI integration)\r\n\r\n---\r\n\r\n## E4.2: OpenAI Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-13\r\n**Dependencies**: E4.1\r\n**Risk Level**: Medium\r\n**Assigned To**: Backend Team\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`, `../../02_architecture/data_models/credit_transaction.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] OpenAI SDK integration\r\n- [x] Support for GPT-3.5, GPT-4\r\n- [x] Streaming responses\r\n- [x] Token usage tracking\r\n- [x] Error handling (rate limits, timeouts)\r\n- [x] Credit deduction per request\r\n\r\n**Completion Notes**:\r\n\r\n- Full OpenAI SDK integration completed with streaming support\r\n- GPT-3.5 and GPT-4 models implemented\r\n- Token usage tracking and credit deduction working\r\n- Rate limiting and timeout handling implemented\r\n- Comprehensive error handling for all failure scenarios\r\n- Integration with MCP server foundation completed\r\n\r\n**Implementation**:\r\n\r\n```typescript\r\nimport OpenAI from 'openai';\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nasync function callOpenAI(request: MCPRequest): Promise<MCPResponse> {\r\n  // Check user credits before making request\r\n  await checkSufficientCredits(request.userId, estimateCredits(request));\r\n\r\n  try {\r\n    const stream = await openai.chat.completions.create({\r\n      model: request.model,\r\n      messages: request.messages,\r\n      stream: true,\r\n      max_tokens: request.maxTokens,\r\n    });\r\n\r\n    // Stream chunks back to client\r\n    for await (const chunk of stream) {\r\n      ws.send(\r\n        JSON.stringify({\r\n          id: request.id,\r\n          type: 'chunk',\r\n          data: chunk.choices[0]?.delta?.content,\r\n        })\r\n      );\r\n    }\r\n\r\n    // Deduct credits based on actual usage\r\n    await deductCredits(request.userId, usage.totalTokens);\r\n  } catch (error) {\r\n    // Handle errors (rate limit, timeout, etc.)\r\n  }\r\n}\r\n```\r\n\r\n**Rate Limit Handling**:\r\n\r\n- [ ] Detect 429 status code\r\n- [ ] Implement exponential backoff\r\n- [ ] Queue requests if rate limited\r\n- [ ] Fallback to Claude if persistent\r\n\r\n**Tasks**:\r\n\r\n- [ ] Install OpenAI SDK\r\n- [ ] Create OpenAI provider wrapper\r\n- [ ] Implement streaming logic\r\n- [ ] Add token counting\r\n- [ ] Integrate credit deduction\r\n- [ ] Add comprehensive error handling\r\n\r\n---\r\n\r\n## E4.5: Sora2 Video Generator Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: ✅ COMPLETED\r\n**Completed Date**: 2025-10-13\r\n**Dependencies**: E4.1, E4.2\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`, `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`, `../../02_architecture/data_models/credit_transaction.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] Sora2 Video API integration\r\n- [x] Session-based authentication with verification codes\r\n- [x] Google OAuth integration for Sora2\r\n- [x] Credit management for video generation\r\n- [x] Custom GPT integration for video workflows\r\n- [x] Error handling for video generation failures\r\n\r\n**Completion Notes**:\r\n\r\n- Full Sora2 Video Generator integration completed\r\n- Session-based authentication system implemented with verification codes\r\n- Google OAuth integration with session parameters working\r\n- Credit management APIs (check and deduct) implemented for video generation\r\n- Custom GPT integration for video workflows completed\r\n- Comprehensive error handling for all video generation scenarios\r\n- Redis session storage implemented for OAuth tokens\r\n- Atomic credit transactions for video generation\r\n\r\n**Implementation Details**:\r\n\r\n```typescript\r\n// Sora2 Video Generation Endpoint\r\nPOST /api/sora2/generate\r\n{\r\n  \"prompt\": \"A beautiful sunset over the ocean\",\r\n  \"duration\": 10,\r\n  \"resolution\": \"1080p\"\r\n}\r\n\r\n// Session-based Authentication\r\nGET /api/sora2/auth/session?code=verification_code\r\n{\r\n  \"sessionToken\": \"session_token_here\",\r\n  \"expiresAt\": \"2025-10-14T08:57:00Z\"\r\n}\r\n\r\n// Credit Management for Video Generation\r\nPOST /api/credits/check\r\nPOST /api/credits/deduct\r\n{\r\n  \"userId\": \"user_id\",\r\n  \"credits\": 5,\r\n  \"service\": \"sora2\",\r\n  \"sessionId\": \"session_token_here\"\r\n}\r\n```\r\n\r\n**OAuth Flow with Verification Codes**:\r\n\r\n1. User initiates video generation request\r\n2. System generates verification code and stores in Redis\r\n3. User authorizes via Google OAuth with verification code\r\n4. System receives OAuth callback with verification code\r\n5. System creates session token and stores in Redis\r\n6. User can now generate videos using session token\r\n\r\n**Security Measures**:\r\n\r\n- [x] Verification codes expire after 15 minutes\r\n- [x] Session tokens expire after 24 hours\r\n- [x] All requests require valid session token\r\n- [x] Credit deduction happens before video generation\r\n- [x] Audit trail for all video generation requests\r\n\r\n**Tests Completed**:\r\n\r\n- [x] OAuth flow with verification codes\r\n- [x] Session management in Redis\r\n- [x] Credit check and deduction for video generation\r\n- [x] Video generation with valid session\r\n- [x] Error handling for expired sessions\r\n- [x] Error handling for insufficient credits\r\n\r\n---\r\n\r\n## E4.3: Claude Integration\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E4.1, E4.2\r\n**Risk Level**: Medium\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`\r\n  - Data Models: `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Anthropic SDK integration\r\n- [ ] Support for Claude-3 models\r\n- [ ] Unified interface with OpenAI\r\n- [ ] Provider switching logic\r\n- [ ] Load balancing between providers\r\n\r\n**Provider Abstraction**:\r\n\r\n```typescript\r\ninterface LLMProvider {\r\n  execute(request: MCPRequest): Promise<MCPResponse>;\r\n  estimateCredits(request: MCPRequest): number;\r\n  checkAvailability(): Promise<boolean>;\r\n}\r\n\r\nclass OpenAIProvider implements LLMProvider {\r\n  // Implementation\r\n}\r\n\r\nclass ClaudeProvider implements LLMProvider {\r\n  // Implementation\r\n}\r\n\r\n// Provider selection\r\nconst providers = {\r\n  openai: new OpenAIProvider(),\r\n  claude: new ClaudeProvider(),\r\n};\r\n\r\nfunction selectProvider(request: MCPRequest): LLMProvider {\r\n  if (request.provider && request.provider !== 'auto') {\r\n    return providers[request.provider];\r\n  }\r\n\r\n  // Auto-select based on availability and load\r\n  return selectBestProvider();\r\n}\r\n```\r\n\r\n---\r\n\r\n## E4.4: MCP Authentication & Authorization\r\n\r\n**Story Points**: 3\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E4.1, E2.1\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/mcp_server.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/credit_account.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] JWT validation for WebSocket connections\r\n- [ ] User permission checking per request\r\n- [ ] Credit validation before LLM calls\r\n- [ ] Service access control by role\r\n- [ ] Usage logging per user\r\n\r\n**Pre-request Checks**:\r\n\r\n```typescript\r\nasync function handleMCPRequest(ws: WebSocket, request: MCPRequest) {\r\n  const user = ws.user; // From JWT validation\r\n\r\n  // 1. Check user has permission to use service\r\n  if (!(await hasPermission(user, 'services', 'use'))) {\r\n    return sendError(ws, 'FORBIDDEN', 'No permission to use AI services');\r\n  }\r\n\r\n  // 2. Check sufficient credits\r\n  const estimatedCredits = estimateCredits(request);\r\n  const balance = await getCreditBalance(user.id);\r\n\r\n  if (balance < estimatedCredits) {\r\n    return sendError(ws, 'INSUFFICIENT_CREDITS', 'Not enough credits');\r\n  }\r\n\r\n  // 3. Check rate limits\r\n  if (await isRateLimited(user.id)) {\r\n    return sendError(ws, 'RATE_LIMIT_EXCEEDED', 'Too many requests');\r\n  }\r\n\r\n  // 4. Process request\r\n  await processLLMRequest(ws, request);\r\n\r\n  // 5. Log usage\r\n  await logUsage(user.id, request, response);\r\n}",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_4 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_transaction",
          "description": "epic_4 references credit_transaction",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_4 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "epic_4 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_4 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_4 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_4 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_4 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_4 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_4 references mcp_server",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_5",
        "title": "Epic 5: Frontend Development (Sprint 4-5)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 5: Frontend Development (Sprint 4-5)\r\n\r\n## E5.1: React App Setup\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: 🔄 In Progress (Started 2025-10-04)\r\n**Dependencies**: None\r\n**Risk Level**: Low\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [x] React 18+ with TypeScript\r\n- [x] Vite build tool configuration\r\n- [ ] Material-UI component library\r\n- [ ] Redux Toolkit state management\r\n- [ ] React Router navigation\r\n- [ ] Responsive layout foundation\r\n\r\n**Current Progress**:\r\n\r\n- ✅ Vite + React + TypeScript setup complete\r\n- ✅ Development server running on port 5173\r\n- ✅ API Gateway development server also running\r\n- 🔄 Installing additional dependencies (MUI, Redux, etc.)\r\n\r\n**Initial Setup**:\r\n\r\n```bash\r\nnpm create vite@latest frontend -- --template react-ts\r\ncd frontend\r\nnpm install @mui/material @emotion/react @emotion/styled\r\nnpm install @reduxjs/toolkit react-redux\r\nnpm install react-router-dom\r\nnpm install react-hook-form zod @hookform/resolvers\r\n```\r\n\r\n**Project Structure**:\r\n\r\n```\r\nfrontend/src/\r\n├── components/\r\n│   ├── common/          # Reusable components\r\n│   ├── auth/            # Auth-related\r\n│   └── layout/          # Layout components\r\n├── pages/               # Route components\r\n├── store/               # Redux store\r\n├── services/            # API services\r\n├── hooks/               # Custom hooks\r\n├── utils/               # Utilities\r\n├── types/               # TypeScript types\r\n└── theme/               # MUI theme\r\n```\r\n\r\n**Theme Configuration**:\r\n\r\n```typescript\r\nimport { createTheme } from '@mui/material/styles';\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: { main: '#1976d2' },\r\n    secondary: { main: '#dc004e' },\r\n  },\r\n  typography: {\r\n    fontFamily: 'Inter, system-ui, sans-serif',\r\n  },\r\n});\r\n```\r\n\r\n---\r\n\r\n## E5.2: Authentication UI\r\n\r\n**Story Points**: 5\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E2.1, E5.1\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Login page with form validation\r\n- [ ] Registration page\r\n- [ ] Email verification UI\r\n- [ ] Password reset flow\r\n- [ ] Google OAuth button\r\n- [ ] Protected route wrapper\r\n\r\n**Components**:\r\n\r\n```typescript\r\n// Login Form\r\n- [ ] Email and password fields\r\n- [ ] Validation with react-hook-form + zod\r\n- [ ] Remember me checkbox\r\n- [ ] Forgot password link\r\n- [ ] Loading states\r\n- [ ] Error display\r\n\r\n// Registration Form\r\n- [ ] Email, password, confirm password\r\n- [ ] Terms acceptance checkbox\r\n- [ ] Validation rules\r\n- [ ] Success message\r\n\r\n// Protected Route\r\n- [ ] Check authentication status\r\n- [ ] Redirect to login if not authenticated\r\n- [ ] Show loading while checking\r\n```\r\n\r\n---\r\n\r\n## E5.3: Dashboard UI\r\n\r\n**Story Points**: 8\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n**Dependencies**: E5.1, E5.2\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/credit_account.md`, `../../02_architecture/data_models/credit_transaction.md`, `../../02_architecture/data_models/usage_log.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Dashboard layout with navigation\r\n- [ ] Credit balance widget\r\n- [ ] Usage statistics charts\r\n- [ ] Available services grid\r\n- [ ] Recent activity table\r\n\r\n**Dashboard Widgets**:\r\n\r\n- Credit Balance Card (real-time)\r\n- Usage Chart (last 30 days)\r\n- Quick Actions (Top-up, View History)\r\n- Service Status Indicators\r\n- Recent Transactions Table\r\n\r\n---\r\n\r\n## E5.4: Admin Interface\r\n\r\n**Story Points**: 8\r\n**Priority**: P2 (Medium)\r\n**Status**: Not Started\r\n**Dependencies**: E5.1, E2.3 (RBAC)\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/core_service.md`\r\n  - Data Models: `../../02_architecture/data_models/user.md`, `../../02_architecture/data_models/role.md`, `../../02_architecture/data_models/permission.md`, `../../02_architecture/data_models/credit_account.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Admin dashboard with metrics\r\n- [ ] User management table\r\n- [ ] Credit management interface\r\n- [ ] System monitoring panels\r\n- [ ] Audit log viewer",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.375Z",
          "updatedAt": "2025-10-14T13:01:08.375Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "credit_account",
          "description": "epic_5 references credit_account",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "credit_transaction",
          "description": "epic_5 references credit_transaction",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "permission",
          "description": "epic_5 references permission",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "epic_5 references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "usage_log",
          "description": "epic_5 references usage_log",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "epic_5 references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_5 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_5 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_5 references core_service",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "epic_6",
        "title": "Epic 6: Testing & Deployment (Sprint 5)",
        "type": "epic",
        "category": "documentation",
        "content": "# Epic 6: Testing & Deployment (Sprint 5)\r\n\r\n## E6.1: Testing Implementation\r\n\r\n**Story Points**: 8\r\n**Priority**: P1 (High)\r\n**Status**: Not Started\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n  - Data Models: All data models in `../../02_architecture/data_models/`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Unit tests (80%+ coverage)\r\n- [ ] Integration tests for APIs\r\n- [ ] E2E tests for critical flows\r\n- [ ] Performance testing\r\n- [ ] Security testing\r\n\r\n**Testing Stack**:\r\n\r\n- Jest for unit tests\r\n- Supertest for API tests\r\n- Cypress for E2E tests\r\n- Artillery for load testing\r\n\r\n---\r\n\r\n## E6.2: Production Deployment\r\n\r\n**Story Points**: 5\r\n**Priority**: P0 (Critical)\r\n**Status**: Not Started\r\n- **links_to_architecture**:\r\n  - Service: `../../02_architecture/services/api_gateway.md`, `../../02_architecture/services/auth_service.md`, `../../02_architecture/services/core_service.md`, `../../02_architecture/services/mcp_server.md`\r\n\r\n**Acceptance Criteria**:\r\n\r\n- [ ] Production Docker configuration\r\n- [ ] Environment variable management\r\n- [ ] SSL automation\r\n- [ ] Database migration automation\r\n- [ ] Monitoring and alerting",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.376Z",
          "updatedAt": "2025-10-14T13:01:08.376Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 51.45833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 85,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 76.45833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "api_gateway",
          "description": "epic_6 references api_gateway",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "auth_service",
          "description": "epic_6 references auth_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "core_service",
          "description": "epic_6 references core_service",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "mcp_server",
          "description": "epic_6 references mcp_server",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "README",
        "title": "Product Backlog",
        "type": "functional_requirement",
        "category": "documentation",
        "content": "# Product Backlog\r\n\r\nThis directory contains the product backlog for the Smart AI Hub project. It includes epics that define large features and user value, as well as sprint planning information that organizes work into timeboxed iterations.\r\n\r\n## Contents\r\n\r\n### Epics\r\nEpics are large bodies of work that can be broken down into smaller stories or tasks.\r\n\r\n- [epic_1.md](epics/epic_1.md) - User Authentication and Authorization\r\n- [epic_2.md](epics/epic_2.md) - Credit Management System\r\n- [epic_3.md](epics/epic_3.md) - API Integration Framework\r\n- [epic_4.md](epics/epic_4.md) - Usage Analytics and Reporting\r\n- [epic_5.md](epics/epic_5.md) - Admin Dashboard and Management\r\n- [epic_6.md](epics/epic_6.md) - Notification System\r\n\r\n### Sprints\r\nSprints are timeboxed iterations of work that deliver a potentially shippable increment of the product.\r\n\r\n- [sprints/](sprints/) - Sprint planning and backlog items",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.376Z",
          "updatedAt": "2025-10-14T13:01:08.376Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Consider updating content to match pattern: Functional requirement should use clear language (shall, must, should, will)"
          },
          {
            "type": "unclear_requirement",
            "message": "Functional requirement should use clear language (shall, must, should, will)",
            "suggestion": "Use modal verbs to make requirements unambiguous"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 33.95833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 55,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 68.95833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "user",
          "description": "README references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_1",
          "description": "README references epic_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_2",
          "description": "README references epic_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_3",
          "description": "README references epic_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_4",
          "description": "README references epic_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_5",
          "description": "README references epic_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_6",
          "description": "README references epic_6",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    },
    {
      "specification": {
        "id": "TRACEABILITY",
        "title": "Project Traceability Matrix",
        "type": "user_story",
        "category": "documentation",
        "content": "# Project Traceability Matrix\r\n\r\nThis document provides a high-level view of the project's traceability, linking user stories to their implemented requirements and associated epics.\r\n\r\n## User Story Traceability\r\n\r\n| User Story ID & Title | Implements Requirement | Part of Epic |\r\n|----------------------|----------------------|--------------|\r\n| [US-1: User Registration with Email](specs/01_requirements/user_stories/us_1.md) | [FR-1](specs/01_requirements/functional/fr_1.md) | [Epic 2](specs/03_backlog/epics/epic_2.md) |\r\n| [US-2: Google OAuth Registration](specs/01_requirements/user_stories/us_2.md) | [FR-1](specs/01_requirements/functional/fr_1.md) | [Epic 2](specs/03_backlog/epics/epic_2.md) |\r\n| [US-3: Role Assignment](specs/01_requirements/user_stories/us_3.md) | [FR-2](specs/01_requirements/functional/fr_2.md) | [Epic 2](specs/03_backlog/epics/epic_2.md) |\r\n| [US-4: View Credit Balance](specs/01_requirements/user_stories/us_4.md) | [FR-3](specs/01_requirements/functional/fr_3.md) | [Epic 3](specs/03_backlog/epics/epic_3.md) |\r\n| [US-5: Purchase Credits](specs/01_requirements/user_stories/us_5.md) | [FR-3](specs/01_requirements/functional/fr_3.md) | [Epic 3](specs/03_backlog/epics/epic_3.md) |\r\n| [US-6: Promotional Code Redemption](specs/01_requirements/user_stories/us_6.md) | [FR-3](specs/01_requirements/functional/fr_3.md) | [Epic 3](specs/03_backlog/epics/epic_3.md) |\r\n| [US-7: Access GPT via API](specs/01_requirements/user_stories/us_7.md) | [FR-4](specs/01_requirements/functional/fr_4.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-8: Monitor Usage](specs/01_requirements/user_stories/us_8.md) | [FR-5](specs/01_requirements/functional/fr_5.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-9: Sora2 Video Generator Integration](specs/01_requirements/user_stories/us_9.md) | [FR-AUTH-06](specs/01_requirements/functional/fr_auth_06.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-10: Session-Based Authentication for External Services](specs/01_requirements/user_stories/us_10.md) | [FR-AUTH-05](specs/01_requirements/functional/fr_auth_05.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n| [US-11: Credit Management APIs for External Services](specs/01_requirements/user_stories/us_11.md) | [FR-CREDIT-03](specs/01_requirements/functional/fr_credit_03.md), [FR-CREDIT-04](specs/01_requirements/functional/fr_credit_04.md) | [Epic 4](specs/03_backlog/epics/epic_4.md) |\r\n\r\n## Summary\r\n\r\n- **Total User Stories**: 11\r\n- **Total Requirements**: 10 (some user stories implement multiple requirements)\r\n- **Total Epics**: 3 (Epic 2, Epic 3, and Epic 4)\r\n\r\n### Breakdown by Epic:\r\n\r\n**Epic 2 - User Management & Authentication**\r\n- US-1: User Registration with Email\r\n- US-2: Google OAuth Registration\r\n- US-3: Role Assignment\r\n\r\n**Epic 3 - Credit System**\r\n- US-4: View Credit Balance\r\n- US-5: Purchase Credits\r\n- US-6: Promotional Code Redemption\r\n\r\n**Epic 4 - API Integration & External Services**\r\n- US-7: Access GPT via API\r\n- US-8: Monitor Usage\r\n- US-9: Sora2 Video Generator Integration\r\n- US-10: Session-Based Authentication for External Services\r\n- US-11: Credit Management APIs for External Services\r\n\r\nThis traceability matrix helps ensure that all user stories are properly linked to their requirements and epics, providing clear visibility into the project structure and dependencies.",
        "metadata": {
          "version": "1.0.0",
          "createdAt": "2025-10-14T13:01:08.376Z",
          "updatedAt": "2025-10-14T13:01:08.376Z",
          "status": "draft",
          "priority": "medium"
        },
        "validation": {
          "required": [
            "title",
            "content"
          ],
          "patterns": []
        }
      },
      "validationResult": {
        "valid": false,
        "errors": [
          {
            "type": "pattern_mismatch",
            "message": "Content must be at least 10 characters long",
            "severity": "error"
          }
        ],
        "warnings": [
          {
            "type": "incomplete_content",
            "message": "User story should follow format: \"As a [user], I want to [action], so that [benefit]\"",
            "suggestion": "Consider updating content to match pattern: User story should follow format: \"As a [user], I want to [action], so that [benefit]\""
          },
          {
            "type": "incomplete_content",
            "message": "User story should include acceptance criteria",
            "suggestion": "Consider updating content to match pattern: User story should include acceptance criteria"
          },
          {
            "type": "unclear_requirement",
            "message": "User story should follow the standard format: \"As a [user], I want to [action], so that [benefit]\"",
            "suggestion": "Restructure the user story to follow the standard format"
          },
          {
            "type": "incomplete_content",
            "message": "Specification missing author information",
            "suggestion": "Add author information to track ownership"
          }
        ],
        "score": 25.20833333333333,
        "metrics": {
          "completeness": 87.5,
          "clarity": 40,
          "consistency": 100,
          "traceability": 33.33333333333333,
          "overall": 65.20833333333333
        }
      },
      "relationships": [
        {
          "type": "references",
          "targetId": "fr_1",
          "description": "TRACEABILITY references fr_1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_2",
          "description": "TRACEABILITY references fr_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_3",
          "description": "TRACEABILITY references fr_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_4",
          "description": "TRACEABILITY references fr_4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_5",
          "description": "TRACEABILITY references fr_5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_05",
          "description": "TRACEABILITY references fr_auth_05",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_auth_06",
          "description": "TRACEABILITY references fr_auth_06",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_03",
          "description": "TRACEABILITY references fr_credit_03",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "fr_credit_04",
          "description": "TRACEABILITY references fr_credit_04",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-1",
          "description": "TRACEABILITY references US-1",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-10",
          "description": "TRACEABILITY references US-10",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-11",
          "description": "TRACEABILITY references US-11",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-2",
          "description": "TRACEABILITY references US-2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-3",
          "description": "TRACEABILITY references US-3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-4",
          "description": "TRACEABILITY references US-4",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-5",
          "description": "TRACEABILITY references US-5",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-6",
          "description": "TRACEABILITY references US-6",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-7",
          "description": "TRACEABILITY references US-7",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-8",
          "description": "TRACEABILITY references US-8",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "US-9",
          "description": "TRACEABILITY references US-9",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "role",
          "description": "TRACEABILITY references role",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "user",
          "description": "TRACEABILITY references user",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_2",
          "description": "TRACEABILITY references epic_2",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_3",
          "description": "TRACEABILITY references epic_3",
          "strength": 0.6
        },
        {
          "type": "references",
          "targetId": "epic_4",
          "description": "TRACEABILITY references epic_4",
          "strength": 0.6
        }
      ],
      "impact": {
        "changeImpact": "none",
        "affectedSpecifications": [],
        "riskLevel": "low",
        "effortEstimate": 0
      }
    }
  ],
  "summary": {
    "totalSpecifications": 46,
    "validSpecifications": 0,
    "invalidSpecifications": 46,
    "averageScore": 44.99094202898548,
    "criticalIssues": 46,
    "warnings": 80
  },
  "recommendations": [
    {
      "type": "improve_clarity",
      "priority": "high",
      "description": "Improve clarity and completeness of 46 specifications with low scores",
      "targetSpecifications": [
        "fr_1",
        "fr_2",
        "fr_3",
        "fr_4",
        "fr_5",
        "fr_6",
        "fr_7",
        "fr_auth_05",
        "fr_auth_06",
        "fr_credit_03",
        "fr_credit_04",
        "README",
        "US-1",
        "US-10",
        "US-11",
        "US-2",
        "US-3",
        "US-4",
        "US-5",
        "US-6",
        "US-7",
        "US-8",
        "US-9",
        "credit_account",
        "credit_transaction",
        "permission",
        "promo_code",
        "promo_redemption",
        "role",
        "role_permission",
        "usage_log",
        "user",
        "user_role",
        "README",
        "api_gateway",
        "auth_service",
        "core_service",
        "mcp_server",
        "epic_1",
        "epic_2",
        "epic_3",
        "epic_4",
        "epic_5",
        "epic_6",
        "README",
        "TRACEABILITY"
      ],
      "effort": 92,
      "impact": "Improved specification quality and reduced ambiguity"
    },
    {
      "type": "add_dependencies",
      "priority": "medium",
      "description": "Review and add dependencies for 46 specifications",
      "targetSpecifications": [
        "fr_1",
        "fr_2",
        "fr_3",
        "fr_4",
        "fr_5",
        "fr_6",
        "fr_7",
        "fr_auth_05",
        "fr_auth_06",
        "fr_credit_03",
        "fr_credit_04",
        "README",
        "US-1",
        "US-10",
        "US-11",
        "US-2",
        "US-3",
        "US-4",
        "US-5",
        "US-6",
        "US-7",
        "US-8",
        "US-9",
        "credit_account",
        "credit_transaction",
        "permission",
        "promo_code",
        "promo_redemption",
        "role",
        "role_permission",
        "usage_log",
        "user",
        "user_role",
        "README",
        "api_gateway",
        "auth_service",
        "core_service",
        "mcp_server",
        "epic_1",
        "epic_2",
        "epic_3",
        "epic_4",
        "epic_5",
        "epic_6",
        "README",
        "TRACEABILITY"
      ],
      "effort": 23,
      "impact": "Better traceability and impact analysis"
    }
  ],
  "metrics": {
    "qualityScore": 73.68659420289859,
    "completenessScore": 87.5,
    "consistencyScore": 100,
    "maintainabilityIndex": 66.13903985507245,
    "technicalDebt": 26.31340579710141
  }
}