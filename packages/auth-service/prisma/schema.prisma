// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @unique @db.VarChar(255)
  passwordHash String?   @map("password_hash") @db.VarChar(255)
  verified     Boolean   @default(false)
  googleId     String?   @unique @map("google_id") @db.VarChar(255)
  tier         UserTier  @default(general)
  parentAgencyId String? @map("parent_agency_id") @db.Uuid
  parentOrganizationId String? @map("parent_organization_id") @db.Uuid
  inviteCode   String?   @unique @map("invite_code") @db.VarChar(12)
  invitedBy    String?   @map("invited_by") @db.Uuid
  isBlocked    Boolean   @default(false) @map("is_blocked")
  blockedReason String?  @map("blocked_reason") @db.Text
  blockedAt    DateTime? @map("blocked_at")
  blockedBy    String?   @map("blocked_by") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  roles         UserRole[]
  creditAccount CreditAccount?
  usageLogs     UsageLog[]
  profile       UserProfile?

  @@map("users")
  @@index([email])
  @@index([tier])
  @@index([parentAgencyId])
  @@index([parentOrganizationId])
  @@index([inviteCode])
  @@index([invitedBy])
}

enum UserTier {
  administrator
  agency
  organization
  admin
  general
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  resource    String   @db.VarChar(50)
  action      String   @db.VarChar(50)

  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  userId     String   @map("user_id") @db.Uuid
  roleId     String   @map("role_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model CreditAccount {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions CreditTransaction[]

  @@map("credit_accounts")
  @@index([userId])
}

model CreditTransaction {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creditAccountId String          @map("credit_account_id") @db.Uuid
  type            TransactionType
  amount          Int
  balanceAfter    Int             @map("balance_after")
  description     String?         @db.Text
  metadata        Json            @default("{}")
  createdAt       DateTime        @default(now()) @map("created_at")

  creditAccount CreditAccount @relation(fields: [creditAccountId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model UserProfile {
  userId     String   @id @map("user_id") @db.Uuid
  firstName  String?  @map("first_name") @db.VarChar(100)
  lastName   String?  @map("last_name") @db.VarChar(100)
  avatarUrl  String?  @map("avatar_url") @db.VarChar(500)
  preferences Json     @default("{}")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UsageLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  service   String   @db.VarChar(100)
  action    String   @db.VarChar(100)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
  @@index([userId])
  @@index([service, action])
}

enum TransactionType {
  purchase
  usage
  refund
  admin_adjustment
}