generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  userRoles   UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid
  grantedAt DateTime @default(now()) @map("granted_at")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String              @unique @db.VarChar(255)
  passwordHash       String?             @map("password_hash") @db.VarChar(255)
  googleId           String?             @unique @map("google_id") @db.VarChar(255)
  verified           Boolean             @default(false)
  tier               UserTier            @default(general)
  parentAgencyId     String?             @map("parent_agency_id") @db.Uuid
  parentOrganizationId String?           @map("parent_organization_id") @db.Uuid
  inviteCode         String?             @unique @map("invite_code") @db.VarChar(12)
  invitedBy          String?             @map("invited_by") @db.Uuid
  isBlocked          Boolean             @default(false) @map("is_blocked")
  blockedReason      String?             @map("blocked_reason") @db.Text
  blockedAt          DateTime?           @map("blocked_at")
  blockedBy          String?             @map("blocked_by") @db.Uuid
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")
  credits            Int      @default(0)
  points             Int      @default(0)
  creditAccount      CreditAccount?
  pointAccount       PointAccount?
  creditTransactions CreditTransaction[]
  pointTransactions  PointTransaction[]
  dailyLoginRewards  DailyLoginReward[]
  profile            UserProfile?
  userRoles          UserRole[]
  promoCodeUsages    PromoCodeUsage[]
  payments           Payment[]
  usageLogs          UsageLog[]
  sentTransfers      Transfer[]          @relation("TransferSender")
  receivedTransfers  Transfer[]          @relation("TransferReceiver")
  referralRewardsGiven ReferralReward[]  @relation("ReferralRewardGiver")
  referralRewardsReceived ReferralReward[] @relation("ReferralRewardRecipient")
  agencyReferralConfig AgencyReferralConfig?
  blockLogs          BlockLog[]
  autoTopupLogs      AutoTopupLog[]
  createdAgents      Agent[]              @relation("AgentCreator")
  organizationAgents Agent[]              @relation("AgentOrganization")
  agencyAgents       Agent[]              @relation("AgentAgency")
  updatedAgentSettings AgentSetting[]     @relation("AgentSettingUpdater")

  @@map("users")
  @@index([email])
  @@index([tier])
  @@index([parentAgencyId])
  @@index([parentOrganizationId])
  @@index([inviteCode])
  @@index([invitedBy])
}

enum UserTier {
  administrator
  agency
  organization
  admin
  general
}

model UserProfile {
  userId      String   @id @map("user_id") @db.Uuid
  firstName   String?  @map("first_name") @db.VarChar(100)
  lastName    String?  @map("last_name") @db.VarChar(100)
  avatarUrl   String?  @map("avatar_url") @db.VarChar(500)
  preferences Json     @default("{}")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CreditAccount {
  userId    String   @id @map("user_id") @db.Uuid
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_accounts")
}

model CreditTransaction {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String          @map("user_id") @db.Uuid
  type         TransactionType
  amount       Int
  balanceAfter Int             @map("balance_after")
  description  String?
  metadata     Json            @default("{}")
  createdAt    DateTime        @default(now()) @map("created_at")
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model PointAccount {
  userId    String   @id @map("user_id") @db.Uuid
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_accounts")
}

model PointTransaction {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String            @map("user_id") @db.Uuid
  type         PointTransactionType
  amount       Int
  balanceAfter Int               @map("balance_after")
  description  String?
  metadata     Json              @default("{}")
  createdAt    DateTime          @default(now()) @map("created_at")
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_transactions")
}

enum PointTransactionType {
  purchase
  usage
  exchange_from_credit
  auto_topup_from_credit
  daily_reward
  admin_adjustment
  refund
}

model DailyLoginReward {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  rewardDate DateTime @map("reward_date") @db.Date
  points    Int
  claimedAt DateTime @default(now()) @map("claimed_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rewardDate])
  @@map("daily_login_rewards")
}

model ExchangeRate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  rate        Float
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("exchange_rates")
}

enum TransactionType {
  purchase
  usage
  refund
  admin_adjustment
  promo
}

model PromoCode {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String   @unique @db.VarChar(50)
  credits     Int
  isActive    Boolean  @default(true) @map("is_active")
  expiresAt   DateTime? @map("expires_at")
  maxUses     Int?     @map("max_uses")
  usedCount   Int      @default(0) @map("used_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  usages      PromoCodeUsage[]

  @@map("promo_codes")
}

model PromoCodeUsage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  promoCodeId String  @map("promo_code_id") @db.Uuid
  usedAt     DateTime @default(now()) @map("used_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode  PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)

  @@unique([userId, promoCodeId])
  @@map("promo_code_usages")
}

model UserRole {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  resource    String   @db.VarChar(50)
  action      String   @db.VarChar(50)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Payment {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                  String   @map("user_id") @db.Uuid
  amount                  Int
  credits                 Int
  points                  Int      @default(0)
  status                  String
  stripeSessionId         String   @unique @map("stripe_session_id")
  stripePaymentIntentId   String?  @map("stripe_payment_intent_id")
  metadata                Json?
  createdAt               DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model UsageLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  service   String   @db.VarChar(50)
  model     String?  @db.VarChar(100)
  tokens    Int?
  credits   Int
  points    Int      @default(0)
  currency  String   @default("credits") @db.VarChar(20)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([service, createdAt])
  @@index([model, createdAt])
  @@map("usage_logs")
}

model PerformanceBaseline {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service       String   @db.VarChar(50)
  route         String   @db.VarChar(255)
  method        String   @db.VarChar(10)
  date          DateTime @db.Date
  p50           Float    @map("p50")
  p90           Float    @map("p90")
  p95           Float    @map("p95")
  p99           Float    @map("p99")
  avg           Float    @map("avg")
  count         Int      @map("count")
  slaTier       String   @map("sla_tier") @db.VarChar(20)
  slaThreshold  Int      @map("sla_threshold")
  slaCompliance Float    @map("sla_compliance")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([service, route, method, date], map: "service_route_method_date")
  @@index([service, date])
  @@index([slaTier, date])
  @@index([date])
  @@map("performance_baselines")
}

model Transfer {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId     String          @map("sender_id") @db.Uuid
  receiverId   String          @map("receiver_id") @db.Uuid
  type         TransferType
  currency     TransferCurrency
  amount       Int
  description  String?         @db.Text
  metadata     Json            @default("{}")
  status       TransferStatus  @default(completed)
  createdAt    DateTime        @default(now()) @map("created_at")
  
  sender       User            @relation("TransferSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User            @relation("TransferReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("transfers")
  @@index([senderId, createdAt])
  @@index([receiverId, createdAt])
}

enum TransferType {
  manual
  referral_reward
  admin_adjustment
}

enum TransferCurrency {
  points
  credits
}

enum TransferStatus {
  pending
  completed
  failed
  cancelled
}

model ReferralReward {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrerId            String   @map("referrer_id") @db.Uuid
  refereeId             String   @map("referee_id") @db.Uuid
  referrerTier          UserTier @map("referrer_tier")
  refereeTier           UserTier @map("referee_tier")
  referrerRewardPoints  Int      @map("referrer_reward_points")
  refereeRewardPoints   Int      @map("referee_reward_points")
  agencyBonusPoints     Int?     @map("agency_bonus_points")
  agencyId              String?  @map("agency_id") @db.Uuid
  status                RewardStatus @default(pending)
  processedAt           DateTime? @map("processed_at")
  createdAt             DateTime @default(now()) @map("created_at")
  
  referrer              User     @relation("ReferralRewardRecipient", fields: [referrerId], references: [id], onDelete: Cascade)
  referee               User     @relation("ReferralRewardGiver", fields: [refereeId], references: [id], onDelete: Cascade)

  @@map("referral_rewards")
  @@index([referrerId, createdAt])
  @@index([refereeId, createdAt])
  @@index([agencyId, createdAt])
}

enum RewardStatus {
  pending
  completed
  failed
}

model AgencyReferralConfig {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agencyId                 String   @unique @map("agency_id") @db.Uuid
  organizationRewardPoints Int      @default(5000) @map("organization_reward_points")
  adminRewardPoints        Int      @default(3000) @map("admin_reward_points")
  generalRewardPoints      Int      @default(1000) @map("general_reward_points")
  isActive                 Boolean  @default(true) @map("is_active")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  
  agency                   User     @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@map("agency_referral_configs")
}

model BlockLog {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  blockedBy  String      @map("blocked_by") @db.Uuid
  action     BlockAction
  reason     String?     @db.Text
  metadata   Json        @default("{}")
  createdAt  DateTime    @default(now()) @map("created_at")
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("block_logs")
  @@index([userId, createdAt])
  @@index([blockedBy, createdAt])
}

enum BlockAction {
  block
  unblock
}

model AutoTopupLog {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  creditsDeducted Int      @map("credits_deducted")
  pointsAdded     Int      @map("points_added")
  triggerReason   String   @map("trigger_reason") @db.VarChar(50)
  balanceBefore   Json     @map("balance_before") @default("{}")
  balanceAfter    Json     @map("balance_after") @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auto_topup_logs")
  @@index([userId, createdAt])
}

// Agent Models for OpenAI Agents Marketplace

enum AgentType {
  AGENTFLOW
  CUSTOMGPT
  GEMINI_GEM
}

enum AgentVisibility {
  PRIVATE
  ORGANIZATION
  AGENCY
  PUBLIC
}

enum AgentStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalAction {
  SUBMITTED
  APPROVED
  REJECTED
}

model Agent {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String         @db.VarChar(255)
  description      String?        @db.Text
  category         String?        @db.VarChar(100)
  icon             String?        @db.VarChar(500)
  type             AgentType
  visibility       AgentVisibility @default(PRIVATE)
  status           AgentStatus    @default(DRAFT)
  flowDefinition   Json?          @map("flow_definition")
  inputSchema      Json?          @map("input_schema")
  outputSchema     Json?          @map("output_schema")
  executionConfig  Json?          @map("execution_config")
  metadata         Json           @default("{}")
  externalUrl      String?        @map("external_url") @db.VarChar(500)
  createdBy        String         @map("created_by") @db.Uuid
  organizationId   String?        @map("organization_id") @db.Uuid
  agencyId         String?        @map("agency_id") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at")
  
  creator          User           @relation("AgentCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  organization     User?          @relation("AgentOrganization", fields: [organizationId], references: [id], onDelete: SetNull)
  agency           User?          @relation("AgentAgency", fields: [agencyId], references: [id], onDelete: SetNull)
  approvalLogs     AgentApprovalLog[]
  usageLogs        AgentUsageLog[]

  @@map("agents")
  @@index([createdBy])
  @@index([type])
  @@index([visibility])
  @@index([status])
  @@index([organizationId])
  @@index([agencyId])
}

model AgentSetting {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String   @db.VarChar(100)
  value       String   @db.Text
  description String?  @db.Text
  dataType    String   @map("data_type") @db.VarChar(50)
  updatedBy   String   @map("updated_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  updater     User     @relation("AgentSettingUpdater", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@unique([key])
  @@map("agent_settings")
}

model AgentApprovalLog {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentId     String         @map("agent_id") @db.Uuid
  action      ApprovalAction
  performedBy String         @map("performed_by") @db.Uuid
  reason      String?        @db.Text
  createdAt   DateTime       @default(now()) @map("created_at")
  
  agent       Agent          @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_approval_logs")
  @@index([agentId, createdAt])
  @@index([performedBy, createdAt])
}

model AgentUsageLog {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentId        String   @map("agent_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  inputData      Json     @map("input_data")
  outputData     Json?    @map("output_data")
  tokensUsed     Int      @map("tokens_used")
  costInCredits  Int      @map("cost_in_credits")
  executionTime  Int      @map("execution_time") // in milliseconds
  status         String   @db.VarChar(50)
  errorMessage   String?  @map("error_message") @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  
  agent          Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_usage_logs")
  @@index([agentId, createdAt])
  @@index([userId, createdAt])
  @@index([status, createdAt])
}
