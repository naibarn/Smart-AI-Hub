generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  userRoles   UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid
  grantedAt DateTime @default(now()) @map("granted_at")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String              @unique @db.VarChar(255)
  passwordHash       String?             @map("password_hash") @db.VarChar(255)
  googleId           String?             @unique @map("google_id") @db.VarChar(255)
  verified           Boolean             @default(false)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")
  credits            Int      @default(0)
  creditAccount      CreditAccount?
  creditTransactions CreditTransaction[]
  profile            UserProfile?
  userRoles          UserRole[]
  promoCodeUsages    PromoCodeUsage[]
  payments           Payment[]
  usageLogs          UsageLog[]

  @@map("users")
}

model UserProfile {
  userId      String   @id @map("user_id") @db.Uuid
  firstName   String?  @map("first_name") @db.VarChar(100)
  lastName    String?  @map("last_name") @db.VarChar(100)
  avatarUrl   String?  @map("avatar_url") @db.VarChar(500)
  preferences Json     @default("{}")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CreditAccount {
  userId    String   @id @map("user_id") @db.Uuid
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_accounts")
}

model CreditTransaction {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String          @map("user_id") @db.Uuid
  type         TransactionType
  amount       Int
  balanceAfter Int             @map("balance_after")
  description  String?
  metadata     Json            @default("{}")
  createdAt    DateTime        @default(now()) @map("created_at")
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

enum TransactionType {
  purchase
  usage
  refund
  admin_adjustment
  promo
}

model PromoCode {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String   @unique @db.VarChar(50)
  credits     Int
  isActive    Boolean  @default(true) @map("is_active")
  expiresAt   DateTime? @map("expires_at")
  maxUses     Int?     @map("max_uses")
  usedCount   Int      @default(0) @map("used_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  usages      PromoCodeUsage[]

  @@map("promo_codes")
}

model PromoCodeUsage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  promoCodeId String  @map("promo_code_id") @db.Uuid
  usedAt     DateTime @default(now()) @map("used_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode  PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)

  @@unique([userId, promoCodeId])
  @@map("promo_code_usages")
}

model UserRole {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  resource    String   @db.VarChar(50)
  action      String   @db.VarChar(50)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Payment {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                  String   @map("user_id") @db.Uuid
  amount                  Int
  credits                 Int
  status                  String
  stripeSessionId         String   @unique @map("stripe_session_id")
  stripePaymentIntentId   String?  @map("stripe_payment_intent_id")
  metadata                Json?
  createdAt               DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model UsageLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  service   String   @db.VarChar(50)
  model     String?  @db.VarChar(100)
  tokens    Int?
  credits   Int
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([service, createdAt])
  @@index([model, createdAt])
  @@map("usage_logs")
}
