export declare const createMockRedisService: () => {
    get: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    set: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    setEx: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    del: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    exists: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    expire: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    ttl: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    incr: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    incrBy: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    lPush: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    rPop: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    lLen: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    lRange: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sAdd: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sRem: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sIsMember: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sMembers: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    keys: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
};
export declare const createMockRedisClient: () => {
    isOpen: boolean;
    get: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    set: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    setEx: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    del: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    exists: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    expire: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    ttl: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    incr: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    incrBy: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    lPush: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    rPop: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    lLen: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    lRange: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sAdd: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sRem: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sIsMember: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    sMembers: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    keys: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    connect: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    quit: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    on: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
};
export declare const mockRedisConfig: {
    redisClient: {
        isOpen: boolean;
        get: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        set: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        setEx: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        del: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        exists: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        expire: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        ttl: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        incr: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        incrBy: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        lPush: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        rPop: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        lLen: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        lRange: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        sAdd: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        sRem: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        sIsMember: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        sMembers: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        keys: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        connect: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        quit: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
        on: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    };
    connectRedis: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    disconnectRedis: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    executeRedisCommand: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
};
export declare const setupRedisDefaults: (mockRedisService: any) => void;
export default createMockRedisService;
//# sourceMappingURL=redis.mock.d.ts.map